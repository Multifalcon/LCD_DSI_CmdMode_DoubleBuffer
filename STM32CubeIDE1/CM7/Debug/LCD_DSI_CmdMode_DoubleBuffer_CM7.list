
LCD_DSI_CmdMode_DoubleBuffer_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e6c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000988fc  08008104  08008104  00018104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080a0a00  080a0a00  000b0a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080a0a04  080a0a04  000b0a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  080a0a08  000c0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000478  20000040  080a0a44  000c0040  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200004b8  080a0a44  000c04b8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000c003c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000c006a  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d089  00000000  00000000  000c00ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003865  00000000  00000000  000dd136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001438  00000000  00000000  000e09a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f7e  00000000  00000000  000e1dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00043b07  00000000  00000000  000e2d56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001aa13  00000000  00000000  0012685d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001b9000  00000000  00000000  00141270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00005454  00000000  00000000  002fa270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 000000cb  00000000  00000000  002ff6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000040 	.word	0x20000040
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080080ec 	.word	0x080080ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000044 	.word	0x20000044
 80002d4:	080080ec 	.word	0x080080ec

080002d8 <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 80002e2:	f04f 33ff 	mov.w	r3, #4294967295
 80002e6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4619      	mov	r1, r3
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f000 f832 	bl	8000358 <IS42S32800J_ClockEnable>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d128      	bne.n	800034c <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 80002fa:	2001      	movs	r0, #1
 80002fc:	f000 f8e2 	bl	80004c4 <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4619      	mov	r1, r3
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f000 f84a 	bl	80003a0 <IS42S32800J_Precharge>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d11c      	bne.n	800034c <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	6819      	ldr	r1, [r3, #0]
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	461a      	mov	r2, r3
 800031c:	6878      	ldr	r0, [r7, #4]
 800031e:	f000 f897 	bl	8000450 <IS42S32800J_RefreshMode>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d111      	bne.n	800034c <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8000328:	6839      	ldr	r1, [r7, #0]
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	f000 f85c 	bl	80003e8 <IS42S32800J_ModeRegConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d10a      	bne.n	800034c <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	4619      	mov	r1, r3
 800033c:	6878      	ldr	r0, [r7, #4]
 800033e:	f000 f8ad 	bl	800049c <IS42S32800J_RefreshRate>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d101      	bne.n	800034c <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800034c:	68fb      	ldr	r3, [r7, #12]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8000362:	4b0e      	ldr	r3, [pc, #56]	; (800039c <IS42S32800J_ClockEnable+0x44>)
 8000364:	2201      	movs	r2, #1
 8000366:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000368:	4a0c      	ldr	r2, [pc, #48]	; (800039c <IS42S32800J_ClockEnable+0x44>)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800036e:	4b0b      	ldr	r3, [pc, #44]	; (800039c <IS42S32800J_ClockEnable+0x44>)
 8000370:	2201      	movs	r2, #1
 8000372:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000374:	4b09      	ldr	r3, [pc, #36]	; (800039c <IS42S32800J_ClockEnable+0x44>)
 8000376:	2200      	movs	r2, #0
 8000378:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800037a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800037e:	4907      	ldr	r1, [pc, #28]	; (800039c <IS42S32800J_ClockEnable+0x44>)
 8000380:	6878      	ldr	r0, [r7, #4]
 8000382:	f006 fbb3 	bl	8006aec <HAL_SDRAM_SendCommand>
 8000386:	4603      	mov	r3, r0
 8000388:	2b00      	cmp	r3, #0
 800038a:	d002      	beq.n	8000392 <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 800038c:	f04f 33ff 	mov.w	r3, #4294967295
 8000390:	e000      	b.n	8000394 <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 8000392:	2300      	movs	r3, #0
  }
}
 8000394:	4618      	mov	r0, r3
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	2000005c 	.word	0x2000005c

080003a0 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <IS42S32800J_Precharge+0x44>)
 80003ac:	2202      	movs	r2, #2
 80003ae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80003b0:	4a0c      	ldr	r2, [pc, #48]	; (80003e4 <IS42S32800J_Precharge+0x44>)
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80003b6:	4b0b      	ldr	r3, [pc, #44]	; (80003e4 <IS42S32800J_Precharge+0x44>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80003bc:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <IS42S32800J_Precharge+0x44>)
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80003c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003c6:	4907      	ldr	r1, [pc, #28]	; (80003e4 <IS42S32800J_Precharge+0x44>)
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f006 fb8f 	bl	8006aec <HAL_SDRAM_SendCommand>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d002      	beq.n	80003da <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 80003d4:	f04f 33ff 	mov.w	r3, #4294967295
 80003d8:	e000      	b.n	80003dc <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 80003da:	2300      	movs	r3, #0
  }
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	2000005c 	.word	0x2000005c

080003e8 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80003fa:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000400:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000406:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800040c:	4313      	orrs	r3, r2
 800040e:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8000410:	4b0e      	ldr	r3, [pc, #56]	; (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000412:	2204      	movs	r2, #4
 8000414:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	4a0c      	ldr	r2, [pc, #48]	; (800044c <IS42S32800J_ModeRegConfig+0x64>)
 800041c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800041e:	4b0b      	ldr	r3, [pc, #44]	; (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000420:	2201      	movs	r2, #1
 8000422:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000424:	4a09      	ldr	r2, [pc, #36]	; (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800042a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800042e:	4907      	ldr	r1, [pc, #28]	; (800044c <IS42S32800J_ModeRegConfig+0x64>)
 8000430:	6878      	ldr	r0, [r7, #4]
 8000432:	f006 fb5b 	bl	8006aec <HAL_SDRAM_SendCommand>
 8000436:	4603      	mov	r3, r0
 8000438:	2b00      	cmp	r3, #0
 800043a:	d002      	beq.n	8000442 <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 800043c:	f04f 33ff 	mov.w	r3, #4294967295
 8000440:	e000      	b.n	8000444 <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 8000442:	2300      	movs	r3, #0
  }
}
 8000444:	4618      	mov	r0, r3
 8000446:	3710      	adds	r7, #16
 8000448:	46bd      	mov	sp, r7
 800044a:	bd80      	pop	{r7, pc}
 800044c:	2000005c 	.word	0x2000005c

08000450 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800045c:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <IS42S32800J_RefreshMode+0x48>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000462:	4a0d      	ldr	r2, [pc, #52]	; (8000498 <IS42S32800J_RefreshMode+0x48>)
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000468:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <IS42S32800J_RefreshMode+0x48>)
 800046a:	2208      	movs	r2, #8
 800046c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800046e:	4b0a      	ldr	r3, [pc, #40]	; (8000498 <IS42S32800J_RefreshMode+0x48>)
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000474:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000478:	4907      	ldr	r1, [pc, #28]	; (8000498 <IS42S32800J_RefreshMode+0x48>)
 800047a:	68f8      	ldr	r0, [r7, #12]
 800047c:	f006 fb36 	bl	8006aec <HAL_SDRAM_SendCommand>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d002      	beq.n	800048c <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 8000486:	f04f 33ff 	mov.w	r3, #4294967295
 800048a:	e000      	b.n	800048e <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 800048c:	2300      	movs	r3, #0
  }
}
 800048e:	4618      	mov	r0, r3
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	2000005c 	.word	0x2000005c

0800049c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80004a6:	6839      	ldr	r1, [r7, #0]
 80004a8:	6878      	ldr	r0, [r7, #4]
 80004aa:	f006 fb54 	bl	8006b56 <HAL_SDRAM_ProgramRefreshRate>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d002      	beq.n	80004ba <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	e000      	b.n	80004bc <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 80004ba:	2300      	movs	r3, #0
  }
}
 80004bc:	4618      	mov	r0, r3
 80004be:	3708      	adds	r7, #8
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80004cc:	f001 fdd0 	bl	8002070 <HAL_GetTick>
 80004d0:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 80004d2:	bf00      	nop
 80004d4:	f001 fdcc 	bl	8002070 <HAL_GetTick>
 80004d8:	4602      	mov	r2, r0
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	1ad3      	subs	r3, r2, r3
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d8f7      	bhi.n	80004d4 <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 80004e4:	2300      	movs	r3, #0
}
 80004e6:	4618      	mov	r0, r3
 80004e8:	3710      	adds	r7, #16
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <OTM8009A_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OTM8009A_RegisterBusIO (OTM8009A_Object_t *pObj, OTM8009A_IO_t *pIO)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  int32_t ret = OTM8009A_OK;
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d103      	bne.n	800050c <OTM8009A_RegisterBusIO+0x1c>
  {
    ret = OTM8009A_ERROR;
 8000504:	f04f 33ff 	mov.w	r3, #4294967295
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	e014      	b.n	8000536 <OTM8009A_RegisterBusIO+0x46>
  }
  else
  {
    pObj->IO.WriteReg  = pIO->WriteReg;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	685a      	ldr	r2, [r3, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	689a      	ldr	r2, [r3, #8]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	68da      	ldr	r2, [r3, #12]
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	60da      	str	r2, [r3, #12]
    
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a07      	ldr	r2, [pc, #28]	; (8000544 <OTM8009A_RegisterBusIO+0x54>)
 8000528:	615a      	str	r2, [r3, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <OTM8009A_RegisterBusIO+0x58>)
 800052e:	611a      	str	r2, [r3, #16]
    pObj->Ctx.handle   = pObj;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	619a      	str	r2, [r3, #24]
  }
  
  return ret;
 8000536:	68fb      	ldr	r3, [r7, #12]
}
 8000538:	4618      	mov	r0, r3
 800053a:	3714      	adds	r7, #20
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	080010e1 	.word	0x080010e1
 8000548:	08001113 	.word	0x08001113

0800054c <OTM8009A_Init>:
  * @param  ColorCoding   Color Code
  * @param  Orientation   Display orientation
  * @retval Component status
  */
int32_t OTM8009A_Init(OTM8009A_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	60f8      	str	r0, [r7, #12]
 8000554:	60b9      	str	r1, [r7, #8]
 8000556:	607a      	str	r2, [r7, #4]
    0xE0,0xF0,0x00,OTM8009A_COLMOD_RGB565,OTM8009A_COLMOD_RGB888,0x7F,0x2C,0x02,0xFF,0x00,
    0x00,0x00,0x66,0xB6,0x06,0xB1,0x06};
  
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */ 
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	f103 0010 	add.w	r0, r3, #16
 800055e:	2300      	movs	r3, #0
 8000560:	4abf      	ldr	r2, [pc, #764]	; (8000860 <OTM8009A_Init+0x314>)
 8000562:	2100      	movs	r1, #0
 8000564:	f000 fe08 	bl	8001178 <otm8009a_write_reg>
 8000568:	6178      	str	r0, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	f103 0010 	add.w	r0, r3, #16
 8000570:	2303      	movs	r3, #3
 8000572:	4abc      	ldr	r2, [pc, #752]	; (8000864 <OTM8009A_Init+0x318>)
 8000574:	21ff      	movs	r1, #255	; 0xff
 8000576:	f000 fdff 	bl	8001178 <otm8009a_write_reg>
 800057a:	4602      	mov	r2, r0
 800057c:	697b      	ldr	r3, [r7, #20]
 800057e:	4413      	add	r3, r2
 8000580:	617b      	str	r3, [r7, #20]
  
  /* Enter ORISE Command 2 */
  /* Shift address to 0x80 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	f103 0010 	add.w	r0, r3, #16
 8000588:	2300      	movs	r3, #0
 800058a:	4ab7      	ldr	r2, [pc, #732]	; (8000868 <OTM8009A_Init+0x31c>)
 800058c:	2100      	movs	r1, #0
 800058e:	f000 fdf3 	bl	8001178 <otm8009a_write_reg>
 8000592:	4602      	mov	r2, r0
 8000594:	697b      	ldr	r3, [r7, #20]
 8000596:	4413      	add	r3, r2
 8000598:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	f103 0010 	add.w	r0, r3, #16
 80005a0:	2302      	movs	r3, #2
 80005a2:	4ab2      	ldr	r2, [pc, #712]	; (800086c <OTM8009A_Init+0x320>)
 80005a4:	21ff      	movs	r1, #255	; 0xff
 80005a6:	f000 fde7 	bl	8001178 <otm8009a_write_reg>
 80005aa:	4602      	mov	r2, r0
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	4413      	add	r3, r2
 80005b0:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	f103 0010 	add.w	r0, r3, #16
 80005b8:	2300      	movs	r3, #0
 80005ba:	4aab      	ldr	r2, [pc, #684]	; (8000868 <OTM8009A_Init+0x31c>)
 80005bc:	2100      	movs	r1, #0
 80005be:	f000 fddb 	bl	8001178 <otm8009a_write_reg>
 80005c2:	4602      	mov	r2, r0
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	4413      	add	r3, r2
 80005c8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f103 0010 	add.w	r0, r3, #16
 80005d0:	2300      	movs	r3, #0
 80005d2:	4aa7      	ldr	r2, [pc, #668]	; (8000870 <OTM8009A_Init+0x324>)
 80005d4:	21c4      	movs	r1, #196	; 0xc4
 80005d6:	f000 fdcf 	bl	8001178 <otm8009a_write_reg>
 80005da:	4602      	mov	r2, r0
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	4413      	add	r3, r2
 80005e0:	617b      	str	r3, [r7, #20]
  
  (void)OTM8009A_IO_Delay(pObj, 10);
 80005e2:	210a      	movs	r1, #10
 80005e4:	68f8      	ldr	r0, [r7, #12]
 80005e6:	f000 fdad 	bl	8001144 <OTM8009A_IO_Delay>
  /* Not documented */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	f103 0010 	add.w	r0, r3, #16
 80005f0:	2300      	movs	r3, #0
 80005f2:	4aa0      	ldr	r2, [pc, #640]	; (8000874 <OTM8009A_Init+0x328>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	f000 fdbf 	bl	8001178 <otm8009a_write_reg>
 80005fa:	4602      	mov	r2, r0
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	4413      	add	r3, r2
 8000600:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f103 0010 	add.w	r0, r3, #16
 8000608:	2300      	movs	r3, #0
 800060a:	4a9b      	ldr	r2, [pc, #620]	; (8000878 <OTM8009A_Init+0x32c>)
 800060c:	21c4      	movs	r1, #196	; 0xc4
 800060e:	f000 fdb3 	bl	8001178 <otm8009a_write_reg>
 8000612:	4602      	mov	r2, r0
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	4413      	add	r3, r2
 8000618:	617b      	str	r3, [r7, #20]
  (void)OTM8009A_IO_Delay(pObj, 10);
 800061a:	210a      	movs	r1, #10
 800061c:	68f8      	ldr	r0, [r7, #12]
 800061e:	f000 fd91 	bl	8001144 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////
  
  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f103 0010 	add.w	r0, r3, #16
 8000628:	2300      	movs	r3, #0
 800062a:	4a94      	ldr	r2, [pc, #592]	; (800087c <OTM8009A_Init+0x330>)
 800062c:	2100      	movs	r1, #0
 800062e:	f000 fda3 	bl	8001178 <otm8009a_write_reg>
 8000632:	4602      	mov	r2, r0
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	4413      	add	r3, r2
 8000638:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f103 0010 	add.w	r0, r3, #16
 8000640:	2300      	movs	r3, #0
 8000642:	4a8f      	ldr	r2, [pc, #572]	; (8000880 <OTM8009A_Init+0x334>)
 8000644:	21c5      	movs	r1, #197	; 0xc5
 8000646:	f000 fd97 	bl	8001178 <otm8009a_write_reg>
 800064a:	4602      	mov	r2, r0
 800064c:	697b      	ldr	r3, [r7, #20]
 800064e:	4413      	add	r3, r2
 8000650:	617b      	str	r3, [r7, #20]
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	f103 0010 	add.w	r0, r3, #16
 8000658:	2300      	movs	r3, #0
 800065a:	4a8a      	ldr	r2, [pc, #552]	; (8000884 <OTM8009A_Init+0x338>)
 800065c:	2100      	movs	r1, #0
 800065e:	f000 fd8b 	bl	8001178 <otm8009a_write_reg>
 8000662:	4602      	mov	r2, r0
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	4413      	add	r3, r2
 8000668:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	f103 0010 	add.w	r0, r3, #16
 8000670:	2300      	movs	r3, #0
 8000672:	4a85      	ldr	r2, [pc, #532]	; (8000888 <OTM8009A_Init+0x33c>)
 8000674:	21c5      	movs	r1, #197	; 0xc5
 8000676:	f000 fd7f 	bl	8001178 <otm8009a_write_reg>
 800067a:	4602      	mov	r2, r0
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	4413      	add	r3, r2
 8000680:	617b      	str	r3, [r7, #20]
  
  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	f103 0010 	add.w	r0, r3, #16
 8000688:	2300      	movs	r3, #0
 800068a:	4a80      	ldr	r2, [pc, #512]	; (800088c <OTM8009A_Init+0x340>)
 800068c:	2100      	movs	r1, #0
 800068e:	f000 fd73 	bl	8001178 <otm8009a_write_reg>
 8000692:	4602      	mov	r2, r0
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	4413      	add	r3, r2
 8000698:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	f103 0010 	add.w	r0, r3, #16
 80006a0:	2300      	movs	r3, #0
 80006a2:	4a7b      	ldr	r2, [pc, #492]	; (8000890 <OTM8009A_Init+0x344>)
 80006a4:	21c0      	movs	r1, #192	; 0xc0
 80006a6:	f000 fd67 	bl	8001178 <otm8009a_write_reg>
 80006aa:	4602      	mov	r2, r0
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	4413      	add	r3, r2
 80006b0:	617b      	str	r3, [r7, #20]
  
  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	f103 0010 	add.w	r0, r3, #16
 80006b8:	2300      	movs	r3, #0
 80006ba:	4a69      	ldr	r2, [pc, #420]	; (8000860 <OTM8009A_Init+0x314>)
 80006bc:	2100      	movs	r1, #0
 80006be:	f000 fd5b 	bl	8001178 <otm8009a_write_reg>
 80006c2:	4602      	mov	r2, r0
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	4413      	add	r3, r2
 80006c8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	f103 0010 	add.w	r0, r3, #16
 80006d0:	2300      	movs	r3, #0
 80006d2:	4a70      	ldr	r2, [pc, #448]	; (8000894 <OTM8009A_Init+0x348>)
 80006d4:	21d9      	movs	r1, #217	; 0xd9
 80006d6:	f000 fd4f 	bl	8001178 <otm8009a_write_reg>
 80006da:	4602      	mov	r2, r0
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	4413      	add	r3, r2
 80006e0:	617b      	str	r3, [r7, #20]
  
  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f103 0010 	add.w	r0, r3, #16
 80006e8:	2300      	movs	r3, #0
 80006ea:	4a6b      	ldr	r2, [pc, #428]	; (8000898 <OTM8009A_Init+0x34c>)
 80006ec:	2100      	movs	r1, #0
 80006ee:	f000 fd43 	bl	8001178 <otm8009a_write_reg>
 80006f2:	4602      	mov	r2, r0
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	4413      	add	r3, r2
 80006f8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	f103 0010 	add.w	r0, r3, #16
 8000700:	2300      	movs	r3, #0
 8000702:	4a66      	ldr	r2, [pc, #408]	; (800089c <OTM8009A_Init+0x350>)
 8000704:	21c1      	movs	r1, #193	; 0xc1
 8000706:	f000 fd37 	bl	8001178 <otm8009a_write_reg>
 800070a:	4602      	mov	r2, r0
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4413      	add	r3, r2
 8000710:	617b      	str	r3, [r7, #20]
  
  /* Video mode internal */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	f103 0010 	add.w	r0, r3, #16
 8000718:	2300      	movs	r3, #0
 800071a:	4a61      	ldr	r2, [pc, #388]	; (80008a0 <OTM8009A_Init+0x354>)
 800071c:	2100      	movs	r1, #0
 800071e:	f000 fd2b 	bl	8001178 <otm8009a_write_reg>
 8000722:	4602      	mov	r2, r0
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	4413      	add	r3, r2
 8000728:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f103 0010 	add.w	r0, r3, #16
 8000730:	2300      	movs	r3, #0
 8000732:	4a5c      	ldr	r2, [pc, #368]	; (80008a4 <OTM8009A_Init+0x358>)
 8000734:	21c1      	movs	r1, #193	; 0xc1
 8000736:	f000 fd1f 	bl	8001178 <otm8009a_write_reg>
 800073a:	4602      	mov	r2, r0
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	4413      	add	r3, r2
 8000740:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	f103 0010 	add.w	r0, r3, #16
 8000748:	2300      	movs	r3, #0
 800074a:	4a57      	ldr	r2, [pc, #348]	; (80008a8 <OTM8009A_Init+0x35c>)
 800074c:	2100      	movs	r1, #0
 800074e:	f000 fd13 	bl	8001178 <otm8009a_write_reg>
 8000752:	4602      	mov	r2, r0
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	4413      	add	r3, r2
 8000758:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f103 0010 	add.w	r0, r3, #16
 8000760:	2300      	movs	r3, #0
 8000762:	4a52      	ldr	r2, [pc, #328]	; (80008ac <OTM8009A_Init+0x360>)
 8000764:	21c5      	movs	r1, #197	; 0xc5
 8000766:	f000 fd07 	bl	8001178 <otm8009a_write_reg>
 800076a:	4602      	mov	r2, r0
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	4413      	add	r3, r2
 8000770:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	f103 0010 	add.w	r0, r3, #16
 8000778:	2300      	movs	r3, #0
 800077a:	4a4d      	ldr	r2, [pc, #308]	; (80008b0 <OTM8009A_Init+0x364>)
 800077c:	2100      	movs	r1, #0
 800077e:	f000 fcfb 	bl	8001178 <otm8009a_write_reg>
 8000782:	4602      	mov	r2, r0
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	4413      	add	r3, r2
 8000788:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	f103 0010 	add.w	r0, r3, #16
 8000790:	2300      	movs	r3, #0
 8000792:	4a3d      	ldr	r2, [pc, #244]	; (8000888 <OTM8009A_Init+0x33c>)
 8000794:	21c5      	movs	r1, #197	; 0xc5
 8000796:	f000 fcef 	bl	8001178 <otm8009a_write_reg>
 800079a:	4602      	mov	r2, r0
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	4413      	add	r3, r2
 80007a0:	617b      	str	r3, [r7, #20]
  
  /* GVDD/NGVDD settings */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	f103 0010 	add.w	r0, r3, #16
 80007a8:	2300      	movs	r3, #0
 80007aa:	4a2d      	ldr	r2, [pc, #180]	; (8000860 <OTM8009A_Init+0x314>)
 80007ac:	2100      	movs	r1, #0
 80007ae:	f000 fce3 	bl	8001178 <otm8009a_write_reg>
 80007b2:	4602      	mov	r2, r0
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	4413      	add	r3, r2
 80007b8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	f103 0010 	add.w	r0, r3, #16
 80007c0:	2302      	movs	r3, #2
 80007c2:	4a3c      	ldr	r2, [pc, #240]	; (80008b4 <OTM8009A_Init+0x368>)
 80007c4:	21d8      	movs	r1, #216	; 0xd8
 80007c6:	f000 fcd7 	bl	8001178 <otm8009a_write_reg>
 80007ca:	4602      	mov	r2, r0
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	4413      	add	r3, r2
 80007d0:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	f103 0010 	add.w	r0, r3, #16
 80007d8:	2300      	movs	r3, #0
 80007da:	4a37      	ldr	r2, [pc, #220]	; (80008b8 <OTM8009A_Init+0x36c>)
 80007dc:	2100      	movs	r1, #0
 80007de:	f000 fccb 	bl	8001178 <otm8009a_write_reg>
 80007e2:	4602      	mov	r2, r0
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	4413      	add	r3, r2
 80007e8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	f103 0010 	add.w	r0, r3, #16
 80007f0:	2300      	movs	r3, #0
 80007f2:	4a32      	ldr	r2, [pc, #200]	; (80008bc <OTM8009A_Init+0x370>)
 80007f4:	21c5      	movs	r1, #197	; 0xc5
 80007f6:	f000 fcbf 	bl	8001178 <otm8009a_write_reg>
 80007fa:	4602      	mov	r2, r0
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	4413      	add	r3, r2
 8000800:	617b      	str	r3, [r7, #20]
  
  /* Panel display timing Setting 3 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	f103 0010 	add.w	r0, r3, #16
 8000808:	2300      	movs	r3, #0
 800080a:	4a2d      	ldr	r2, [pc, #180]	; (80008c0 <OTM8009A_Init+0x374>)
 800080c:	2100      	movs	r1, #0
 800080e:	f000 fcb3 	bl	8001178 <otm8009a_write_reg>
 8000812:	4602      	mov	r2, r0
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	4413      	add	r3, r2
 8000818:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f103 0010 	add.w	r0, r3, #16
 8000820:	2300      	movs	r3, #0
 8000822:	4a28      	ldr	r2, [pc, #160]	; (80008c4 <OTM8009A_Init+0x378>)
 8000824:	21c0      	movs	r1, #192	; 0xc0
 8000826:	f000 fca7 	bl	8001178 <otm8009a_write_reg>
 800082a:	4602      	mov	r2, r0
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	4413      	add	r3, r2
 8000830:	617b      	str	r3, [r7, #20]
  
  /* Power control 1 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f103 0010 	add.w	r0, r3, #16
 8000838:	2300      	movs	r3, #0
 800083a:	4a23      	ldr	r2, [pc, #140]	; (80008c8 <OTM8009A_Init+0x37c>)
 800083c:	2100      	movs	r1, #0
 800083e:	f000 fc9b 	bl	8001178 <otm8009a_write_reg>
 8000842:	4602      	mov	r2, r0
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	4413      	add	r3, r2
 8000848:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	f103 0010 	add.w	r0, r3, #16
 8000850:	2300      	movs	r3, #0
 8000852:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <OTM8009A_Init+0x380>)
 8000854:	21c5      	movs	r1, #197	; 0xc5
 8000856:	f000 fc8f 	bl	8001178 <otm8009a_write_reg>
 800085a:	4602      	mov	r2, r0
 800085c:	e038      	b.n	80008d0 <OTM8009A_Init+0x384>
 800085e:	bf00      	nop
 8000860:	080081b1 	.word	0x080081b1
 8000864:	080081e4 	.word	0x080081e4
 8000868:	080081b2 	.word	0x080081b2
 800086c:	080081e8 	.word	0x080081e8
 8000870:	080081b3 	.word	0x080081b3
 8000874:	080081b4 	.word	0x080081b4
 8000878:	080081b5 	.word	0x080081b5
 800087c:	080081b6 	.word	0x080081b6
 8000880:	080081b7 	.word	0x080081b7
 8000884:	080081b8 	.word	0x080081b8
 8000888:	080081b9 	.word	0x080081b9
 800088c:	080081ba 	.word	0x080081ba
 8000890:	080081bb 	.word	0x080081bb
 8000894:	080081bc 	.word	0x080081bc
 8000898:	080081bd 	.word	0x080081bd
 800089c:	080081be 	.word	0x080081be
 80008a0:	080081bf 	.word	0x080081bf
 80008a4:	080081c0 	.word	0x080081c0
 80008a8:	080081c1 	.word	0x080081c1
 80008ac:	080081c2 	.word	0x080081c2
 80008b0:	080081c3 	.word	0x080081c3
 80008b4:	080081ec 	.word	0x080081ec
 80008b8:	080081c4 	.word	0x080081c4
 80008bc:	080081c5 	.word	0x080081c5
 80008c0:	080081c6 	.word	0x080081c6
 80008c4:	080081c7 	.word	0x080081c7
 80008c8:	080081c8 	.word	0x080081c8
 80008cc:	080081c9 	.word	0x080081c9
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	4413      	add	r3, r2
 80008d4:	617b      	str	r3, [r7, #20]
  
  /* Source driver precharge */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	f103 0010 	add.w	r0, r3, #16
 80008dc:	2300      	movs	r3, #0
 80008de:	4abe      	ldr	r2, [pc, #760]	; (8000bd8 <OTM8009A_Init+0x68c>)
 80008e0:	2100      	movs	r1, #0
 80008e2:	f000 fc49 	bl	8001178 <otm8009a_write_reg>
 80008e6:	4602      	mov	r2, r0
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	4413      	add	r3, r2
 80008ec:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	f103 0010 	add.w	r0, r3, #16
 80008f4:	2300      	movs	r3, #0
 80008f6:	4ab9      	ldr	r2, [pc, #740]	; (8000bdc <OTM8009A_Init+0x690>)
 80008f8:	21c4      	movs	r1, #196	; 0xc4
 80008fa:	f000 fc3d 	bl	8001178 <otm8009a_write_reg>
 80008fe:	4602      	mov	r2, r0
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	4413      	add	r3, r2
 8000904:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f103 0010 	add.w	r0, r3, #16
 800090c:	2300      	movs	r3, #0
 800090e:	4ab4      	ldr	r2, [pc, #720]	; (8000be0 <OTM8009A_Init+0x694>)
 8000910:	2100      	movs	r1, #0
 8000912:	f000 fc31 	bl	8001178 <otm8009a_write_reg>
 8000916:	4602      	mov	r2, r0
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	4413      	add	r3, r2
 800091c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	f103 0010 	add.w	r0, r3, #16
 8000924:	2300      	movs	r3, #0
 8000926:	4aaf      	ldr	r2, [pc, #700]	; (8000be4 <OTM8009A_Init+0x698>)
 8000928:	21c1      	movs	r1, #193	; 0xc1
 800092a:	f000 fc25 	bl	8001178 <otm8009a_write_reg>
 800092e:	4602      	mov	r2, r0
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	4413      	add	r3, r2
 8000934:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f103 0010 	add.w	r0, r3, #16
 800093c:	2300      	movs	r3, #0
 800093e:	4aaa      	ldr	r2, [pc, #680]	; (8000be8 <OTM8009A_Init+0x69c>)
 8000940:	2100      	movs	r1, #0
 8000942:	f000 fc19 	bl	8001178 <otm8009a_write_reg>
 8000946:	4602      	mov	r2, r0
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	4413      	add	r3, r2
 800094c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f103 0010 	add.w	r0, r3, #16
 8000954:	2302      	movs	r3, #2
 8000956:	4aa5      	ldr	r2, [pc, #660]	; (8000bec <OTM8009A_Init+0x6a0>)
 8000958:	21b3      	movs	r1, #179	; 0xb3
 800095a:	f000 fc0d 	bl	8001178 <otm8009a_write_reg>
 800095e:	4602      	mov	r2, r0
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	4413      	add	r3, r2
 8000964:	617b      	str	r3, [r7, #20]
  
  /* GOAVST */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	f103 0010 	add.w	r0, r3, #16
 800096c:	2300      	movs	r3, #0
 800096e:	4aa0      	ldr	r2, [pc, #640]	; (8000bf0 <OTM8009A_Init+0x6a4>)
 8000970:	2100      	movs	r1, #0
 8000972:	f000 fc01 	bl	8001178 <otm8009a_write_reg>
 8000976:	4602      	mov	r2, r0
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	4413      	add	r3, r2
 800097c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f103 0010 	add.w	r0, r3, #16
 8000984:	2306      	movs	r3, #6
 8000986:	4a9b      	ldr	r2, [pc, #620]	; (8000bf4 <OTM8009A_Init+0x6a8>)
 8000988:	21ce      	movs	r1, #206	; 0xce
 800098a:	f000 fbf5 	bl	8001178 <otm8009a_write_reg>
 800098e:	4602      	mov	r2, r0
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	4413      	add	r3, r2
 8000994:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f103 0010 	add.w	r0, r3, #16
 800099c:	2300      	movs	r3, #0
 800099e:	4a96      	ldr	r2, [pc, #600]	; (8000bf8 <OTM8009A_Init+0x6ac>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	f000 fbe9 	bl	8001178 <otm8009a_write_reg>
 80009a6:	4602      	mov	r2, r0
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	4413      	add	r3, r2
 80009ac:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	f103 0010 	add.w	r0, r3, #16
 80009b4:	230e      	movs	r3, #14
 80009b6:	4a91      	ldr	r2, [pc, #580]	; (8000bfc <OTM8009A_Init+0x6b0>)
 80009b8:	21ce      	movs	r1, #206	; 0xce
 80009ba:	f000 fbdd 	bl	8001178 <otm8009a_write_reg>
 80009be:	4602      	mov	r2, r0
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	4413      	add	r3, r2
 80009c4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	f103 0010 	add.w	r0, r3, #16
 80009cc:	2300      	movs	r3, #0
 80009ce:	4a8c      	ldr	r2, [pc, #560]	; (8000c00 <OTM8009A_Init+0x6b4>)
 80009d0:	2100      	movs	r1, #0
 80009d2:	f000 fbd1 	bl	8001178 <otm8009a_write_reg>
 80009d6:	4602      	mov	r2, r0
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	4413      	add	r3, r2
 80009dc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f103 0010 	add.w	r0, r3, #16
 80009e4:	230e      	movs	r3, #14
 80009e6:	4a87      	ldr	r2, [pc, #540]	; (8000c04 <OTM8009A_Init+0x6b8>)
 80009e8:	21ce      	movs	r1, #206	; 0xce
 80009ea:	f000 fbc5 	bl	8001178 <otm8009a_write_reg>
 80009ee:	4602      	mov	r2, r0
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	4413      	add	r3, r2
 80009f4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	f103 0010 	add.w	r0, r3, #16
 80009fc:	2300      	movs	r3, #0
 80009fe:	4a82      	ldr	r2, [pc, #520]	; (8000c08 <OTM8009A_Init+0x6bc>)
 8000a00:	2100      	movs	r1, #0
 8000a02:	f000 fbb9 	bl	8001178 <otm8009a_write_reg>
 8000a06:	4602      	mov	r2, r0
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	f103 0010 	add.w	r0, r3, #16
 8000a14:	230a      	movs	r3, #10
 8000a16:	4a7d      	ldr	r2, [pc, #500]	; (8000c0c <OTM8009A_Init+0x6c0>)
 8000a18:	21cf      	movs	r1, #207	; 0xcf
 8000a1a:	f000 fbad 	bl	8001178 <otm8009a_write_reg>
 8000a1e:	4602      	mov	r2, r0
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	4413      	add	r3, r2
 8000a24:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f103 0010 	add.w	r0, r3, #16
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	4a78      	ldr	r2, [pc, #480]	; (8000c10 <OTM8009A_Init+0x6c4>)
 8000a30:	2100      	movs	r1, #0
 8000a32:	f000 fba1 	bl	8001178 <otm8009a_write_reg>
 8000a36:	4602      	mov	r2, r0
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f103 0010 	add.w	r0, r3, #16
 8000a44:	2300      	movs	r3, #0
 8000a46:	4a73      	ldr	r2, [pc, #460]	; (8000c14 <OTM8009A_Init+0x6c8>)
 8000a48:	21cf      	movs	r1, #207	; 0xcf
 8000a4a:	f000 fb95 	bl	8001178 <otm8009a_write_reg>
 8000a4e:	4602      	mov	r2, r0
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	4413      	add	r3, r2
 8000a54:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f103 0010 	add.w	r0, r3, #16
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	4a64      	ldr	r2, [pc, #400]	; (8000bf0 <OTM8009A_Init+0x6a4>)
 8000a60:	2100      	movs	r1, #0
 8000a62:	f000 fb89 	bl	8001178 <otm8009a_write_reg>
 8000a66:	4602      	mov	r2, r0
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	f103 0010 	add.w	r0, r3, #16
 8000a74:	230a      	movs	r3, #10
 8000a76:	4a68      	ldr	r2, [pc, #416]	; (8000c18 <OTM8009A_Init+0x6cc>)
 8000a78:	21cb      	movs	r1, #203	; 0xcb
 8000a7a:	f000 fb7d 	bl	8001178 <otm8009a_write_reg>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	4413      	add	r3, r2
 8000a84:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f103 0010 	add.w	r0, r3, #16
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	4a63      	ldr	r2, [pc, #396]	; (8000c1c <OTM8009A_Init+0x6d0>)
 8000a90:	2100      	movs	r1, #0
 8000a92:	f000 fb71 	bl	8001178 <otm8009a_write_reg>
 8000a96:	4602      	mov	r2, r0
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f103 0010 	add.w	r0, r3, #16
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	4a5e      	ldr	r2, [pc, #376]	; (8000c20 <OTM8009A_Init+0x6d4>)
 8000aa8:	21cb      	movs	r1, #203	; 0xcb
 8000aaa:	f000 fb65 	bl	8001178 <otm8009a_write_reg>
 8000aae:	4602      	mov	r2, r0
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	f103 0010 	add.w	r0, r3, #16
 8000abc:	2300      	movs	r3, #0
 8000abe:	4a4e      	ldr	r2, [pc, #312]	; (8000bf8 <OTM8009A_Init+0x6ac>)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	f000 fb59 	bl	8001178 <otm8009a_write_reg>
 8000ac6:	4602      	mov	r2, r0
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	4413      	add	r3, r2
 8000acc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	f103 0010 	add.w	r0, r3, #16
 8000ad4:	230f      	movs	r3, #15
 8000ad6:	4a53      	ldr	r2, [pc, #332]	; (8000c24 <OTM8009A_Init+0x6d8>)
 8000ad8:	21cb      	movs	r1, #203	; 0xcb
 8000ada:	f000 fb4d 	bl	8001178 <otm8009a_write_reg>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f103 0010 	add.w	r0, r3, #16
 8000aec:	2300      	movs	r3, #0
 8000aee:	4a44      	ldr	r2, [pc, #272]	; (8000c00 <OTM8009A_Init+0x6b4>)
 8000af0:	2100      	movs	r1, #0
 8000af2:	f000 fb41 	bl	8001178 <otm8009a_write_reg>
 8000af6:	4602      	mov	r2, r0
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	4413      	add	r3, r2
 8000afc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	f103 0010 	add.w	r0, r3, #16
 8000b04:	230a      	movs	r3, #10
 8000b06:	4a48      	ldr	r2, [pc, #288]	; (8000c28 <OTM8009A_Init+0x6dc>)
 8000b08:	21cb      	movs	r1, #203	; 0xcb
 8000b0a:	f000 fb35 	bl	8001178 <otm8009a_write_reg>
 8000b0e:	4602      	mov	r2, r0
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	4413      	add	r3, r2
 8000b14:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f103 0010 	add.w	r0, r3, #16
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	4a3a      	ldr	r2, [pc, #232]	; (8000c08 <OTM8009A_Init+0x6bc>)
 8000b20:	2100      	movs	r1, #0
 8000b22:	f000 fb29 	bl	8001178 <otm8009a_write_reg>
 8000b26:	4602      	mov	r2, r0
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f103 0010 	add.w	r0, r3, #16
 8000b34:	230f      	movs	r3, #15
 8000b36:	4a3d      	ldr	r2, [pc, #244]	; (8000c2c <OTM8009A_Init+0x6e0>)
 8000b38:	21cb      	movs	r1, #203	; 0xcb
 8000b3a:	f000 fb1d 	bl	8001178 <otm8009a_write_reg>
 8000b3e:	4602      	mov	r2, r0
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	4413      	add	r3, r2
 8000b44:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f103 0010 	add.w	r0, r3, #16
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	4a30      	ldr	r2, [pc, #192]	; (8000c10 <OTM8009A_Init+0x6c4>)
 8000b50:	2100      	movs	r1, #0
 8000b52:	f000 fb11 	bl	8001178 <otm8009a_write_reg>
 8000b56:	4602      	mov	r2, r0
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f103 0010 	add.w	r0, r3, #16
 8000b64:	230f      	movs	r3, #15
 8000b66:	4a32      	ldr	r2, [pc, #200]	; (8000c30 <OTM8009A_Init+0x6e4>)
 8000b68:	21cb      	movs	r1, #203	; 0xcb
 8000b6a:	f000 fb05 	bl	8001178 <otm8009a_write_reg>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	4413      	add	r3, r2
 8000b74:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f103 0010 	add.w	r0, r3, #16
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	4a2d      	ldr	r2, [pc, #180]	; (8000c34 <OTM8009A_Init+0x6e8>)
 8000b80:	2100      	movs	r1, #0
 8000b82:	f000 faf9 	bl	8001178 <otm8009a_write_reg>
 8000b86:	4602      	mov	r2, r0
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	f103 0010 	add.w	r0, r3, #16
 8000b94:	230a      	movs	r3, #10
 8000b96:	4a28      	ldr	r2, [pc, #160]	; (8000c38 <OTM8009A_Init+0x6ec>)
 8000b98:	21cb      	movs	r1, #203	; 0xcb
 8000b9a:	f000 faed 	bl	8001178 <otm8009a_write_reg>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f103 0010 	add.w	r0, r3, #16
 8000bac:	2300      	movs	r3, #0
 8000bae:	4a23      	ldr	r2, [pc, #140]	; (8000c3c <OTM8009A_Init+0x6f0>)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	f000 fae1 	bl	8001178 <otm8009a_write_reg>
 8000bb6:	4602      	mov	r2, r0
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	4413      	add	r3, r2
 8000bbc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f103 0010 	add.w	r0, r3, #16
 8000bc4:	230a      	movs	r3, #10
 8000bc6:	4a1e      	ldr	r2, [pc, #120]	; (8000c40 <OTM8009A_Init+0x6f4>)
 8000bc8:	21cb      	movs	r1, #203	; 0xcb
 8000bca:	f000 fad5 	bl	8001178 <otm8009a_write_reg>
 8000bce:	4602      	mov	r2, r0
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	617b      	str	r3, [r7, #20]
 8000bd6:	e035      	b.n	8000c44 <OTM8009A_Init+0x6f8>
 8000bd8:	080081bd 	.word	0x080081bd
 8000bdc:	080081ca 	.word	0x080081ca
 8000be0:	080081bf 	.word	0x080081bf
 8000be4:	080081cb 	.word	0x080081cb
 8000be8:	080081cc 	.word	0x080081cc
 8000bec:	080081f0 	.word	0x080081f0
 8000bf0:	080081b2 	.word	0x080081b2
 8000bf4:	080081f4 	.word	0x080081f4
 8000bf8:	080081cd 	.word	0x080081cd
 8000bfc:	080081fc 	.word	0x080081fc
 8000c00:	080081ce 	.word	0x080081ce
 8000c04:	0800820c 	.word	0x0800820c
 8000c08:	080081cf 	.word	0x080081cf
 8000c0c:	0800821c 	.word	0x0800821c
 8000c10:	080081d0 	.word	0x080081d0
 8000c14:	080081dd 	.word	0x080081dd
 8000c18:	08008228 	.word	0x08008228
 8000c1c:	080081d1 	.word	0x080081d1
 8000c20:	08008234 	.word	0x08008234
 8000c24:	08008244 	.word	0x08008244
 8000c28:	08008254 	.word	0x08008254
 8000c2c:	08008260 	.word	0x08008260
 8000c30:	08008270 	.word	0x08008270
 8000c34:	080081d2 	.word	0x080081d2
 8000c38:	08008280 	.word	0x08008280
 8000c3c:	080081d3 	.word	0x080081d3
 8000c40:	0800828c 	.word	0x0800828c
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	f103 0010 	add.w	r0, r3, #16
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	4aae      	ldr	r2, [pc, #696]	; (8000f08 <OTM8009A_Init+0x9bc>)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f000 fa92 	bl	8001178 <otm8009a_write_reg>
 8000c54:	4602      	mov	r2, r0
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	4413      	add	r3, r2
 8000c5a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f103 0010 	add.w	r0, r3, #16
 8000c62:	230a      	movs	r3, #10
 8000c64:	4aa9      	ldr	r2, [pc, #676]	; (8000f0c <OTM8009A_Init+0x9c0>)
 8000c66:	21cc      	movs	r1, #204	; 0xcc
 8000c68:	f000 fa86 	bl	8001178 <otm8009a_write_reg>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	4413      	add	r3, r2
 8000c72:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f103 0010 	add.w	r0, r3, #16
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	4aa4      	ldr	r2, [pc, #656]	; (8000f10 <OTM8009A_Init+0x9c4>)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	f000 fa7a 	bl	8001178 <otm8009a_write_reg>
 8000c84:	4602      	mov	r2, r0
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	4413      	add	r3, r2
 8000c8a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f103 0010 	add.w	r0, r3, #16
 8000c92:	230f      	movs	r3, #15
 8000c94:	4a9f      	ldr	r2, [pc, #636]	; (8000f14 <OTM8009A_Init+0x9c8>)
 8000c96:	21cc      	movs	r1, #204	; 0xcc
 8000c98:	f000 fa6e 	bl	8001178 <otm8009a_write_reg>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f103 0010 	add.w	r0, r3, #16
 8000caa:	2300      	movs	r3, #0
 8000cac:	4a9a      	ldr	r2, [pc, #616]	; (8000f18 <OTM8009A_Init+0x9cc>)
 8000cae:	2100      	movs	r1, #0
 8000cb0:	f000 fa62 	bl	8001178 <otm8009a_write_reg>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	4413      	add	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f103 0010 	add.w	r0, r3, #16
 8000cc2:	230f      	movs	r3, #15
 8000cc4:	4a95      	ldr	r2, [pc, #596]	; (8000f1c <OTM8009A_Init+0x9d0>)
 8000cc6:	21cc      	movs	r1, #204	; 0xcc
 8000cc8:	f000 fa56 	bl	8001178 <otm8009a_write_reg>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f103 0010 	add.w	r0, r3, #16
 8000cda:	2300      	movs	r3, #0
 8000cdc:	4a90      	ldr	r2, [pc, #576]	; (8000f20 <OTM8009A_Init+0x9d4>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	f000 fa4a 	bl	8001178 <otm8009a_write_reg>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	4413      	add	r3, r2
 8000cea:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f103 0010 	add.w	r0, r3, #16
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	4a8b      	ldr	r2, [pc, #556]	; (8000f24 <OTM8009A_Init+0x9d8>)
 8000cf6:	21cc      	movs	r1, #204	; 0xcc
 8000cf8:	f000 fa3e 	bl	8001178 <otm8009a_write_reg>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	4413      	add	r3, r2
 8000d02:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f103 0010 	add.w	r0, r3, #16
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	4a86      	ldr	r2, [pc, #536]	; (8000f28 <OTM8009A_Init+0x9dc>)
 8000d0e:	2100      	movs	r1, #0
 8000d10:	f000 fa32 	bl	8001178 <otm8009a_write_reg>
 8000d14:	4602      	mov	r2, r0
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	4413      	add	r3, r2
 8000d1a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	f103 0010 	add.w	r0, r3, #16
 8000d22:	230f      	movs	r3, #15
 8000d24:	4a81      	ldr	r2, [pc, #516]	; (8000f2c <OTM8009A_Init+0x9e0>)
 8000d26:	21cc      	movs	r1, #204	; 0xcc
 8000d28:	f000 fa26 	bl	8001178 <otm8009a_write_reg>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	4413      	add	r3, r2
 8000d32:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f103 0010 	add.w	r0, r3, #16
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	4a7c      	ldr	r2, [pc, #496]	; (8000f30 <OTM8009A_Init+0x9e4>)
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f000 fa1a 	bl	8001178 <otm8009a_write_reg>
 8000d44:	4602      	mov	r2, r0
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	4413      	add	r3, r2
 8000d4a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f103 0010 	add.w	r0, r3, #16
 8000d52:	230f      	movs	r3, #15
 8000d54:	4a77      	ldr	r2, [pc, #476]	; (8000f34 <OTM8009A_Init+0x9e8>)
 8000d56:	21cc      	movs	r1, #204	; 0xcc
 8000d58:	f000 fa0e 	bl	8001178 <otm8009a_write_reg>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	4413      	add	r3, r2
 8000d62:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f103 0010 	add.w	r0, r3, #16
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	4a72      	ldr	r2, [pc, #456]	; (8000f38 <OTM8009A_Init+0x9ec>)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f000 fa02 	bl	8001178 <otm8009a_write_reg>
 8000d74:	4602      	mov	r2, r0
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	4413      	add	r3, r2
 8000d7a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	f103 0010 	add.w	r0, r3, #16
 8000d82:	2300      	movs	r3, #0
 8000d84:	4a6d      	ldr	r2, [pc, #436]	; (8000f3c <OTM8009A_Init+0x9f0>)
 8000d86:	21c5      	movs	r1, #197	; 0xc5
 8000d88:	f000 f9f6 	bl	8001178 <otm8009a_write_reg>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	4413      	add	r3, r2
 8000d92:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f103 0010 	add.w	r0, r3, #16
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	4a68      	ldr	r2, [pc, #416]	; (8000f40 <OTM8009A_Init+0x9f4>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f000 f9ea 	bl	8001178 <otm8009a_write_reg>
 8000da4:	4602      	mov	r2, r0
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	4413      	add	r3, r2
 8000daa:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f103 0010 	add.w	r0, r3, #16
 8000db2:	2300      	movs	r3, #0
 8000db4:	4a63      	ldr	r2, [pc, #396]	; (8000f44 <OTM8009A_Init+0x9f8>)
 8000db6:	21f5      	movs	r1, #245	; 0xf5
 8000db8:	f000 f9de 	bl	8001178 <otm8009a_write_reg>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	617b      	str	r3, [r7, #20]
  /////////////////////////////////////////////////////////////////////////////
  
  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f103 0010 	add.w	r0, r3, #16
 8000dca:	2300      	movs	r3, #0
 8000dcc:	4a5e      	ldr	r2, [pc, #376]	; (8000f48 <OTM8009A_Init+0x9fc>)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	f000 f9d2 	bl	8001178 <otm8009a_write_reg>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	4413      	add	r3, r2
 8000dda:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f103 0010 	add.w	r0, r3, #16
 8000de2:	2300      	movs	r3, #0
 8000de4:	4a59      	ldr	r2, [pc, #356]	; (8000f4c <OTM8009A_Init+0xa00>)
 8000de6:	21c6      	movs	r1, #198	; 0xc6
 8000de8:	f000 f9c6 	bl	8001178 <otm8009a_write_reg>
 8000dec:	4602      	mov	r2, r0
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	4413      	add	r3, r2
 8000df2:	617b      	str	r3, [r7, #20]
  
  /* Exit CMD2 mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f103 0010 	add.w	r0, r3, #16
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	4a54      	ldr	r2, [pc, #336]	; (8000f50 <OTM8009A_Init+0xa04>)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f000 f9ba 	bl	8001178 <otm8009a_write_reg>
 8000e04:	4602      	mov	r2, r0
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	4413      	add	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f103 0010 	add.w	r0, r3, #16
 8000e12:	2303      	movs	r3, #3
 8000e14:	4a4f      	ldr	r2, [pc, #316]	; (8000f54 <OTM8009A_Init+0xa08>)
 8000e16:	21ff      	movs	r1, #255	; 0xff
 8000e18:	f000 f9ae 	bl	8001178 <otm8009a_write_reg>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	4413      	add	r3, r2
 8000e22:	617b      	str	r3, [r7, #20]
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */
  
  /* NOP - goes back to DCS std command ? */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	f103 0010 	add.w	r0, r3, #16
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	4a48      	ldr	r2, [pc, #288]	; (8000f50 <OTM8009A_Init+0xa04>)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	f000 f9a2 	bl	8001178 <otm8009a_write_reg>
 8000e34:	4602      	mov	r2, r0
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	4413      	add	r3, r2
 8000e3a:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2+ table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f103 0010 	add.w	r0, r3, #16
 8000e42:	2300      	movs	r3, #0
 8000e44:	4a42      	ldr	r2, [pc, #264]	; (8000f50 <OTM8009A_Init+0xa04>)
 8000e46:	2100      	movs	r1, #0
 8000e48:	f000 f996 	bl	8001178 <otm8009a_write_reg>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	4413      	add	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f103 0010 	add.w	r0, r3, #16
 8000e5a:	2310      	movs	r3, #16
 8000e5c:	4a3e      	ldr	r2, [pc, #248]	; (8000f58 <OTM8009A_Init+0xa0c>)
 8000e5e:	21e1      	movs	r1, #225	; 0xe1
 8000e60:	f000 f98a 	bl	8001178 <otm8009a_write_reg>
 8000e64:	4602      	mov	r2, r0
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	4413      	add	r3, r2
 8000e6a:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2- table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f103 0010 	add.w	r0, r3, #16
 8000e72:	2300      	movs	r3, #0
 8000e74:	4a36      	ldr	r2, [pc, #216]	; (8000f50 <OTM8009A_Init+0xa04>)
 8000e76:	2100      	movs	r1, #0
 8000e78:	f000 f97e 	bl	8001178 <otm8009a_write_reg>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	4413      	add	r3, r2
 8000e82:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f103 0010 	add.w	r0, r3, #16
 8000e8a:	2310      	movs	r3, #16
 8000e8c:	4a33      	ldr	r2, [pc, #204]	; (8000f5c <OTM8009A_Init+0xa10>)
 8000e8e:	21e2      	movs	r1, #226	; 0xe2
 8000e90:	f000 f972 	bl	8001178 <otm8009a_write_reg>
 8000e94:	4602      	mov	r2, r0
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	4413      	add	r3, r2
 8000e9a:	617b      	str	r3, [r7, #20]
  
  /* Send Sleep Out command to display : no parameter */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f103 0010 	add.w	r0, r3, #16
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	4a2e      	ldr	r2, [pc, #184]	; (8000f60 <OTM8009A_Init+0xa14>)
 8000ea6:	2111      	movs	r1, #17
 8000ea8:	f000 f966 	bl	8001178 <otm8009a_write_reg>
 8000eac:	4602      	mov	r2, r0
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	617b      	str	r3, [r7, #20]
  
  /* Wait for sleep out exit */
  (void)OTM8009A_IO_Delay(pObj, 120);
 8000eb4:	2178      	movs	r1, #120	; 0x78
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f000 f944 	bl	8001144 <OTM8009A_IO_Delay>
  
  switch(ColorCoding)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d012      	beq.n	8000ee8 <OTM8009A_Init+0x99c>
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d153      	bne.n	8000f70 <OTM8009A_Init+0xa24>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f103 0010 	add.w	r0, r3, #16
 8000ece:	2300      	movs	r3, #0
 8000ed0:	4a24      	ldr	r2, [pc, #144]	; (8000f64 <OTM8009A_Init+0xa18>)
 8000ed2:	213a      	movs	r1, #58	; 0x3a
 8000ed4:	f000 f950 	bl	8001178 <otm8009a_write_reg>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	4413      	add	r3, r2
 8000ede:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <OTM8009A_Init+0xa1c>)
 8000ee2:	2202      	movs	r2, #2
 8000ee4:	605a      	str	r2, [r3, #4]
    break;
 8000ee6:	e044      	b.n	8000f72 <OTM8009A_Init+0xa26>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f103 0010 	add.w	r0, r3, #16
 8000eee:	2300      	movs	r3, #0
 8000ef0:	4a1e      	ldr	r2, [pc, #120]	; (8000f6c <OTM8009A_Init+0xa20>)
 8000ef2:	213a      	movs	r1, #58	; 0x3a
 8000ef4:	f000 f940 	bl	8001178 <otm8009a_write_reg>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	4413      	add	r3, r2
 8000efe:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <OTM8009A_Init+0xa1c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	605a      	str	r2, [r3, #4]
    break;
 8000f06:	e034      	b.n	8000f72 <OTM8009A_Init+0xa26>
 8000f08:	080081b2 	.word	0x080081b2
 8000f0c:	08008298 	.word	0x08008298
 8000f10:	080081d1 	.word	0x080081d1
 8000f14:	080082a4 	.word	0x080082a4
 8000f18:	080081cd 	.word	0x080081cd
 8000f1c:	080082b4 	.word	0x080082b4
 8000f20:	080081ce 	.word	0x080081ce
 8000f24:	080082c4 	.word	0x080082c4
 8000f28:	080081cf 	.word	0x080081cf
 8000f2c:	080082d0 	.word	0x080082d0
 8000f30:	080081d0 	.word	0x080081d0
 8000f34:	080082e0 	.word	0x080082e0
 8000f38:	080081bd 	.word	0x080081bd
 8000f3c:	080081de 	.word	0x080081de
 8000f40:	080081df 	.word	0x080081df
 8000f44:	080081e0 	.word	0x080081e0
 8000f48:	080081e1 	.word	0x080081e1
 8000f4c:	080081e2 	.word	0x080081e2
 8000f50:	080081b1 	.word	0x080081b1
 8000f54:	080082f0 	.word	0x080082f0
 8000f58:	080082f4 	.word	0x080082f4
 8000f5c:	08008304 	.word	0x08008304
 8000f60:	080081d4 	.word	0x080081d4
 8000f64:	080081d5 	.word	0x080081d5
 8000f68:	2000006c 	.word	0x2000006c
 8000f6c:	080081d6 	.word	0x080081d6
  default :
    break;
 8000f70:	bf00      	nop
  }
  
  /* Send command to configure display in landscape orientation mode. By default
  the orientation mode is portrait  */
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d12a      	bne.n	8000fce <OTM8009A_Init+0xa82>
  {
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8000f78:	2360      	movs	r3, #96	; 0x60
 8000f7a:	74fb      	strb	r3, [r7, #19]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	f103 0010 	add.w	r0, r3, #16
 8000f82:	f107 0213 	add.w	r2, r7, #19
 8000f86:	2300      	movs	r3, #0
 8000f88:	2136      	movs	r1, #54	; 0x36
 8000f8a:	f000 f8f5 	bl	8001178 <otm8009a_write_reg>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	4413      	add	r3, r2
 8000f94:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f103 0010 	add.w	r0, r3, #16
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	4a44      	ldr	r2, [pc, #272]	; (80010b0 <OTM8009A_Init+0xb64>)
 8000fa0:	212a      	movs	r1, #42	; 0x2a
 8000fa2:	f000 f8e9 	bl	8001178 <otm8009a_write_reg>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	4413      	add	r3, r2
 8000fac:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f103 0010 	add.w	r0, r3, #16
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	4a3f      	ldr	r2, [pc, #252]	; (80010b4 <OTM8009A_Init+0xb68>)
 8000fb8:	212b      	movs	r1, #43	; 0x2b
 8000fba:	f000 f8dd 	bl	8001178 <otm8009a_write_reg>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	617b      	str	r3, [r7, #20]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8000fc6:	4b3c      	ldr	r3, [pc, #240]	; (80010b8 <OTM8009A_Init+0xb6c>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	e002      	b.n	8000fd4 <OTM8009A_Init+0xa88>
  }
  else
  {
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8000fce:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <OTM8009A_Init+0xb6c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
  }
  
  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness], 0xFF is highest Brightness, try 0x7F : intermediate value */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f103 0010 	add.w	r0, r3, #16
 8000fda:	2300      	movs	r3, #0
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <OTM8009A_Init+0xb70>)
 8000fde:	2151      	movs	r1, #81	; 0x51
 8000fe0:	f000 f8ca 	bl	8001178 <otm8009a_write_reg>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	4413      	add	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]
  /* Store default brightness */
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8000fec:	4b34      	ldr	r3, [pc, #208]	; (80010c0 <OTM8009A_Init+0xb74>)
 8000fee:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8000ff2:	4a34      	ldr	r2, [pc, #208]	; (80010c4 <OTM8009A_Init+0xb78>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	09db      	lsrs	r3, r3, #7
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	fb02 f303 	mul.w	r3, r2, r3
 8001004:	4a2c      	ldr	r2, [pc, #176]	; (80010b8 <OTM8009A_Init+0xb6c>)
 8001006:	6093      	str	r3, [r2, #8]
  
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f103 0010 	add.w	r0, r3, #16
 800100e:	2300      	movs	r3, #0
 8001010:	4a2d      	ldr	r2, [pc, #180]	; (80010c8 <OTM8009A_Init+0xb7c>)
 8001012:	2153      	movs	r1, #83	; 0x53
 8001014:	f000 f8b0 	bl	8001178 <otm8009a_write_reg>
 8001018:	4602      	mov	r2, r0
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	4413      	add	r3, r2
 800101e:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f103 0010 	add.w	r0, r3, #16
 8001026:	2300      	movs	r3, #0
 8001028:	4a28      	ldr	r2, [pc, #160]	; (80010cc <OTM8009A_Init+0xb80>)
 800102a:	2155      	movs	r1, #85	; 0x55
 800102c:	f000 f8a4 	bl	8001178 <otm8009a_write_reg>
 8001030:	4602      	mov	r2, r0
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	4413      	add	r3, r2
 8001036:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0 (lowest Brightness], 0xFF is highest Brightness */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f103 0010 	add.w	r0, r3, #16
 800103e:	2300      	movs	r3, #0
 8001040:	4a23      	ldr	r2, [pc, #140]	; (80010d0 <OTM8009A_Init+0xb84>)
 8001042:	215e      	movs	r1, #94	; 0x5e
 8001044:	f000 f898 	bl	8001178 <otm8009a_write_reg>
 8001048:	4602      	mov	r2, r0
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	4413      	add	r3, r2
 800104e:	617b      	str	r3, [r7, #20]
  
  /** CABC : Content Adaptive Backlight Control section end << */
  
  /* Send Command Display On */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f103 0010 	add.w	r0, r3, #16
 8001056:	2300      	movs	r3, #0
 8001058:	4a1e      	ldr	r2, [pc, #120]	; (80010d4 <OTM8009A_Init+0xb88>)
 800105a:	2129      	movs	r1, #41	; 0x29
 800105c:	f000 f88c 	bl	8001178 <otm8009a_write_reg>
 8001060:	4602      	mov	r2, r0
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	4413      	add	r3, r2
 8001066:	617b      	str	r3, [r7, #20]
  
  /* NOP command */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f103 0010 	add.w	r0, r3, #16
 800106e:	2300      	movs	r3, #0
 8001070:	4a19      	ldr	r2, [pc, #100]	; (80010d8 <OTM8009A_Init+0xb8c>)
 8001072:	2100      	movs	r1, #0
 8001074:	f000 f880 	bl	8001178 <otm8009a_write_reg>
 8001078:	4602      	mov	r2, r0
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	4413      	add	r3, r2
 800107e:	617b      	str	r3, [r7, #20]
  
  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f103 0010 	add.w	r0, r3, #16
 8001086:	2300      	movs	r3, #0
 8001088:	4a14      	ldr	r2, [pc, #80]	; (80010dc <OTM8009A_Init+0xb90>)
 800108a:	212c      	movs	r1, #44	; 0x2c
 800108c:	f000 f874 	bl	8001178 <otm8009a_write_reg>
 8001090:	4602      	mov	r2, r0
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	4413      	add	r3, r2
 8001096:	617b      	str	r3, [r7, #20]
  
  if(ret != OTM8009A_OK)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d002      	beq.n	80010a4 <OTM8009A_Init+0xb58>
  {
    ret = OTM8009A_ERROR;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 80010a4:	697b      	ldr	r3, [r7, #20]
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	080081a8 	.word	0x080081a8
 80010b4:	080081ac 	.word	0x080081ac
 80010b8:	2000006c 	.word	0x2000006c
 80010bc:	080081d7 	.word	0x080081d7
 80010c0:	080081b0 	.word	0x080081b0
 80010c4:	80808081 	.word	0x80808081
 80010c8:	080081d8 	.word	0x080081d8
 80010cc:	080081d9 	.word	0x080081d9
 80010d0:	080081da 	.word	0x080081da
 80010d4:	080081db 	.word	0x080081db
 80010d8:	080081b1 	.word	0x080081b1
 80010dc:	080081dc 	.word	0x080081dc

080010e0 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b087      	sub	sp, #28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	461a      	mov	r2, r3
 80010ec:	460b      	mov	r3, r1
 80010ee:	817b      	strh	r3, [r7, #10]
 80010f0:	4613      	mov	r3, r2
 80010f2:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	689c      	ldr	r4, [r3, #8]
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	8818      	ldrh	r0, [r3, #0]
 8001100:	893b      	ldrh	r3, [r7, #8]
 8001102:	8979      	ldrh	r1, [r7, #10]
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	47a0      	blx	r4
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	bd90      	pop	{r4, r7, pc}

08001112 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001112:	b590      	push	{r4, r7, lr}
 8001114:	b087      	sub	sp, #28
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	461a      	mov	r2, r3
 800111e:	460b      	mov	r3, r1
 8001120:	817b      	strh	r3, [r7, #10]
 8001122:	4613      	mov	r3, r2
 8001124:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	685c      	ldr	r4, [r3, #4]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	8818      	ldrh	r0, [r3, #0]
 8001132:	893b      	ldrh	r3, [r7, #8]
 8001134:	8979      	ldrh	r1, [r7, #10]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	47a0      	blx	r4
 800113a:	4603      	mov	r3, r0
}
 800113c:	4618      	mov	r0, r3
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd90      	pop	{r4, r7, pc}

08001144 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	4798      	blx	r3
 8001154:	4603      	mov	r3, r0
 8001156:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001158:	bf00      	nop
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	4798      	blx	r3
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	d8f5      	bhi.n	800115a <OTM8009A_IO_Delay+0x16>
  {
  }
  return OTM8009A_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	461a      	mov	r2, r3
 8001184:	460b      	mov	r3, r1
 8001186:	817b      	strh	r3, [r7, #10]
 8001188:	4613      	mov	r3, r2
 800118a:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	681c      	ldr	r4, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6898      	ldr	r0, [r3, #8]
 8001194:	893b      	ldrh	r3, [r7, #8]
 8001196:	8979      	ldrh	r1, [r7, #10]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	47a0      	blx	r4
 800119c:	4603      	mov	r3, r0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd90      	pop	{r4, r7, pc}
	...

080011a8 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <BSP_LED_Init+0x7c>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	4a19      	ldr	r2, [pc, #100]	; (8001224 <BSP_LED_Init+0x7c>)
 80011be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <BSP_LED_Init+0x7c>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4a14      	ldr	r2, [pc, #80]	; (8001228 <BSP_LED_Init+0x80>)
 80011d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011de:	2301      	movs	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e6:	2303      	movs	r3, #3
 80011e8:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	4a0f      	ldr	r2, [pc, #60]	; (800122c <BSP_LED_Init+0x84>)
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	f107 0210 	add.w	r2, r7, #16
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f002 fa85 	bl	8003708 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <BSP_LED_Init+0x84>)
 8001202:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <BSP_LED_Init+0x80>)
 800120a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120e:	b29b      	uxth	r3, r3
 8001210:	2201      	movs	r2, #1
 8001212:	4619      	mov	r1, r3
 8001214:	f002 fc28 	bl	8003a68 <HAL_GPIO_WritePin>
 return ret;
 8001218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800121a:	4618      	mov	r0, r3
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	58024400 	.word	0x58024400
 8001228:	08008314 	.word	0x08008314
 800122c:	20000000 	.word	0x20000000

08001230 <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4a08      	ldr	r2, [pc, #32]	; (8001264 <BSP_LED_On+0x34>)
 8001242:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	4a07      	ldr	r2, [pc, #28]	; (8001268 <BSP_LED_On+0x38>)
 800124a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124e:	b29b      	uxth	r3, r3
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	f002 fc08 	bl	8003a68 <HAL_GPIO_WritePin>
  return ret;
 8001258:	68fb      	ldr	r3, [r7, #12]
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000000 	.word	0x20000000
 8001268:	08008314 	.word	0x08008314

0800126c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8001270:	f000 fefe 	bl	8002070 <HAL_GetTick>
 8001274:	4603      	mov	r3, r0
}
 8001276:	4618      	mov	r0, r3
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and deactivating it later.
  * @param  Instance LCD Instance
  */
void BSP_LCD_Reset(uint32_t Instance)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b088      	sub	sp, #32
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  LCD_RESET_GPIO_CLK_ENABLE();
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <BSP_LCD_Reset+0x6c>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <BSP_LCD_Reset+0x6c>)
 800128c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001290:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <BSP_LCD_Reset+0x6c>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800129a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO Reset pin */
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 80012a2:	2308      	movs	r3, #8
 80012a4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80012a6:	2301      	movs	r3, #1
 80012a8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ae:	2303      	movs	r3, #3
 80012b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 80012b2:	f107 030c 	add.w	r3, r7, #12
 80012b6:	4619      	mov	r1, r3
 80012b8:	480c      	ldr	r0, [pc, #48]	; (80012ec <BSP_LCD_Reset+0x70>)
 80012ba:	f002 fa25 	bl	8003708 <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 80012be:	2200      	movs	r2, #0
 80012c0:	2108      	movs	r1, #8
 80012c2:	480a      	ldr	r0, [pc, #40]	; (80012ec <BSP_LCD_Reset+0x70>)
 80012c4:	f002 fbd0 	bl	8003a68 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 80012c8:	2014      	movs	r0, #20
 80012ca:	f000 fedd 	bl	8002088 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 80012ce:	2201      	movs	r2, #1
 80012d0:	2108      	movs	r1, #8
 80012d2:	4806      	ldr	r0, [pc, #24]	; (80012ec <BSP_LCD_Reset+0x70>)
 80012d4:	f002 fbc8 	bl	8003a68 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 80012d8:	200a      	movs	r0, #10
 80012da:	f000 fed5 	bl	8002088 <HAL_Delay>
}
 80012de:	bf00      	nop
 80012e0:	3720      	adds	r7, #32
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	58024400 	.word	0x58024400
 80012ec:	58021800 	.word	0x58021800

080012f0 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001304:	f06f 0301 	mvn.w	r3, #1
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	e009      	b.n	8001320 <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800130c:	4908      	ldr	r1, [pc, #32]	; (8001330 <BSP_LCD_SetActiveLayer+0x40>)
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	4613      	mov	r3, r2
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	1a9b      	subs	r3, r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	440b      	add	r3, r1
 800131a:	3308      	adds	r3, #8
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8001320:	68fb      	ldr	r3, [r7, #12]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	200001a4 	.word	0x200001a4

08001334 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d003      	beq.n	8001350 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001348:	f06f 0301 	mvn.w	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	e00a      	b.n	8001366 <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8001350:	4908      	ldr	r1, [pc, #32]	; (8001374 <BSP_LCD_GetPixelFormat+0x40>)
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	440b      	add	r3, r1
 800135e:	330c      	adds	r3, #12
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	200001a4 	.word	0x200001a4

08001378 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b08f      	sub	sp, #60	; 0x3c
 800137c:	af02      	add	r7, sp, #8
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
 8001384:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	330a      	adds	r3, #10
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	330b      	adds	r3, #11
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	441a      	add	r2, r3
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	330c      	adds	r3, #12
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	041b      	lsls	r3, r3, #16
 80013a4:	441a      	add	r2, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	330d      	adds	r3, #13
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	061b      	lsls	r3, r3, #24
 80013ae:	4413      	add	r3, r2
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	3312      	adds	r3, #18
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	3313      	adds	r3, #19
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	441a      	add	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	3314      	adds	r3, #20
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	041b      	lsls	r3, r3, #16
 80013cc:	441a      	add	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	3315      	adds	r3, #21
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	061b      	lsls	r3, r3, #24
 80013d6:	4413      	add	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	3316      	adds	r3, #22
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3317      	adds	r3, #23
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	021b      	lsls	r3, r3, #8
 80013ea:	441a      	add	r2, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	3318      	adds	r3, #24
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	441a      	add	r2, r3
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	3319      	adds	r3, #25
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	061b      	lsls	r3, r3, #24
 80013fe:	4413      	add	r3, r2
 8001400:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	331c      	adds	r3, #28
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	331d      	adds	r3, #29
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	4413      	add	r3, r2
 8001414:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 8001416:	493f      	ldr	r1, [pc, #252]	; (8001514 <BSP_LCD_DrawBitmap+0x19c>)
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3308      	adds	r3, #8
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a3b      	ldr	r2, [pc, #236]	; (8001518 <BSP_LCD_DrawBitmap+0x1a0>)
 800142a:	2134      	movs	r1, #52	; 0x34
 800142c:	fb01 f303 	mul.w	r3, r1, r3
 8001430:	4413      	add	r3, r2
 8001432:	335c      	adds	r3, #92	; 0x5c
 8001434:	6819      	ldr	r1, [r3, #0]
 8001436:	4837      	ldr	r0, [pc, #220]	; (8001514 <BSP_LCD_DrawBitmap+0x19c>)
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4613      	mov	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4403      	add	r3, r0
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	fb03 f202 	mul.w	r2, r3, r2
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	18d0      	adds	r0, r2, r3
 8001450:	4c30      	ldr	r4, [pc, #192]	; (8001514 <BSP_LCD_DrawBitmap+0x19c>)
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	4613      	mov	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	1a9b      	subs	r3, r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4423      	add	r3, r4
 800145e:	3310      	adds	r3, #16
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fb00 f303 	mul.w	r3, r0, r3
 8001466:	440b      	add	r3, r1
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	3b20      	subs	r3, #32
 800146e:	2b07      	cmp	r3, #7
 8001470:	d802      	bhi.n	8001478 <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8001472:	2300      	movs	r3, #0
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
 8001476:	e008      	b.n	800148a <BSP_LCD_DrawBitmap+0x112>
  }
  else if ((bit_pixel/8U) == 2U)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	3b10      	subs	r3, #16
 800147c:	2b07      	cmp	r3, #7
 800147e:	d802      	bhi.n	8001486 <BSP_LCD_DrawBitmap+0x10e>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8001480:	2302      	movs	r3, #2
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
 8001484:	e001      	b.n	800148a <BSP_LCD_DrawBitmap+0x112>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 8001486:	2301      	movs	r3, #1
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3b01      	subs	r3, #1
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	08d2      	lsrs	r2, r2, #3
 8001498:	fb03 f202 	mul.w	r2, r3, r2
 800149c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149e:	4413      	add	r3, r2
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014aa:	e029      	b.n	8001500 <BSP_LCD_DrawBitmap+0x188>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 80014ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	6a39      	ldr	r1, [r7, #32]
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f000 fad6 	bl	8001a68 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 80014bc:	4915      	ldr	r1, [pc, #84]	; (8001514 <BSP_LCD_DrawBitmap+0x19c>)
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	6819      	ldr	r1, [r3, #0]
 80014cc:	4811      	ldr	r0, [pc, #68]	; (8001514 <BSP_LCD_DrawBitmap+0x19c>)
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4613      	mov	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4403      	add	r3, r0
 80014da:	3310      	adds	r3, #16
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	fb01 f303 	mul.w	r3, r1, r3
 80014e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014e4:	4413      	add	r3, r2
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
    pbmp -= width*(bit_pixel/8U);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	08db      	lsrs	r3, r3, #3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	425b      	negs	r3, r3
 80014f4:	6a3a      	ldr	r2, [r7, #32]
 80014f6:	4413      	add	r3, r2
 80014f8:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 80014fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014fc:	3301      	adds	r3, #1
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	429a      	cmp	r2, r3
 8001506:	d3d1      	bcc.n	80014ac <BSP_LCD_DrawBitmap+0x134>
  }

  return ret;
 8001508:	69fb      	ldr	r3, [r7, #28]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3734      	adds	r7, #52	; 0x34
 800150e:	46bd      	mov	sp, r7
 8001510:	bd90      	pop	{r4, r7, pc}
 8001512:	bf00      	nop
 8001514:	200001a4 	.word	0x200001a4
 8001518:	200000fc 	.word	0x200000fc

0800151c <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
 800152e:	e035      	b.n	800159c <BSP_LCD_FillRGBRect+0x80>
  {
    for(j = 0; j < Width; j++)
 8001530:	2300      	movs	r3, #0
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	e02b      	b.n	800158e <BSP_LCD_FillRGBRect+0x72>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	461a      	mov	r2, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	021b      	lsls	r3, r3, #8
 8001544:	431a      	orrs	r2, r3
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	3302      	adds	r3, #2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	041b      	lsls	r3, r3, #16
 800154e:	431a      	orrs	r2, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	3303      	adds	r3, #3
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	061b      	lsls	r3, r3, #24
 8001558:	4313      	orrs	r3, r2
 800155a:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	18d1      	adds	r1, r2, r3
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	441a      	add	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	68f8      	ldr	r0, [r7, #12]
 800156c:	f000 f99e 	bl	80018ac <BSP_LCD_WritePixel>
      pData += Lcd_Ctx[Instance].BppFactor;
 8001570:	490f      	ldr	r1, [pc, #60]	; (80015b0 <BSP_LCD_FillRGBRect+0x94>)
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	3310      	adds	r3, #16
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	4413      	add	r3, r2
 8001586:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	3301      	adds	r3, #1
 800158c:	61bb      	str	r3, [r7, #24]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001592:	429a      	cmp	r2, r3
 8001594:	d3cf      	bcc.n	8001536 <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3301      	adds	r3, #1
 800159a:	61fb      	str	r3, [r7, #28]
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d3c5      	bcc.n	8001530 <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3720      	adds	r7, #32
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200001a4 	.word	0x200001a4

080015b4 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 80015b4:	b590      	push	{r4, r7, lr}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af02      	add	r7, sp, #8
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 80015c2:	4928      	ldr	r1, [pc, #160]	; (8001664 <BSP_LCD_DrawHLine+0xb0>)
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4613      	mov	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	3308      	adds	r3, #8
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a24      	ldr	r2, [pc, #144]	; (8001668 <BSP_LCD_DrawHLine+0xb4>)
 80015d6:	2134      	movs	r1, #52	; 0x34
 80015d8:	fb01 f303 	mul.w	r3, r1, r3
 80015dc:	4413      	add	r3, r2
 80015de:	335c      	adds	r3, #92	; 0x5c
 80015e0:	6819      	ldr	r1, [r3, #0]
 80015e2:	4820      	ldr	r0, [pc, #128]	; (8001664 <BSP_LCD_DrawHLine+0xb0>)
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	1a9b      	subs	r3, r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4403      	add	r3, r0
 80015f0:	3310      	adds	r3, #16
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	4c1b      	ldr	r4, [pc, #108]	; (8001664 <BSP_LCD_DrawHLine+0xb0>)
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	1a9b      	subs	r3, r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4423      	add	r3, r4
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	fb03 f202 	mul.w	r2, r3, r2
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4413      	add	r3, r2
 800160e:	fb00 f303 	mul.w	r3, r0, r3
 8001612:	440b      	add	r3, r1
 8001614:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 8001616:	68ba      	ldr	r2, [r7, #8]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	18d1      	adds	r1, r2, r3
 800161c:	4811      	ldr	r0, [pc, #68]	; (8001664 <BSP_LCD_DrawHLine+0xb0>)
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4613      	mov	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	1a9b      	subs	r3, r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4403      	add	r3, r0
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4299      	cmp	r1, r3
 800162e:	d90a      	bls.n	8001646 <BSP_LCD_DrawHLine+0x92>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <BSP_LCD_DrawHLine+0xb0>)
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4613      	mov	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	1a9b      	subs	r3, r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	440b      	add	r3, r1
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 8001646:	6979      	ldr	r1, [r7, #20]
 8001648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	2300      	movs	r3, #0
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2301      	movs	r3, #1
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	68f8      	ldr	r0, [r7, #12]
 8001656:	f000 f993 	bl	8001980 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd90      	pop	{r4, r7, pc}
 8001664:	200001a4 	.word	0x200001a4
 8001668:	200000fc 	.word	0x200000fc

0800166c <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af02      	add	r7, sp, #8
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
 8001678:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800167a:	492d      	ldr	r1, [pc, #180]	; (8001730 <BSP_LCD_DrawVLine+0xc4>)
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	1a9b      	subs	r3, r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	3308      	adds	r3, #8
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a29      	ldr	r2, [pc, #164]	; (8001734 <BSP_LCD_DrawVLine+0xc8>)
 800168e:	2134      	movs	r1, #52	; 0x34
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	335c      	adds	r3, #92	; 0x5c
 8001698:	6819      	ldr	r1, [r3, #0]
 800169a:	4825      	ldr	r0, [pc, #148]	; (8001730 <BSP_LCD_DrawVLine+0xc4>)
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4613      	mov	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	1a9b      	subs	r3, r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4403      	add	r3, r0
 80016a8:	3310      	adds	r3, #16
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	4c20      	ldr	r4, [pc, #128]	; (8001730 <BSP_LCD_DrawVLine+0xc4>)
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4613      	mov	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	4423      	add	r3, r4
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	fb03 f202 	mul.w	r2, r3, r2
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	4413      	add	r3, r2
 80016c6:	fb00 f303 	mul.w	r3, r0, r3
 80016ca:	440b      	add	r3, r1
 80016cc:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	18d1      	adds	r1, r2, r3
 80016d4:	4816      	ldr	r0, [pc, #88]	; (8001730 <BSP_LCD_DrawVLine+0xc4>)
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4403      	add	r3, r0
 80016e2:	3304      	adds	r3, #4
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4299      	cmp	r1, r3
 80016e8:	d90b      	bls.n	8001702 <BSP_LCD_DrawVLine+0x96>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 80016ea:	4911      	ldr	r1, [pc, #68]	; (8001730 <BSP_LCD_DrawVLine+0xc4>)
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4613      	mov	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	1a9b      	subs	r3, r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	3304      	adds	r3, #4
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	603b      	str	r3, [r7, #0]
  }
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 8001702:	6979      	ldr	r1, [r7, #20]
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <BSP_LCD_DrawVLine+0xc4>)
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4613      	mov	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	1a9b      	subs	r3, r3, r2
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4403      	add	r3, r0
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	3b01      	subs	r3, #1
 8001716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001718:	9201      	str	r2, [sp, #4]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2201      	movs	r2, #1
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f000 f92d 	bl	8001980 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	371c      	adds	r7, #28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd90      	pop	{r4, r7, pc}
 8001730:	200001a4 	.word	0x200001a4
 8001734:	200000fc 	.word	0x200000fc

08001738 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af02      	add	r7, sp, #8
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 8001746:	4921      	ldr	r1, [pc, #132]	; (80017cc <BSP_LCD_FillRect+0x94>)
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	1a9b      	subs	r3, r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3308      	adds	r3, #8
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a1d      	ldr	r2, [pc, #116]	; (80017d0 <BSP_LCD_FillRect+0x98>)
 800175a:	2134      	movs	r1, #52	; 0x34
 800175c:	fb01 f303 	mul.w	r3, r1, r3
 8001760:	4413      	add	r3, r2
 8001762:	335c      	adds	r3, #92	; 0x5c
 8001764:	6819      	ldr	r1, [r3, #0]
 8001766:	4819      	ldr	r0, [pc, #100]	; (80017cc <BSP_LCD_FillRect+0x94>)
 8001768:	68fa      	ldr	r2, [r7, #12]
 800176a:	4613      	mov	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	1a9b      	subs	r3, r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4403      	add	r3, r0
 8001774:	3310      	adds	r3, #16
 8001776:	6818      	ldr	r0, [r3, #0]
 8001778:	4c14      	ldr	r4, [pc, #80]	; (80017cc <BSP_LCD_FillRect+0x94>)
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4613      	mov	r3, r2
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	1a9b      	subs	r3, r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4423      	add	r3, r4
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	fb03 f202 	mul.w	r2, r3, r2
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	4413      	add	r3, r2
 8001792:	fb00 f303 	mul.w	r3, r0, r3
 8001796:	440b      	add	r3, r1
 8001798:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800179a:	6979      	ldr	r1, [r7, #20]
 800179c:	480b      	ldr	r0, [pc, #44]	; (80017cc <BSP_LCD_FillRect+0x94>)
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4403      	add	r3, r0
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b2:	9201      	str	r2, [sp, #4]
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b8:	683a      	ldr	r2, [r7, #0]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	f000 f8e0 	bl	8001980 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	371c      	adds	r7, #28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd90      	pop	{r4, r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200001a4 	.word	0x200001a4
 80017d0:	200000fc 	.word	0x200000fc

080017d4 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
 80017e0:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80017e2:	4930      	ldr	r1, [pc, #192]	; (80018a4 <BSP_LCD_ReadPixel+0xd0>)
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	4613      	mov	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	1a9b      	subs	r3, r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	3308      	adds	r3, #8
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a2c      	ldr	r2, [pc, #176]	; (80018a8 <BSP_LCD_ReadPixel+0xd4>)
 80017f6:	2134      	movs	r1, #52	; 0x34
 80017f8:	fb01 f303 	mul.w	r3, r1, r3
 80017fc:	4413      	add	r3, r2
 80017fe:	3348      	adds	r3, #72	; 0x48
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d122      	bne.n	800184c <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 8001806:	4927      	ldr	r1, [pc, #156]	; (80018a4 <BSP_LCD_ReadPixel+0xd0>)
 8001808:	68fa      	ldr	r2, [r7, #12]
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	3308      	adds	r3, #8
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <BSP_LCD_ReadPixel+0xd4>)
 800181a:	2134      	movs	r1, #52	; 0x34
 800181c:	fb01 f303 	mul.w	r3, r1, r3
 8001820:	4413      	add	r3, r2
 8001822:	335c      	adds	r3, #92	; 0x5c
 8001824:	6819      	ldr	r1, [r3, #0]
 8001826:	481f      	ldr	r0, [pc, #124]	; (80018a4 <BSP_LCD_ReadPixel+0xd0>)
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4613      	mov	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	1a9b      	subs	r3, r3, r2
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4403      	add	r3, r0
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	fb03 f202 	mul.w	r2, r3, r2
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4413      	add	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	440b      	add	r3, r1
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e023      	b.n	8001894 <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800184c:	4915      	ldr	r1, [pc, #84]	; (80018a4 <BSP_LCD_ReadPixel+0xd0>)
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4613      	mov	r3, r2
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	1a9b      	subs	r3, r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	3308      	adds	r3, #8
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <BSP_LCD_ReadPixel+0xd4>)
 8001860:	2134      	movs	r1, #52	; 0x34
 8001862:	fb01 f303 	mul.w	r3, r1, r3
 8001866:	4413      	add	r3, r2
 8001868:	335c      	adds	r3, #92	; 0x5c
 800186a:	6819      	ldr	r1, [r3, #0]
 800186c:	480d      	ldr	r0, [pc, #52]	; (80018a4 <BSP_LCD_ReadPixel+0xd0>)
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4613      	mov	r3, r2
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	1a9b      	subs	r3, r3, r2
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	4403      	add	r3, r0
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	fb03 f202 	mul.w	r2, r3, r2
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	4413      	add	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	440b      	add	r3, r1
 800188a:	881b      	ldrh	r3, [r3, #0]
 800188c:	b29b      	uxth	r3, r3
 800188e:	461a      	mov	r2, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3714      	adds	r7, #20
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	200001a4 	.word	0x200001a4
 80018a8:	200000fc 	.word	0x200000fc

080018ac <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80018ba:	492f      	ldr	r1, [pc, #188]	; (8001978 <BSP_LCD_WritePixel+0xcc>)
 80018bc:	68fa      	ldr	r2, [r7, #12]
 80018be:	4613      	mov	r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	1a9b      	subs	r3, r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	440b      	add	r3, r1
 80018c8:	3308      	adds	r3, #8
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a2b      	ldr	r2, [pc, #172]	; (800197c <BSP_LCD_WritePixel+0xd0>)
 80018ce:	2134      	movs	r1, #52	; 0x34
 80018d0:	fb01 f303 	mul.w	r3, r1, r3
 80018d4:	4413      	add	r3, r2
 80018d6:	3348      	adds	r3, #72	; 0x48
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d122      	bne.n	8001924 <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80018de:	4926      	ldr	r1, [pc, #152]	; (8001978 <BSP_LCD_WritePixel+0xcc>)
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4613      	mov	r3, r2
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	3308      	adds	r3, #8
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a22      	ldr	r2, [pc, #136]	; (800197c <BSP_LCD_WritePixel+0xd0>)
 80018f2:	2134      	movs	r1, #52	; 0x34
 80018f4:	fb01 f303 	mul.w	r3, r1, r3
 80018f8:	4413      	add	r3, r2
 80018fa:	335c      	adds	r3, #92	; 0x5c
 80018fc:	6819      	ldr	r1, [r3, #0]
 80018fe:	481e      	ldr	r0, [pc, #120]	; (8001978 <BSP_LCD_WritePixel+0xcc>)
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4613      	mov	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	4403      	add	r3, r0
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	fb03 f202 	mul.w	r2, r3, r2
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	4413      	add	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	440b      	add	r3, r1
 800191c:	461a      	mov	r2, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	e021      	b.n	8001968 <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8001924:	4914      	ldr	r1, [pc, #80]	; (8001978 <BSP_LCD_WritePixel+0xcc>)
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4613      	mov	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	3308      	adds	r3, #8
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a11      	ldr	r2, [pc, #68]	; (800197c <BSP_LCD_WritePixel+0xd0>)
 8001938:	2134      	movs	r1, #52	; 0x34
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	335c      	adds	r3, #92	; 0x5c
 8001942:	6819      	ldr	r1, [r3, #0]
 8001944:	480c      	ldr	r0, [pc, #48]	; (8001978 <BSP_LCD_WritePixel+0xcc>)
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	4613      	mov	r3, r2
 800194a:	00db      	lsls	r3, r3, #3
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4403      	add	r3, r0
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	fb03 f202 	mul.w	r2, r3, r2
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	4413      	add	r3, r2
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	440b      	add	r3, r1
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	b292      	uxth	r2, r2
 8001966:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	200001a4 	.word	0x200001a4
 800197c:	200000fc 	.word	0x200000fc

08001980 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b088      	sub	sp, #32
 8001984:	af02      	add	r7, sp, #8
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8001992:	4932      	ldr	r1, [pc, #200]	; (8001a5c <LL_FillBuffer+0xdc>)
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4613      	mov	r3, r2
 8001998:	00db      	lsls	r3, r3, #3
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	330c      	adds	r3, #12
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d129      	bne.n	80019fc <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 80019a8:	2302      	movs	r3, #2
 80019aa:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 80019ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ae:	0adb      	lsrs	r3, r3, #11
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4613      	mov	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	4413      	add	r3, r2
 80019ba:	015a      	lsls	r2, r3, #5
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	3317      	adds	r3, #23
 80019c0:	099b      	lsrs	r3, r3, #6
 80019c2:	0419      	lsls	r1, r3, #16
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019cc:	4613      	mov	r3, r2
 80019ce:	01db      	lsls	r3, r3, #7
 80019d0:	4413      	add	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	3321      	adds	r3, #33	; 0x21
 80019d8:	099b      	lsrs	r3, r3, #6
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	4319      	orrs	r1, r3
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	4613      	mov	r3, r2
 80019e6:	011b      	lsls	r3, r3, #4
 80019e8:	4413      	add	r3, r2
 80019ea:	015a      	lsls	r2, r3, #5
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	3317      	adds	r3, #23
 80019f0:	099b      	lsrs	r3, r3, #6
 80019f2:	430b      	orrs	r3, r1
 80019f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80019f8:	613b      	str	r3, [r7, #16]
    break;
 80019fa:	e002      	b.n	8001a02 <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
    break;
 8001a00:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 8001a02:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <LL_FillBuffer+0xe0>)
 8001a04:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a08:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <LL_FillBuffer+0xe0>)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 8001a10:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <LL_FillBuffer+0xe0>)
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <LL_FillBuffer+0xe0>)
 8001a18:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <LL_FillBuffer+0xe4>)
 8001a1a:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8001a1c:	4810      	ldr	r0, [pc, #64]	; (8001a60 <LL_FillBuffer+0xe0>)
 8001a1e:	f000 fcff 	bl	8002420 <HAL_DMA2D_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d115      	bne.n	8001a54 <LL_FillBuffer+0xd4>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8001a28:	2101      	movs	r1, #1
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <LL_FillBuffer+0xe0>)
 8001a2c:	f000 fe7a 	bl	8002724 <HAL_DMA2D_ConfigLayer>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10e      	bne.n	8001a54 <LL_FillBuffer+0xd4>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8001a36:	68ba      	ldr	r2, [r7, #8]
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6939      	ldr	r1, [r7, #16]
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <LL_FillBuffer+0xe0>)
 8001a42:	f000 fd5b 	bl	80024fc <HAL_DMA2D_Start>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d103      	bne.n	8001a54 <LL_FillBuffer+0xd4>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 8001a4c:	2119      	movs	r1, #25
 8001a4e:	4804      	ldr	r0, [pc, #16]	; (8001a60 <LL_FillBuffer+0xe0>)
 8001a50:	f000 fd7f 	bl	8002552 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8001a54:	bf00      	nop
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	200001a4 	.word	0x200001a4
 8001a60:	20000094 	.word	0x20000094
 8001a64:	52001000 	.word	0x52001000

08001a68 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 8001a76:	4925      	ldr	r1, [pc, #148]	; (8001b0c <LL_ConvertLineToRGB+0xa4>)
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	330c      	adds	r3, #12
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d102      	bne.n	8001a92 <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	617b      	str	r3, [r7, #20]
    break;
 8001a90:	e002      	b.n	8001a98 <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
    break;
 8001a96:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8001a98:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <LL_ConvertLineToRGB+0xa8>)
 8001a9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a9e:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	; (8001b10 <LL_ConvertLineToRGB+0xa8>)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <LL_ConvertLineToRGB+0xa8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <LL_ConvertLineToRGB+0xa8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	64da      	str	r2, [r3, #76]	; 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <LL_ConvertLineToRGB+0xa8>)
 8001ab4:	22ff      	movs	r2, #255	; 0xff
 8001ab6:	651a      	str	r2, [r3, #80]	; 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 8001ab8:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <LL_ConvertLineToRGB+0xa8>)
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	6493      	str	r3, [r2, #72]	; 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <LL_ConvertLineToRGB+0xa8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	645a      	str	r2, [r3, #68]	; 0x44

  hlcd_dma2d.Instance = DMA2D;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <LL_ConvertLineToRGB+0xa8>)
 8001ac6:	4a13      	ldr	r2, [pc, #76]	; (8001b14 <LL_ConvertLineToRGB+0xac>)
 8001ac8:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8001aca:	4811      	ldr	r0, [pc, #68]	; (8001b10 <LL_ConvertLineToRGB+0xa8>)
 8001acc:	f000 fca8 	bl	8002420 <HAL_DMA2D_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d115      	bne.n	8001b02 <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	480d      	ldr	r0, [pc, #52]	; (8001b10 <LL_ConvertLineToRGB+0xa8>)
 8001ada:	f000 fe23 	bl	8002724 <HAL_DMA2D_ConfigLayer>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d10e      	bne.n	8001b02 <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8001ae4:	68b9      	ldr	r1, [r7, #8]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9300      	str	r3, [sp, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4808      	ldr	r0, [pc, #32]	; (8001b10 <LL_ConvertLineToRGB+0xa8>)
 8001af0:	f000 fd04 	bl	80024fc <HAL_DMA2D_Start>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 8001afa:	2132      	movs	r1, #50	; 0x32
 8001afc:	4804      	ldr	r0, [pc, #16]	; (8001b10 <LL_ConvertLineToRGB+0xa8>)
 8001afe:	f000 fd28 	bl	8002552 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8001b02:	bf00      	nop
 8001b04:	3718      	adds	r7, #24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200001a4 	.word	0x200001a4
 8001b10:	20000094 	.word	0x20000094
 8001b14:	52001000 	.word	0x52001000

08001b18 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8001b26:	f06f 0301 	mvn.w	r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	e033      	b.n	8001b96 <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 8001b2e:	481c      	ldr	r0, [pc, #112]	; (8001ba0 <BSP_SDRAM_Init+0x88>)
 8001b30:	f000 f884 	bl	8001c3c <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8001b34:	481a      	ldr	r0, [pc, #104]	; (8001ba0 <BSP_SDRAM_Init+0x88>)
 8001b36:	f000 f837 	bl	8001ba8 <MX_SDRAM_Init>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	e026      	b.n	8001b96 <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8001b48:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <BSP_SDRAM_Init+0x8c>)
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <BSP_SDRAM_Init+0x8c>)
 8001b50:	2203      	movs	r2, #3
 8001b52:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <BSP_SDRAM_Init+0x8c>)
 8001b56:	f240 6203 	movw	r2, #1539	; 0x603
 8001b5a:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <BSP_SDRAM_Init+0x8c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <BSP_SDRAM_Init+0x8c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <BSP_SDRAM_Init+0x8c>)
 8001b6a:	2230      	movs	r2, #48	; 0x30
 8001b6c:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8001b6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ba4 <BSP_SDRAM_Init+0x8c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <BSP_SDRAM_Init+0x8c>)
 8001b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7a:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8001b7c:	4909      	ldr	r1, [pc, #36]	; (8001ba4 <BSP_SDRAM_Init+0x8c>)
 8001b7e:	4808      	ldr	r0, [pc, #32]	; (8001ba0 <BSP_SDRAM_Init+0x88>)
 8001b80:	f7fe fbaa 	bl	80002d8 <IS42S32800J_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8001b8a:	f06f 0304 	mvn.w	r3, #4
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e001      	b.n	8001b96 <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200001c0 	.word	0x200001c0
 8001ba4:	200001f4 	.word	0x200001f4

08001ba8 <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a20      	ldr	r2, [pc, #128]	; (8001c34 <MX_SDRAM_Init+0x8c>)
 8001bb4:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2240      	movs	r2, #64	; 0x40
 8001bd2:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001bda:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001be8:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <MX_SDRAM_Init+0x90>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8001bfc:	2307      	movs	r3, #7
 8001bfe:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 8001c04:	2307      	movs	r3, #7
 8001c06:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8001c14:	f107 030c 	add.w	r3, r7, #12
 8001c18:	4619      	mov	r1, r3
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f004 ff20 	bl	8006a60 <HAL_SDRAM_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	52004140 	.word	0x52004140
 8001c38:	200001c0 	.word	0x200001c0

08001c3c <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b090      	sub	sp, #64	; 0x40
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c44:	4b7f      	ldr	r3, [pc, #508]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001c46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c4a:	4a7e      	ldr	r2, [pc, #504]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001c4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c50:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001c54:	4b7b      	ldr	r3, [pc, #492]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001c56:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c60:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8001c62:	4b78      	ldr	r3, [pc, #480]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001c64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c68:	4a76      	ldr	r2, [pc, #472]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8001c72:	4b74      	ldr	r3, [pc, #464]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001c74:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c80:	4b70      	ldr	r3, [pc, #448]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c86:	4a6f      	ldr	r2, [pc, #444]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001c88:	f043 0308 	orr.w	r3, r3, #8
 8001c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c90:	4b6c      	ldr	r3, [pc, #432]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c9e:	4b69      	ldr	r3, [pc, #420]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca4:	4a67      	ldr	r2, [pc, #412]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cae:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cbc:	4b61      	ldr	r3, [pc, #388]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc2:	4a60      	ldr	r2, [pc, #384]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001cc4:	f043 0320 	orr.w	r3, r3, #32
 8001cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ccc:	4b5d      	ldr	r3, [pc, #372]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd2:	f003 0320 	and.w	r3, r3, #32
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cda:	4b5a      	ldr	r3, [pc, #360]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce0:	4a58      	ldr	r2, [pc, #352]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cea:	4b56      	ldr	r3, [pc, #344]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf8:	4b52      	ldr	r3, [pc, #328]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfe:	4a51      	ldr	r2, [pc, #324]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d08:	4b4e      	ldr	r3, [pc, #312]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001d16:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1c:	4a49      	ldr	r2, [pc, #292]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d26:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <SDRAM_MspInit+0x208>)
 8001d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001d34:	2302      	movs	r3, #2
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8001d40:	230c      	movs	r3, #12
 8001d42:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8001d44:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8001d4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d4e:	4619      	mov	r1, r3
 8001d50:	483d      	ldr	r0, [pc, #244]	; (8001e48 <SDRAM_MspInit+0x20c>)
 8001d52:	f001 fcd9 	bl	8003708 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8001d56:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8001d5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d60:	4619      	mov	r1, r3
 8001d62:	483a      	ldr	r0, [pc, #232]	; (8001e4c <SDRAM_MspInit+0x210>)
 8001d64:	f001 fcd0 	bl	8003708 <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8001d68:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8001d6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d72:	4619      	mov	r1, r3
 8001d74:	4836      	ldr	r0, [pc, #216]	; (8001e50 <SDRAM_MspInit+0x214>)
 8001d76:	f001 fcc7 	bl	8003708 <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8001d7a:	f248 1337 	movw	r3, #33079	; 0x8137
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8001d80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d84:	4619      	mov	r1, r3
 8001d86:	4833      	ldr	r0, [pc, #204]	; (8001e54 <SDRAM_MspInit+0x218>)
 8001d88:	f001 fcbe 	bl	8003708 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8001d8c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8001d92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d96:	4619      	mov	r1, r3
 8001d98:	482f      	ldr	r0, [pc, #188]	; (8001e58 <SDRAM_MspInit+0x21c>)
 8001d9a:	f001 fcb5 	bl	8003708 <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8001d9e:	f240 63ff 	movw	r3, #1791	; 0x6ff
 8001da2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8001da4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001da8:	4619      	mov	r1, r3
 8001daa:	482c      	ldr	r0, [pc, #176]	; (8001e5c <SDRAM_MspInit+0x220>)
 8001dac:	f001 fcac 	bl	8003708 <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8001db0:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001db2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001db6:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8001db8:	4b29      	ldr	r3, [pc, #164]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dbe:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8001dc0:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001dc2:	2280      	movs	r2, #128	; 0x80
 8001dc4:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8001dcc:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001dce:	f240 2202 	movw	r2, #514	; 0x202
 8001dd2:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001dd6:	f640 0208 	movw	r2, #2056	; 0x808
 8001dda:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8001ddc:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001dde:	2220      	movs	r2, #32
 8001de0:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8001de2:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001de4:	2280      	movs	r2, #128	; 0x80
 8001de6:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8001de8:	4b1d      	ldr	r3, [pc, #116]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001dea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001dfe:	2280      	movs	r2, #128	; 0x80
 8001e00:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001e10:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <SDRAM_MspInit+0x228>)
 8001e12:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
 8001e1a:	4a11      	ldr	r2, [pc, #68]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6413      	str	r3, [r2, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8001e20:	480f      	ldr	r0, [pc, #60]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001e22:	f002 f99b 	bl	800415c <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8001e26:	480e      	ldr	r0, [pc, #56]	; (8001e60 <SDRAM_MspInit+0x224>)
 8001e28:	f002 f94c 	bl	80040c4 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	210f      	movs	r1, #15
 8001e30:	207a      	movs	r0, #122	; 0x7a
 8001e32:	f000 fa44 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8001e36:	207a      	movs	r0, #122	; 0x7a
 8001e38:	f000 fa5b 	bl	80022f2 <HAL_NVIC_EnableIRQ>
}
 8001e3c:	bf00      	nop
 8001e3e:	3740      	adds	r7, #64	; 0x40
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	58024400 	.word	0x58024400
 8001e48:	58020c00 	.word	0x58020c00
 8001e4c:	58021000 	.word	0x58021000
 8001e50:	58021400 	.word	0x58021400
 8001e54:	58021800 	.word	0x58021800
 8001e58:	58021c00 	.word	0x58021c00
 8001e5c:	58022000 	.word	0x58022000
 8001e60:	20000214 	.word	0x20000214
 8001e64:	52000040 	.word	0x52000040

08001e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e6c:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <SystemInit+0xcc>)
 8001e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e72:	4a30      	ldr	r2, [pc, #192]	; (8001f34 <SystemInit+0xcc>)
 8001e74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <SystemInit+0xcc>)
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	4a2c      	ldr	r2, [pc, #176]	; (8001f34 <SystemInit+0xcc>)
 8001e82:	f043 0310 	orr.w	r3, r3, #16
 8001e86:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <SystemInit+0xd0>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <SystemInit+0xd0>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <SystemInit+0xd0>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e9a:	4b27      	ldr	r3, [pc, #156]	; (8001f38 <SystemInit+0xd0>)
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	4926      	ldr	r1, [pc, #152]	; (8001f38 <SystemInit+0xd0>)
 8001ea0:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <SystemInit+0xd4>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ea6:	4b24      	ldr	r3, [pc, #144]	; (8001f38 <SystemInit+0xd0>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001eac:	4b22      	ldr	r3, [pc, #136]	; (8001f38 <SystemInit+0xd0>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <SystemInit+0xd0>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001eb8:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <SystemInit+0xd0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001ebe:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <SystemInit+0xd0>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <SystemInit+0xd0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <SystemInit+0xd0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <SystemInit+0xd0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <SystemInit+0xd0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <SystemInit+0xd0>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <SystemInit+0xd0>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <SystemInit+0xd0>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a12      	ldr	r2, [pc, #72]	; (8001f38 <SystemInit+0xd0>)
 8001eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ef2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <SystemInit+0xd0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;  
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <SystemInit+0xd8>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <SystemInit+0xd8>)
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f04:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <SystemInit+0xdc>)
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	; (8001f48 <SystemInit+0xe0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f12:	d202      	bcs.n	8001f1a <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 8001f14:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <SystemInit+0xe4>)
 8001f16:	2201      	movs	r2, #1
 8001f18:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <SystemInit+0xe8>)
 8001f1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f20:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8001f22:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <SystemInit+0xcc>)
 8001f24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f28:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	e000ed00 	.word	0xe000ed00
 8001f38:	58024400 	.word	0x58024400
 8001f3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f40:	580000c0 	.word	0x580000c0
 8001f44:	5c001000 	.word	0x5c001000
 8001f48:	ffff0000 	.word	0xffff0000
 8001f4c:	51008108 	.word	0x51008108
 8001f50:	52004000 	.word	0x52004000

08001f54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5a:	2003      	movs	r0, #3
 8001f5c:	f000 f9a4 	bl	80022a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f60:	f003 f856 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <HAL_Init+0x68>)
 8001f68:	699b      	ldr	r3, [r3, #24]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	4913      	ldr	r1, [pc, #76]	; (8001fc0 <HAL_Init+0x6c>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <HAL_Init+0x68>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	4a0e      	ldr	r2, [pc, #56]	; (8001fc0 <HAL_Init+0x6c>)
 8001f88:	5cd3      	ldrb	r3, [r2, r3]
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <HAL_Init+0x70>)
 8001f96:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f98:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <HAL_Init+0x74>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f9e:	200f      	movs	r0, #15
 8001fa0:	f000 f81c 	bl	8001fdc <HAL_InitTick>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e002      	b.n	8001fb4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fae:	f000 f80d 	bl	8001fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fb2:	2300      	movs	r3, #0
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	58024400 	.word	0x58024400
 8001fc0:	08008324 	.word	0x08008324
 8001fc4:	20000014 	.word	0x20000014
 8001fc8:	20000010 	.word	0x20000010

08001fcc <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fe4:	4b15      	ldr	r3, [pc, #84]	; (800203c <HAL_InitTick+0x60>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e021      	b.n	8002034 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_InitTick+0x64>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_InitTick+0x60>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002002:	fbb2 f3f3 	udiv	r3, r2, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f000 f981 	bl	800230e <HAL_SYSTICK_Config>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e00e      	b.n	8002034 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b0f      	cmp	r3, #15
 800201a:	d80a      	bhi.n	8002032 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201c:	2200      	movs	r2, #0
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	f04f 30ff 	mov.w	r0, #4294967295
 8002024:	f000 f94b 	bl	80022be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <HAL_InitTick+0x68>)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	2000001c 	.word	0x2000001c
 8002040:	20000010 	.word	0x20000010
 8002044:	20000018 	.word	0x20000018

08002048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_IncTick+0x20>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	461a      	mov	r2, r3
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_IncTick+0x24>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4413      	add	r3, r2
 8002058:	4a04      	ldr	r2, [pc, #16]	; (800206c <HAL_IncTick+0x24>)
 800205a:	6013      	str	r3, [r2, #0]
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	2000001c 	.word	0x2000001c
 800206c:	20000280 	.word	0x20000280

08002070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return uwTick;
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <HAL_GetTick+0x14>)
 8002076:	681b      	ldr	r3, [r3, #0]
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000280 	.word	0x20000280

08002088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002090:	f7ff ffee 	bl	8002070 <HAL_GetTick>
 8002094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a0:	d005      	beq.n	80020ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_Delay+0x44>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	461a      	mov	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ae:	bf00      	nop
 80020b0:	f7ff ffde 	bl	8002070 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d8f7      	bhi.n	80020b0 <HAL_Delay+0x28>
  {
  }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000001c 	.word	0x2000001c

080020d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_GetREVID+0x14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	0c1b      	lsrs	r3, r3, #16
}
 80020da:	4618      	mov	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	5c001000 	.word	0x5c001000

080020e8 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_EnableCompensationCell+0x1c>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <HAL_EnableCompensationCell+0x1c>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6213      	str	r3, [r2, #32]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	58000400 	.word	0x58000400

08002108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <__NVIC_SetPriorityGrouping+0x40>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002124:	4013      	ands	r3, r2
 8002126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <__NVIC_SetPriorityGrouping+0x44>)
 8002132:	4313      	orrs	r3, r2
 8002134:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002136:	4a04      	ldr	r2, [pc, #16]	; (8002148 <__NVIC_SetPriorityGrouping+0x40>)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	60d3      	str	r3, [r2, #12]
}
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00
 800214c:	05fa0000 	.word	0x05fa0000

08002150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002154:	4b04      	ldr	r3, [pc, #16]	; (8002168 <__NVIC_GetPriorityGrouping+0x18>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	0a1b      	lsrs	r3, r3, #8
 800215a:	f003 0307 	and.w	r3, r3, #7
}
 800215e:	4618      	mov	r0, r3
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217a:	2b00      	cmp	r3, #0
 800217c:	db0b      	blt.n	8002196 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	f003 021f 	and.w	r2, r3, #31
 8002184:	4907      	ldr	r1, [pc, #28]	; (80021a4 <__NVIC_EnableIRQ+0x38>)
 8002186:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218a:	095b      	lsrs	r3, r3, #5
 800218c:	2001      	movs	r0, #1
 800218e:	fa00 f202 	lsl.w	r2, r0, r2
 8002192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	e000e100 	.word	0xe000e100

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
	...

08002264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002274:	d301      	bcc.n	800227a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002276:	2301      	movs	r3, #1
 8002278:	e00f      	b.n	800229a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800227a:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <SysTick_Config+0x40>)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002282:	210f      	movs	r1, #15
 8002284:	f04f 30ff 	mov.w	r0, #4294967295
 8002288:	f7ff ff8e 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800228c:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <SysTick_Config+0x40>)
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002292:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <SysTick_Config+0x40>)
 8002294:	2207      	movs	r2, #7
 8002296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	e000e010 	.word	0xe000e010

080022a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff29 	bl	8002108 <__NVIC_SetPriorityGrouping>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	60b9      	str	r1, [r7, #8]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff40 	bl	8002150 <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff90 	bl	80021fc <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5f 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff33 	bl	800216c <__NVIC_EnableIRQ>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ffa4 	bl	8002264 <SysTick_Config>
 800231c:	4603      	mov	r3, r0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800232c:	f3bf 8f5f 	dmb	sy
}
 8002330:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002332:	4b07      	ldr	r3, [pc, #28]	; (8002350 <HAL_MPU_Disable+0x28>)
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	4a06      	ldr	r2, [pc, #24]	; (8002350 <HAL_MPU_Disable+0x28>)
 8002338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_MPU_Disable+0x2c>)
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000ed00 	.word	0xe000ed00
 8002354:	e000ed90 	.word	0xe000ed90

08002358 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002360:	4a0b      	ldr	r2, [pc, #44]	; (8002390 <HAL_MPU_Enable+0x38>)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_MPU_Enable+0x3c>)
 800236c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <HAL_MPU_Enable+0x3c>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002376:	f3bf 8f4f 	dsb	sy
}
 800237a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800237c:	f3bf 8f6f 	isb	sy
}
 8002380:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000ed90 	.word	0xe000ed90
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	785a      	ldrb	r2, [r3, #1]
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_MPU_ConfigRegion+0x84>)
 80023a6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d029      	beq.n	8002404 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80023b0:	4a1a      	ldr	r2, [pc, #104]	; (800241c <HAL_MPU_ConfigRegion+0x84>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	7b1b      	ldrb	r3, [r3, #12]
 80023bc:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	7adb      	ldrb	r3, [r3, #11]
 80023c2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	7a9b      	ldrb	r3, [r3, #10]
 80023ca:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80023cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7b5b      	ldrb	r3, [r3, #13]
 80023d2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80023d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	7b9b      	ldrb	r3, [r3, #14]
 80023da:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80023dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7bdb      	ldrb	r3, [r3, #15]
 80023e2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80023e4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7a5b      	ldrb	r3, [r3, #9]
 80023ea:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80023ec:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	7a1b      	ldrb	r3, [r3, #8]
 80023f2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80023f4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	7812      	ldrb	r2, [r2, #0]
 80023fa:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80023fc:	4a07      	ldr	r2, [pc, #28]	; (800241c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80023fe:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002400:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002402:	e005      	b.n	8002410 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_MPU_ConfigRegion+0x84>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800240a:	4b04      	ldr	r3, [pc, #16]	; (800241c <HAL_MPU_ConfigRegion+0x84>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000ed90 	.word	0xe000ed90

08002420 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e04f      	b.n	80024d2 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d106      	bne.n	800244c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 f84e 	bl	80024e8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_DMA2D_Init+0xbc>)
 800245c:	4013      	ands	r3, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6851      	ldr	r1, [r2, #4]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	69d2      	ldr	r2, [r2, #28]
 8002466:	4311      	orrs	r1, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	430b      	orrs	r3, r1
 800246e:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <HAL_DMA2D_Init+0xc0>)
 8002478:	4013      	ands	r3, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6891      	ldr	r1, [r2, #8]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6992      	ldr	r2, [r2, #24]
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <HAL_DMA2D_Init+0xc4>)
 8002494:	4013      	ands	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	68d1      	ldr	r1, [r2, #12]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	430b      	orrs	r3, r1
 80024a0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	051a      	lsls	r2, r3, #20
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	055b      	lsls	r3, r3, #21
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	fff8ffbf 	.word	0xfff8ffbf
 80024e0:	fffffef8 	.word	0xfffffef8
 80024e4:	ffff0000 	.word	0xffff0000

080024e8 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_DMA2D_Start+0x1c>
 8002514:	2302      	movs	r3, #2
 8002516:	e018      	b.n	800254a <HAL_DMA2D_Start+0x4e>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f9a4 	bl	8002880 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3710      	adds	r7, #16
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b086      	sub	sp, #24
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800255c:	2300      	movs	r3, #0
 800255e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d056      	beq.n	800261c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800256e:	f7ff fd7f 	bl	8002070 <HAL_GetTick>
 8002572:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002574:	e04b      	b.n	800260e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002584:	2b00      	cmp	r3, #0
 8002586:	d023      	beq.n	80025d0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002596:	f043 0202 	orr.w	r2, r3, #2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2221      	movs	r2, #33	; 0x21
 80025ba:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2204      	movs	r2, #4
 80025c0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e0a5      	b.n	800271c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025d6:	d01a      	beq.n	800260e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025d8:	f7ff fd4a 	bl	8002070 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d302      	bcc.n	80025ee <HAL_DMA2D_PollForTransfer+0x9c>
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10f      	bne.n	800260e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025f2:	f043 0220 	orr.w	r2, r3, #32
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2203      	movs	r2, #3
 80025fe:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e086      	b.n	800271c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ac      	beq.n	8002576 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262e:	f003 0320 	and.w	r3, r3, #32
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d061      	beq.n	8002702 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800263e:	f7ff fd17 	bl	8002070 <HAL_GetTick>
 8002642:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002644:	e056      	b.n	80026f4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002654:	2b00      	cmp	r3, #0
 8002656:	d02e      	beq.n	80026b6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002666:	f043 0204 	orr.w	r2, r3, #4
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f003 0320 	and.w	r3, r3, #32
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800267c:	f043 0202 	orr.w	r2, r3, #2
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	665a      	str	r2, [r3, #100]	; 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002692:	f043 0201 	orr.w	r2, r3, #1
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	665a      	str	r2, [r3, #100]	; 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2229      	movs	r2, #41	; 0x29
 80026a0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2204      	movs	r2, #4
 80026a6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e032      	b.n	800271c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026bc:	d01a      	beq.n	80026f4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026be:	f7ff fcd7 	bl	8002070 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d302      	bcc.n	80026d4 <HAL_DMA2D_PollForTransfer+0x182>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10f      	bne.n	80026f4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	665a      	str	r2, [r3, #100]	; 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2203      	movs	r2, #3
 80026e4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e013      	b.n	800271c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0a1      	beq.n	8002646 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2212      	movs	r2, #18
 8002708:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2201      	movs	r2, #1
 800270e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002724:	b480      	push	{r7}
 8002726:	b087      	sub	sp, #28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_DMA2D_ConfigLayer+0x24>
 8002744:	2302      	movs	r3, #2
 8002746:	e092      	b.n	800286e <HAL_DMA2D_ConfigLayer+0x14a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	1a9b      	subs	r3, r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	3328      	adds	r3, #40	; 0x28
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	4413      	add	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	041b      	lsls	r3, r3, #16
 8002774:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800277c:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8002784:	4313      	orrs	r3, r2
 8002786:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8002788:	4b3c      	ldr	r3, [pc, #240]	; (800287c <HAL_DMA2D_ConfigLayer+0x158>)
 800278a:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b0a      	cmp	r3, #10
 8002792:	d003      	beq.n	800279c <HAL_DMA2D_ConfigLayer+0x78>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b09      	cmp	r3, #9
 800279a:	d107      	bne.n	80027ac <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	e005      	b.n	80027b8 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	061b      	lsls	r3, r3, #24
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d120      	bne.n	8002800 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	43db      	mvns	r3, r3
 80027c8:	ea02 0103 	and.w	r1, r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b0a      	cmp	r3, #10
 80027e6:	d003      	beq.n	80027f0 <HAL_DMA2D_ConfigLayer+0xcc>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b09      	cmp	r3, #9
 80027ee:	d135      	bne.n	800285c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80027fc:	629a      	str	r2, [r3, #40]	; 0x28
 80027fe:	e02d      	b.n	800285c <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	2b0b      	cmp	r3, #11
 8002806:	d109      	bne.n	800281c <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	049b      	lsls	r3, r3, #18
 800280e:	693a      	ldr	r2, [r7, #16]
 8002810:	4313      	orrs	r3, r2
 8002812:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800281a:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	43db      	mvns	r3, r3
 8002826:	ea02 0103 	and.w	r1, r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	430a      	orrs	r2, r1
 8002832:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b0a      	cmp	r3, #10
 8002844:	d003      	beq.n	800284e <HAL_DMA2D_ConfigLayer+0x12a>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b09      	cmp	r3, #9
 800284c:	d106      	bne.n	800285c <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800285a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	371c      	adds	r7, #28
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	ff33000f 	.word	0xff33000f

08002880 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8002880:	b480      	push	{r7}
 8002882:	b08b      	sub	sp, #44	; 0x2c
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
 800288c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002894:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	041a      	lsls	r2, r3, #16
 800289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289e:	431a      	orrs	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028b8:	d174      	bne.n	80029a4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80028c0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80028c8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80028d0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d108      	bne.n	80028f2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	627b      	str	r3, [r7, #36]	; 0x24
 80028f0:	e053      	b.n	800299a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d106      	bne.n	8002908 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4313      	orrs	r3, r2
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
 8002906:	e048      	b.n	800299a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d111      	bne.n	8002934 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	0cdb      	lsrs	r3, r3, #19
 8002914:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	0a9b      	lsrs	r3, r3, #10
 800291a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	08db      	lsrs	r3, r3, #3
 8002920:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	015a      	lsls	r2, r3, #5
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	02db      	lsls	r3, r3, #11
 800292a:	4313      	orrs	r3, r2
 800292c:	697a      	ldr	r2, [r7, #20]
 800292e:	4313      	orrs	r3, r2
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
 8002932:	e032      	b.n	800299a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d117      	bne.n	800296c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	0fdb      	lsrs	r3, r3, #31
 8002940:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	0cdb      	lsrs	r3, r3, #19
 8002946:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	0adb      	lsrs	r3, r3, #11
 800294c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	08db      	lsrs	r3, r3, #3
 8002952:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	029b      	lsls	r3, r3, #10
 800295c:	431a      	orrs	r2, r3
 800295e:	6a3b      	ldr	r3, [r7, #32]
 8002960:	03db      	lsls	r3, r3, #15
 8002962:	4313      	orrs	r3, r2
 8002964:	697a      	ldr	r2, [r7, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	e016      	b.n	800299a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	0f1b      	lsrs	r3, r3, #28
 8002970:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	0d1b      	lsrs	r3, r3, #20
 8002976:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	0b1b      	lsrs	r3, r3, #12
 800297c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	011a      	lsls	r2, r3, #4
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	431a      	orrs	r2, r3
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	031b      	lsls	r3, r3, #12
 8002992:	4313      	orrs	r3, r2
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029a0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80029a2:	e00d      	b.n	80029c0 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029ac:	d104      	bne.n	80029b8 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	615a      	str	r2, [r3, #20]
}
 80029b6:	e003      	b.n	80029c0 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	60da      	str	r2, [r3, #12]
}
 80029c0:	bf00      	nop
 80029c2:	372c      	adds	r7, #44	; 0x2c
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	019a      	lsls	r2, r3, #6
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	431a      	orrs	r2, r3
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	041b      	lsls	r3, r3, #16
 80029ec:	431a      	orrs	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
 8002a0a:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a0c:	f7ff fb30 	bl	8002070 <HAL_GetTick>
 8002a10:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002a12:	e009      	b.n	8002a28 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002a14:	f7ff fb2c 	bl	8002070 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a22:	d901      	bls.n	8002a28 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e015      	b.n	8002a54 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0ee      	beq.n	8002a14 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	019a      	lsls	r2, r3, #6
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	021b      	lsls	r3, r3, #8
 8002a42:	ea42 0103 	orr.w	r1, r2, r3
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	041a      	lsls	r2, r3, #16
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b088      	sub	sp, #32
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e109      	b.n	8002c84 <HAL_DSI_Init+0x228>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	7c5b      	ldrb	r3, [r3, #17]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d102      	bne.n	8002a80 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f97e 	bl	8002d7c <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2203      	movs	r2, #3
 8002a84:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8002a86:	2300      	movs	r3, #0
 8002a88:	613b      	str	r3, [r7, #16]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002a9a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aae:	f7ff fadf 	bl	8002070 <HAL_GetTick>
 8002ab2:	61f8      	str	r0, [r7, #28]

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002ab4:	e009      	b.n	8002aca <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002ab6:	f7ff fadb 	bl	8002070 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ac4:	d901      	bls.n	8002aca <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e0dc      	b.n	8002c84 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ed      	beq.n	8002ab6 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	4b69      	ldr	r3, [pc, #420]	; (8002c8c <HAL_DSI_Init+0x230>)
 8002ae8:	400b      	ands	r3, r1
 8002aea:	f8c2 3430 	str.w	r3, [r2, #1072]	; 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	; 0x430
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002b02:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8002b0a:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f7ff faa2 	bl	8002088 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b44:	f7ff fa94 	bl	8002070 <HAL_GetTick>
 8002b48:	61f8      	str	r0, [r7, #28]

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002b4a:	e009      	b.n	8002b60 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8002b4c:	f7ff fa90 	bl	8002070 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b5a:	d901      	bls.n	8002b60 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e091      	b.n	8002c84 <HAL_DSI_Init+0x228>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0ed      	beq.n	8002b4c <HAL_DSI_Init+0xf0>
  }

  /*************************** Set the PHY parameters ***************************/

  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= (DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f042 0206 	orr.w	r2, r2, #6
 8002b80:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0203 	bic.w	r2, r2, #3
 8002b94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0203 	bic.w	r2, r2, #3
 8002bc2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /************************ Set the DSI clock parameters ************************/

  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bea:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	6899      	ldr	r1, [r3, #8]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_DSI_Init+0x1b0>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	e000      	b.n	8002c0e <HAL_DSI_Init+0x1b2>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	61bb      	str	r3, [r7, #24]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <HAL_DSI_Init+0x234>)
 8002c14:	fb03 f202 	mul.w	r2, r3, r2
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	409a      	lsls	r2, r3
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f246 11a8 	movw	r1, #25000	; 0x61a8
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	617b      	str	r3, [r7, #20]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002c44:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hdsi->ErrorMsk = 0U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	fffc8603 	.word	0xfffc8603
 8002c90:	003d0900 	.word	0x003d0900

08002c94 <HAL_DSI_DeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_DeInit(DSI_HandleTypeDef *hdsi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_DSI_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e066      	b.n	8002d74 <HAL_DSI_DeInit+0xe0>
  }

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	745a      	strb	r2, [r3, #17]

  /* Disable the DSI wrapper */
  __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0208 	bic.w	r2, r2, #8
 8002cc0:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	697b      	ldr	r3, [r7, #20]

  /* Disable the DSI host */
  __HAL_DSI_DISABLE(hdsi);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0201 	bic.w	r2, r2, #1
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]

  /* D-PHY clock and digital disable */
  hdsi->Instance->PCTLR &= ~(DSI_PCTLR_CKE | DSI_PCTLR_DEN);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0206 	bic.w	r2, r2, #6
 8002d06:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Turn off the DSI PLL */
  __HAL_DSI_PLL_DISABLE(hdsi);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60fb      	str	r3, [r7, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]

  /* Disable the regulator */
  __HAL_DSI_REG_DISABLE(hdsi);
 8002d32:	2300      	movs	r3, #0
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002d46:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8002d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d56:	60bb      	str	r3, [r7, #8]
 8002d58:	68bb      	ldr	r3, [r7, #8]
  }
  /* DeInit the low level hardware */
  hdsi->MspDeInitCallback(hdsi);
#else
  /* DeInit the low level hardware */
  HAL_DSI_MspDeInit(hdsi);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f818 	bl	8002d90 <HAL_DSI_MspDeInit>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_RESET;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	745a      	strb	r2, [r3, #17]

  /* Release Lock */
  __HAL_UNLOCK(hdsi);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3718      	adds	r7, #24
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_DSI_MspDeInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspDeInit(DSI_HandleTypeDef *hdsi)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspDeInit could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_DSI_IRQHandler>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
void HAL_DSI_IRQHandler(DSI_HandleTypeDef *hdsi)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t ErrorStatus0;
  uint32_t ErrorStatus1;

  /* Tearing Effect Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00f      	beq.n	8002ddc <HAL_DSI_IRQHandler+0x38>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_DSI_IRQHandler+0x38>
    {
      /* Clear the Tearing Effect Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Tearing Effect callback */
      hdsi->TearingEffectCallback(hdsi);
#else
      /*Call legacy Tearing Effect callback*/
      HAL_DSI_TearingEffectCallback(hdsi);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f8ad 	bl	8002f36 <HAL_DSI_TearingEffectCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* End of Refresh Interrupt management ***************************************/
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00f      	beq.n	8002e0c <HAL_DSI_IRQHandler+0x68>
  {
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <HAL_DSI_IRQHandler+0x68>
    {
      /* Clear the End of Refresh Interrupt Flag */
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2202      	movs	r2, #2
 8002e02:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered End of refresh callback */
      hdsi->EndOfRefreshCallback(hdsi);
#else
      /*Call Legacy End of refresh callback */
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f004 f8dc 	bl	8006fc4 <HAL_DSI_EndOfRefreshCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }

  /* Error Interrupts management ***********************************************/
  if (hdsi->ErrorMsk != 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 808c 	beq.w	8002f2e <HAL_DSI_IRQHandler+0x18a>
  {
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002e1e:	60fb      	str	r3, [r7, #12]
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	60fb      	str	r3, [r7, #12]
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e36:	60bb      	str	r3, [r7, #8]
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	4013      	ands	r3, r2
 8002e44:	60bb      	str	r3, [r7, #8]

    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <HAL_DSI_IRQHandler+0xb6>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f043 0201 	orr.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_DSI_IRQHandler+0xcc>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f043 0202 	orr.w	r2, r3, #2
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_DSI_IRQHandler+0xe2>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f043 0204 	orr.w	r2, r3, #4
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_DSI_IRQHandler+0xf8>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f043 0208 	orr.w	r2, r3, #8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_DSI_IRQHandler+0x10e>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f043 0210 	orr.w	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d005      	beq.n	8002ec8 <HAL_DSI_IRQHandler+0x124>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f043 0220 	orr.w	r2, r3, #32
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d005      	beq.n	8002ede <HAL_DSI_IRQHandler+0x13a>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d005      	beq.n	8002ef4 <HAL_DSI_IRQHandler+0x150>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_DSI_IRQHandler+0x166>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	615a      	str	r2, [r3, #20]
    }

    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_DSI_IRQHandler+0x17c>
    {
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	615a      	str	r2, [r3, #20]
    }

    /* Check only selected errors */
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_DSI_IRQHandler+0x18a>
#if (USE_HAL_DSI_REGISTER_CALLBACKS == 1)
      /*Call registered Error callback */
      hdsi->ErrorCallback(hdsi);
#else
      /*Call Legacy Error callback */
      HAL_DSI_ErrorCallback(hdsi);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 f80e 	bl	8002f4a <HAL_DSI_ErrorCallback>
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */
    }
  }
}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_DSI_TearingEffectCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef *hdsi)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_TearingEffectCallback could be implemented in the user file
   */
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_DSI_ErrorCallback>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_ErrorCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
	...

08002f60 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	7c1b      	ldrb	r3, [r3, #16]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_DSI_ConfigAdaptedCommandMode+0x16>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e0c5      	b.n	8003102 <HAL_DSI_ConfigAdaptedCommandMode+0x1a2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	635a      	str	r2, [r3, #52]	; 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0201 	bic.w	r2, r2, #1
 8002f9c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f042 0201 	orr.w	r2, r2, #1
 8002fb0:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0203 	bic.w	r2, r2, #3
 8002fc2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68d9      	ldr	r1, [r3, #12]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0207 	bic.w	r2, r2, #7
 8002fe4:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6959      	ldr	r1, [r3, #20]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	69da      	ldr	r2, [r3, #28]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 020f 	bic.w	r2, r2, #15
 8003012:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6919      	ldr	r1, [r3, #16]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 020e 	bic.w	r2, r2, #14
 8003036:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	005a      	lsls	r2, r3, #1
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b2c      	ldr	r3, [pc, #176]	; (8003110 <HAL_DSI_ConfigAdaptedCommandMode+0x1b0>)
 800305e:	400b      	ands	r3, r1
 8003060:	6653      	str	r3, [r2, #100]	; 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	665a      	str	r2, [r3, #100]	; 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003084:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	431a      	orrs	r2, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	431a      	orrs	r2, r3
                            CmdCfg->VSyncPol);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f022 0201 	bic.w	r2, r2, #1
 80030be:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	430a      	orrs	r2, r1
 80030d0:	669a      	str	r2, [r3, #104]	; 0x68

  /* Enable the Tearing Effect interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0202 	orr.w	r2, r2, #2
 80030f6:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	ffff0000 	.word	0xffff0000

08003114 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7c1b      	ldrb	r3, [r3, #16]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_DSI_ConfigCommand+0x16>
 8003126:	2302      	movs	r3, #2
 8003128:	e049      	b.n	80031be <HAL_DSI_ConfigCommand+0xaa>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2201      	movs	r2, #1
 800312e:	741a      	strb	r2, [r3, #16]
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_DSI_ConfigCommand+0xb8>)
 800313c:	400b      	ands	r3, r1
 800313e:	6693      	str	r3, [r2, #104]	; 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6e99      	ldr	r1, [r3, #104]	; 0x68
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
                           LPCmd->LPGenShortWriteOneP | \
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800314e:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortWriteTwoP | \
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
                           LPCmd->LPGenShortWriteOneP | \
 8003154:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadNoP   | \
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
                           LPCmd->LPGenShortWriteTwoP | \
 800315a:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadOneP  | \
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	691b      	ldr	r3, [r3, #16]
                           LPCmd->LPGenShortReadNoP   | \
 8003160:	431a      	orrs	r2, r3
                           LPCmd->LPGenShortReadTwoP  | \
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
                           LPCmd->LPGenShortReadOneP  | \
 8003166:	431a      	orrs	r2, r3
                           LPCmd->LPGenLongWrite      | \
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
                           LPCmd->LPGenShortReadTwoP  | \
 800316c:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteNoP  | \
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
                           LPCmd->LPGenLongWrite      | \
 8003172:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortWriteOneP | \
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	6a1b      	ldr	r3, [r3, #32]
                           LPCmd->LPDcsShortWriteNoP  | \
 8003178:	431a      	orrs	r2, r3
                           LPCmd->LPDcsShortReadNoP   | \
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           LPCmd->LPDcsShortWriteOneP | \
 800317e:	431a      	orrs	r2, r3
                           LPCmd->LPDcsLongWrite      | \
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                           LPCmd->LPDcsShortReadNoP   | \
 8003184:	431a      	orrs	r2, r3
                           LPCmd->LPMaxReadPacket);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                           LPCmd->LPDcsLongWrite      | \
 800318a:	431a      	orrs	r2, r3
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	669a      	str	r2, [r3, #104]	; 0x68

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0202 	bic.w	r2, r2, #2
 80031a2:	669a      	str	r2, [r3, #104]	; 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6e99      	ldr	r1, [r3, #104]	; 0x68
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	fef080ff 	.word	0xfef080ff

080031d0 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	7c1b      	ldrb	r3, [r3, #16]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_DSI_ConfigFlowControl+0x16>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e016      	b.n	8003214 <HAL_DSI_ConfigFlowControl+0x44>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 021f 	bic.w	r2, r2, #31
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdsi->Instance->PCR |= FlowControl;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7c1b      	ldrb	r3, [r3, #16]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_DSI_ConfigPhyTimer+0x16>
 8003232:	2302      	movs	r3, #2
 8003234:	e058      	b.n	80032e8 <HAL_DSI_ConfigPhyTimer+0xc8>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	741a      	strb	r2, [r3, #16]

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4293      	cmp	r3, r2
 8003246:	bf38      	it	cc
 8003248:	4613      	movcc	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f002 22fc 	and.w	r2, r2, #4227922944	; 0xfc00fc00
 800325c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	041a      	lsls	r2, r3, #16
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800328a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	431a      	orrs	r2, r3
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	061b      	lsls	r3, r3, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80032c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	021a      	lsls	r2, r3, #8
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	7c1b      	ldrb	r3, [r3, #16]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_DSI_Start+0x14>
 8003304:	2302      	movs	r3, #2
 8003306:	e02b      	b.n	8003360 <HAL_DSI_Start+0x6c>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0201 	orr.w	r2, r2, #1
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	60fb      	str	r3, [r7, #12]
 800332e:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0208 	orr.w	r2, r2, #8
 8003344:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8003350:	f003 0308 	and.w	r3, r3, #8
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800335e:	2300      	movs	r3, #0
}
 8003360:	4618      	mov	r0, r3
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_DSI_Refresh>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	7c1b      	ldrb	r3, [r3, #16]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_DSI_Refresh+0x14>
 800337c:	2302      	movs	r3, #2
 800337e:	e010      	b.n	80033a2 <HAL_DSI_Refresh+0x36>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	741a      	strb	r2, [r3, #16]

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f042 0204 	orr.w	r2, r2, #4
 8003396:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b088      	sub	sp, #32
 80033b2:	af02      	add	r7, sp, #8
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	7c1b      	ldrb	r3, [r3, #16]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_DSI_ShortWrite+0x1a>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e010      	b.n	80033ea <HAL_DSI_ShortWrite+0x3c>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2201      	movs	r2, #1
 80033cc:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff fb10 	bl	80029fe <DSI_ShortWrite>
 80033de:	4603      	mov	r3, r0
 80033e0:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	741a      	strb	r2, [r3, #16]

  return status;
 80033e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    uint8_t *ParametersTable)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b08c      	sub	sp, #48	; 0x30
 80033f6:	af02      	add	r7, sp, #8
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	607a      	str	r2, [r7, #4]
 80033fe:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  uint8_t *pparams = ParametersTable;
 8003400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003402:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	7c1b      	ldrb	r3, [r3, #16]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_DSI_LongWrite+0x1e>
 800340c:	2302      	movs	r3, #2
 800340e:	e084      	b.n	800351a <HAL_DSI_LongWrite+0x128>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2201      	movs	r2, #1
 8003414:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8003416:	f7fe fe2b 	bl	8002070 <HAL_GetTick>
 800341a:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800341c:	e00c      	b.n	8003438 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800341e:	f7fe fe27 	bl	8002070 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800342c:	d904      	bls.n	8003438 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2200      	movs	r2, #0
 8003432:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e070      	b.n	800351a <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0eb      	beq.n	800341e <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b03      	cmp	r3, #3
 800344e:	bf28      	it	cs
 8003450:	2303      	movcs	r3, #3
 8003452:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 8003454:	2300      	movs	r3, #0
 8003456:	623b      	str	r3, [r7, #32]
 8003458:	e00f      	b.n	800347a <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	4413      	add	r3, r2
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	3301      	adds	r3, #1
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	69fa      	ldr	r2, [r7, #28]
 8003470:	4313      	orrs	r3, r2
 8003472:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	3301      	adds	r3, #1
 8003478:	623b      	str	r3, [r7, #32]
 800347a:	6a3a      	ldr	r2, [r7, #32]
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	429a      	cmp	r2, r3
 8003480:	d3eb      	bcc.n	800345a <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69fa      	ldr	r2, [r7, #28]
 8003488:	671a      	str	r2, [r3, #112]	; 0x70

  uicounter = NbParams - nbBytes;
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	627b      	str	r3, [r7, #36]	; 0x24
  pparams += nbBytes;
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	4413      	add	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800349a:	e028      	b.n	80034ee <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	2b04      	cmp	r3, #4
 80034a0:	bf28      	it	cs
 80034a2:	2304      	movcs	r3, #4
 80034a4:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	623b      	str	r3, [r7, #32]
 80034ae:	e00e      	b.n	80034ce <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	4413      	add	r3, r2
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 80034c8:	6a3b      	ldr	r3, [r7, #32]
 80034ca:	3301      	adds	r3, #1
 80034cc:	623b      	str	r3, [r7, #32]
 80034ce:	6a3a      	ldr	r2, [r7, #32]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d3ec      	bcc.n	80034b0 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	671a      	str	r2, [r3, #112]	; 0x70

    uicounter -= nbBytes;
 80034de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	627b      	str	r3, [r7, #36]	; 0x24
    pparams += nbBytes;
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4413      	add	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1d3      	bne.n	800349c <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 80034fc:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8003504:	b2db      	uxtb	r3, r3
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	4613      	mov	r3, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	f7ff fa5d 	bl	80029cc <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3728      	adds	r7, #40	; 0x28
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b08c      	sub	sp, #48	; 0x30
 8003526:	af02      	add	r7, sp, #8
 8003528:	60f8      	str	r0, [r7, #12]
 800352a:	60b9      	str	r1, [r7, #8]
 800352c:	607a      	str	r2, [r7, #4]
 800352e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint8_t *pdata = Array;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t datasize = Size;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	623b      	str	r3, [r7, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	7c1b      	ldrb	r3, [r3, #16]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d101      	bne.n	8003544 <HAL_DSI_Read+0x22>
 8003540:	2302      	movs	r3, #2
 8003542:	e0ae      	b.n	80036a2 <HAL_DSI_Read+0x180>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2201      	movs	r2, #1
 8003548:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	2b02      	cmp	r3, #2
 800354e:	d913      	bls.n	8003578 <HAL_DSI_Read+0x56>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	b2da      	uxtb	r2, r3
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	0a1b      	lsrs	r3, r3, #8
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8003558:	b2db      	uxtb	r3, r3
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	2237      	movs	r2, #55	; 0x37
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff fa4b 	bl	80029fe <DSI_ShortWrite>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d004      	beq.n	8003578 <HAL_DSI_Read+0x56>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e094      	b.n	80036a2 <HAL_DSI_Read+0x180>
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	2b06      	cmp	r3, #6
 800357c:	d109      	bne.n	8003592 <HAL_DSI_Read+0x70>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003588:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800358a:	68b9      	ldr	r1, [r7, #8]
 800358c:	f7ff fa1e 	bl	80029cc <DSI_ConfigPacketHeader>
 8003590:	e033      	b.n	80035fa <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	2b04      	cmp	r3, #4
 8003596:	d109      	bne.n	80035ac <HAL_DSI_Read+0x8a>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	2300      	movs	r3, #0
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2300      	movs	r3, #0
 80035a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	f7ff fa11 	bl	80029cc <DSI_ConfigPacketHeader>
 80035aa:	e026      	b.n	80035fa <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	2b14      	cmp	r3, #20
 80035b0:	d10c      	bne.n	80035cc <HAL_DSI_Read+0xaa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6818      	ldr	r0, [r3, #0]
 80035b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	2300      	movs	r3, #0
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	4613      	mov	r3, r2
 80035c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	f7ff fa01 	bl	80029cc <DSI_ConfigPacketHeader>
 80035ca:	e016      	b.n	80035fa <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	2b24      	cmp	r3, #36	; 0x24
 80035d0:	d10e      	bne.n	80035f0 <HAL_DSI_Read+0xce>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6818      	ldr	r0, [r3, #0]
 80035d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	461a      	mov	r2, r3
 80035dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035de:	3301      	adds	r3, #1
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	9300      	str	r3, [sp, #0]
 80035e4:	4613      	mov	r3, r2
 80035e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	f7ff f9ef 	bl	80029cc <DSI_ConfigPacketHeader>
 80035ee:	e004      	b.n	80035fa <HAL_DSI_Read+0xd8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e053      	b.n	80036a2 <HAL_DSI_Read+0x180>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80035fa:	f7fe fd39 	bl	8002070 <HAL_GetTick>
 80035fe:	61b8      	str	r0, [r7, #24]

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 8003600:	e048      	b.n	8003694 <HAL_DSI_Read+0x172>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b00      	cmp	r3, #0
 800360e:	d120      	bne.n	8003652 <HAL_DSI_Read+0x130>
    {
      fifoword = hdsi->Instance->GPDR;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003616:	617b      	str	r3, [r7, #20]
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8003618:	6a3b      	ldr	r3, [r7, #32]
 800361a:	2b04      	cmp	r3, #4
 800361c:	bf28      	it	cs
 800361e:	2304      	movcs	r3, #4
 8003620:	613b      	str	r3, [r7, #16]

      for (count = 0U; count < nbbytes; count++)
 8003622:	2300      	movs	r3, #0
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	e010      	b.n	800364a <HAL_DSI_Read+0x128>
      {
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	fa22 f303 	lsr.w	r3, r2, r3
 8003632:	b2da      	uxtb	r2, r3
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	701a      	strb	r2, [r3, #0]
        pdata++;
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	3301      	adds	r3, #1
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
        datasize--;
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	3b01      	subs	r3, #1
 8003642:	623b      	str	r3, [r7, #32]
      for (count = 0U; count < nbbytes; count++)
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	3301      	adds	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	69fa      	ldr	r2, [r7, #28]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	429a      	cmp	r2, r3
 8003650:	d3ea      	bcc.n	8003628 <HAL_DSI_Read+0x106>
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8003652:	f7fe fd0d 	bl	8002070 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003660:	d904      	bls.n	800366c <HAL_DSI_Read+0x14a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e01a      	b.n	80036a2 <HAL_DSI_Read+0x180>

    /* Software workaround to avoid HAL_TIMEOUT when a DSI read command is   */
    /* issued to the panel and the read data is not captured by the DSI Host */
    /* which returns Packet Size Error.                                      */
    /* Need to ensure that the Read command has finished before checking PSE */
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10c      	bne.n	8003694 <HAL_DSI_Read+0x172>
    {
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b20      	cmp	r3, #32
 8003688:	d104      	bne.n	8003694 <HAL_DSI_Read+0x172>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	741a      	strb	r2, [r3, #16]

        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e006      	b.n	80036a2 <HAL_DSI_Read+0x180>
  while (((int32_t)(datasize)) > 0)
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	2b00      	cmp	r3, #0
 8003698:	dcb3      	bgt.n	8003602 <HAL_DSI_Read+0xe0>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3728      	adds	r7, #40	; 0x28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_DSI_ForceRXLowPower>:
  *               the configuration information for the DSI.
  * @param  State  ENABLE or DISABLE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ForceRXLowPower(DSI_HandleTypeDef *hdsi, FunctionalState State)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	70fb      	strb	r3, [r7, #3]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	7c1b      	ldrb	r3, [r3, #16]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_DSI_ForceRXLowPower+0x18>
 80036be:	2302      	movs	r3, #2
 80036c0:	e01b      	b.n	80036fa <HAL_DSI_ForceRXLowPower+0x50>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	741a      	strb	r2, [r3, #16]

  /* Check function parameters */
  assert_param(IS_FUNCTIONAL_STATE(State));

  /* Force/Unforce LP Receiver in Low-Power Mode */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_FLPRXLPM;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80036d8:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
  hdsi->Instance->WPCR[1U] |= ((uint32_t)State << 22U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8d3 141c 	ldr.w	r1, [r3, #1052]	; 0x41c
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	059a      	lsls	r2, r3, #22
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003708:	b480      	push	{r7}
 800370a:	b089      	sub	sp, #36	; 0x24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003716:	4b89      	ldr	r3, [pc, #548]	; (800393c <HAL_GPIO_Init+0x234>)
 8003718:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800371a:	e194      	b.n	8003a46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa01 f303 	lsl.w	r3, r1, r3
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 8186 	beq.w	8003a40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	2b01      	cmp	r3, #1
 800373e:	d005      	beq.n	800374c <HAL_GPIO_Init+0x44>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f003 0303 	and.w	r3, r3, #3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d130      	bne.n	80037ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	2203      	movs	r2, #3
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4013      	ands	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003782:	2201      	movs	r2, #1
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	4013      	ands	r3, r2
 8003790:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	f003 0201 	and.w	r2, r3, #1
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d017      	beq.n	80037ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	2203      	movs	r2, #3
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4013      	ands	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689a      	ldr	r2, [r3, #8]
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d123      	bne.n	800383e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	08da      	lsrs	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3208      	adds	r2, #8
 80037fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	220f      	movs	r2, #15
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	43db      	mvns	r3, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4013      	ands	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	4313      	orrs	r3, r2
 800382e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	08da      	lsrs	r2, r3, #3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3208      	adds	r2, #8
 8003838:	69b9      	ldr	r1, [r7, #24]
 800383a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	2203      	movs	r2, #3
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	43db      	mvns	r3, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4013      	ands	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f003 0203 	and.w	r2, r3, #3
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	69ba      	ldr	r2, [r7, #24]
 8003870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80e0 	beq.w	8003a40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003880:	4b2f      	ldr	r3, [pc, #188]	; (8003940 <HAL_GPIO_Init+0x238>)
 8003882:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003886:	4a2e      	ldr	r2, [pc, #184]	; (8003940 <HAL_GPIO_Init+0x238>)
 8003888:	f043 0302 	orr.w	r3, r3, #2
 800388c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003890:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <HAL_GPIO_Init+0x238>)
 8003892:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800389e:	4a29      	ldr	r2, [pc, #164]	; (8003944 <HAL_GPIO_Init+0x23c>)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	089b      	lsrs	r3, r3, #2
 80038a4:	3302      	adds	r3, #2
 80038a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	220f      	movs	r2, #15
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a20      	ldr	r2, [pc, #128]	; (8003948 <HAL_GPIO_Init+0x240>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d052      	beq.n	8003970 <HAL_GPIO_Init+0x268>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a1f      	ldr	r2, [pc, #124]	; (800394c <HAL_GPIO_Init+0x244>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d031      	beq.n	8003936 <HAL_GPIO_Init+0x22e>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a1e      	ldr	r2, [pc, #120]	; (8003950 <HAL_GPIO_Init+0x248>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d02b      	beq.n	8003932 <HAL_GPIO_Init+0x22a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_GPIO_Init+0x24c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d025      	beq.n	800392e <HAL_GPIO_Init+0x226>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a1c      	ldr	r2, [pc, #112]	; (8003958 <HAL_GPIO_Init+0x250>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01f      	beq.n	800392a <HAL_GPIO_Init+0x222>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a1b      	ldr	r2, [pc, #108]	; (800395c <HAL_GPIO_Init+0x254>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d019      	beq.n	8003926 <HAL_GPIO_Init+0x21e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1a      	ldr	r2, [pc, #104]	; (8003960 <HAL_GPIO_Init+0x258>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_GPIO_Init+0x21a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a19      	ldr	r2, [pc, #100]	; (8003964 <HAL_GPIO_Init+0x25c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00d      	beq.n	800391e <HAL_GPIO_Init+0x216>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a18      	ldr	r2, [pc, #96]	; (8003968 <HAL_GPIO_Init+0x260>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <HAL_GPIO_Init+0x212>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <HAL_GPIO_Init+0x264>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d101      	bne.n	8003916 <HAL_GPIO_Init+0x20e>
 8003912:	2309      	movs	r3, #9
 8003914:	e02d      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 8003916:	230a      	movs	r3, #10
 8003918:	e02b      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 800391a:	2308      	movs	r3, #8
 800391c:	e029      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 800391e:	2307      	movs	r3, #7
 8003920:	e027      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 8003922:	2306      	movs	r3, #6
 8003924:	e025      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 8003926:	2305      	movs	r3, #5
 8003928:	e023      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 800392a:	2304      	movs	r3, #4
 800392c:	e021      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 800392e:	2303      	movs	r3, #3
 8003930:	e01f      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 8003932:	2302      	movs	r3, #2
 8003934:	e01d      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 8003936:	2301      	movs	r3, #1
 8003938:	e01b      	b.n	8003972 <HAL_GPIO_Init+0x26a>
 800393a:	bf00      	nop
 800393c:	58000080 	.word	0x58000080
 8003940:	58024400 	.word	0x58024400
 8003944:	58000400 	.word	0x58000400
 8003948:	58020000 	.word	0x58020000
 800394c:	58020400 	.word	0x58020400
 8003950:	58020800 	.word	0x58020800
 8003954:	58020c00 	.word	0x58020c00
 8003958:	58021000 	.word	0x58021000
 800395c:	58021400 	.word	0x58021400
 8003960:	58021800 	.word	0x58021800
 8003964:	58021c00 	.word	0x58021c00
 8003968:	58022000 	.word	0x58022000
 800396c:	58022400 	.word	0x58022400
 8003970:	2300      	movs	r3, #0
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	f002 0203 	and.w	r2, r2, #3
 8003978:	0092      	lsls	r2, r2, #2
 800397a:	4093      	lsls	r3, r2
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003982:	4938      	ldr	r1, [pc, #224]	; (8003a64 <HAL_GPIO_Init+0x35c>)
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	089b      	lsrs	r3, r3, #2
 8003988:	3302      	adds	r3, #2
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	43db      	mvns	r3, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4013      	ands	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80039b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	4013      	ands	r3, r2
 80039ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80039e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	43db      	mvns	r3, r3
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	4013      	ands	r3, r2
 8003a24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	3301      	adds	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f47f ae63 	bne.w	800371c <HAL_GPIO_Init+0x14>
  }
}
 8003a56:	bf00      	nop
 8003a58:	bf00      	nop
 8003a5a:	3724      	adds	r7, #36	; 0x24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr
 8003a64:	58000400 	.word	0x58000400

08003a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	460b      	mov	r3, r1
 8003a72:	807b      	strh	r3, [r7, #2]
 8003a74:	4613      	mov	r3, r2
 8003a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a78:	787b      	ldrb	r3, [r7, #1]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003a84:	e003      	b.n	8003a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a86:	887b      	ldrh	r3, [r7, #2]
 8003a88:	041a      	lsls	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	619a      	str	r2, [r3, #24]
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d101      	bne.n	8003aae <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e0bf      	b.n	8003c2e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f911 	bl	8003cea <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003ade:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6999      	ldr	r1, [r3, #24]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003af4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6899      	ldr	r1, [r3, #8]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4b4a      	ldr	r3, [pc, #296]	; (8003c38 <HAL_LTDC_Init+0x19c>)
 8003b10:	400b      	ands	r3, r1
 8003b12:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6899      	ldr	r1, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	699a      	ldr	r2, [r3, #24]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68d9      	ldr	r1, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b3e      	ldr	r3, [pc, #248]	; (8003c38 <HAL_LTDC_Init+0x19c>)
 8003b3e:	400b      	ands	r3, r1
 8003b40:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68d9      	ldr	r1, [r3, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1a      	ldr	r2, [r3, #32]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6919      	ldr	r1, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	4b33      	ldr	r3, [pc, #204]	; (8003c38 <HAL_LTDC_Init+0x19c>)
 8003b6c:	400b      	ands	r3, r1
 8003b6e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	041b      	lsls	r3, r3, #16
 8003b76:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6919      	ldr	r1, [r3, #16]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6959      	ldr	r1, [r3, #20]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <HAL_LTDC_Init+0x19c>)
 8003b9a:	400b      	ands	r3, r1
 8003b9c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6959      	ldr	r1, [r3, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003bcc:	041b      	lsls	r3, r3, #16
 8003bce:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0206 	orr.w	r2, r2, #6
 8003c0a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	f000f800 	.word	0xf000f800

08003c3c <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_LTDC_DeInit+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e049      	b.n	8003ce2 <HAL_LTDC_DeInit+0xa6>

  /* Check function parameters */
  assert_param(IS_LTDC_ALL_INSTANCE(hltdc->Instance));

  /* Disable LTDC Layer 1 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3384      	adds	r3, #132	; 0x84
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	3284      	adds	r2, #132	; 0x84
 8003c5c:	f023 0301 	bic.w	r3, r3, #1
 8003c60:	6013      	str	r3, [r2, #0]

#if defined(LTDC_Layer2_BASE)
  /* Disable LTDC Layer 2 */
  __HAL_LTDC_LAYER_DISABLE(hltdc, LTDC_LAYER_2);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	f502 7282 	add.w	r2, r2, #260	; 0x104
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	6013      	str	r3, [r2, #0]
#endif /* LTDC_Layer2_BASE */

  /* Reload during vertical blanking period */
  __HAL_LTDC_VERTICAL_BLANKING_RELOAD_CONFIG(hltdc);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0202 	orr.w	r2, r2, #2
 8003c88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c8a:	f7fe f9f1 	bl	8002070 <HAL_GetTick>
 8003c8e:	60f8      	str	r0, [r7, #12]

  /* Wait for VSYNC Interrupt */
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 8003c90:	e006      	b.n	8003ca0 <HAL_LTDC_DeInit+0x64>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > LTDC_TIMEOUT_VALUE)
 8003c92:	f7fe f9ed 	bl	8002070 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b64      	cmp	r3, #100	; 0x64
 8003c9e:	d807      	bhi.n	8003cb0 <HAL_LTDC_DeInit+0x74>
  while (READ_BIT(hltdc->Instance->CDSR, LTDC_CDSR_VSYNCS) == 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f1      	beq.n	8003c92 <HAL_LTDC_DeInit+0x56>
 8003cae:	e000      	b.n	8003cb2 <HAL_LTDC_DeInit+0x76>
    {
      break;
 8003cb0:	bf00      	nop
    }
  }

  /* Disable LTDC  */
  __HAL_LTDC_DISABLE(hltdc);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0201 	bic.w	r2, r2, #1
 8003cc0:	619a      	str	r2, [r3, #24]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f81b 	bl	8003cfe <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <HAL_LTDC_MspDeInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef *hltdc)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspDeInit could be implemented in the user file
   */
}
 8003d06:	bf00      	nop
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d12:	b5b0      	push	{r4, r5, r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d101      	bne.n	8003d2c <HAL_LTDC_ConfigLayer+0x1a>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e02c      	b.n	8003d86 <HAL_LTDC_ConfigLayer+0x74>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2202      	movs	r2, #2
 8003d38:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2134      	movs	r1, #52	; 0x34
 8003d42:	fb01 f303 	mul.w	r3, r1, r3
 8003d46:	4413      	add	r3, r2
 8003d48:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4614      	mov	r4, r2
 8003d50:	461d      	mov	r5, r3
 8003d52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d5e:	682b      	ldr	r3, [r5, #0]
 8003d60:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 f812 	bl	8003d90 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2201      	movs	r2, #1
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003d90 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b089      	sub	sp, #36	; 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	0c1b      	lsrs	r3, r3, #16
 8003da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dac:	4413      	add	r3, r2
 8003dae:	041b      	lsls	r3, r3, #16
 8003db0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	461a      	mov	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	01db      	lsls	r3, r3, #7
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3384      	adds	r3, #132	; 0x84
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	01d2      	lsls	r2, r2, #7
 8003dcc:	440a      	add	r2, r1
 8003dce:	3284      	adds	r2, #132	; 0x84
 8003dd0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003dd4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003de6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003de8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4619      	mov	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	01db      	lsls	r3, r3, #7
 8003df4:	440b      	add	r3, r1
 8003df6:	3384      	adds	r3, #132	; 0x84
 8003df8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003dfe:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	68da      	ldr	r2, [r3, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e0e:	4413      	add	r3, r2
 8003e10:	041b      	lsls	r3, r3, #16
 8003e12:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	01db      	lsls	r3, r3, #7
 8003e1e:	4413      	add	r3, r2
 8003e20:	3384      	adds	r3, #132	; 0x84
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	6812      	ldr	r2, [r2, #0]
 8003e28:	4611      	mov	r1, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	01d2      	lsls	r2, r2, #7
 8003e2e:	440a      	add	r2, r1
 8003e30:	3284      	adds	r2, #132	; 0x84
 8003e32:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003e36:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e46:	4413      	add	r3, r2
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4619      	mov	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	01db      	lsls	r3, r3, #7
 8003e54:	440b      	add	r3, r1
 8003e56:	3384      	adds	r3, #132	; 0x84
 8003e58:	4619      	mov	r1, r3
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	01db      	lsls	r3, r3, #7
 8003e6a:	4413      	add	r3, r2
 8003e6c:	3384      	adds	r3, #132	; 0x84
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	4611      	mov	r1, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	01d2      	lsls	r2, r2, #7
 8003e7a:	440a      	add	r2, r1
 8003e7c:	3284      	adds	r2, #132	; 0x84
 8003e7e:	f023 0307 	bic.w	r3, r3, #7
 8003e82:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	01db      	lsls	r3, r3, #7
 8003e8e:	4413      	add	r3, r2
 8003e90:	3384      	adds	r3, #132	; 0x84
 8003e92:	461a      	mov	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003ea0:	021b      	lsls	r3, r3, #8
 8003ea2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003eaa:	041b      	lsls	r3, r3, #16
 8003eac:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	061b      	lsls	r3, r3, #24
 8003eb4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	461a      	mov	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	01db      	lsls	r3, r3, #7
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3384      	adds	r3, #132	; 0x84
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	01db      	lsls	r3, r3, #7
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3384      	adds	r3, #132	; 0x84
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4619      	mov	r1, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	01db      	lsls	r3, r3, #7
 8003ef4:	440b      	add	r3, r1
 8003ef6:	3384      	adds	r3, #132	; 0x84
 8003ef8:	4619      	mov	r1, r3
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	461a      	mov	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	01db      	lsls	r3, r3, #7
 8003f0a:	4413      	add	r3, r2
 8003f0c:	3384      	adds	r3, #132	; 0x84
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	6812      	ldr	r2, [r2, #0]
 8003f14:	4611      	mov	r1, r2
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	01d2      	lsls	r2, r2, #7
 8003f1a:	440a      	add	r2, r1
 8003f1c:	3284      	adds	r2, #132	; 0x84
 8003f1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f22:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	01db      	lsls	r3, r3, #7
 8003f2e:	4413      	add	r3, r2
 8003f30:	3384      	adds	r3, #132	; 0x84
 8003f32:	461a      	mov	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	01db      	lsls	r3, r3, #7
 8003f44:	4413      	add	r3, r2
 8003f46:	3384      	adds	r3, #132	; 0x84
 8003f48:	69da      	ldr	r2, [r3, #28]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4619      	mov	r1, r3
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	01db      	lsls	r3, r3, #7
 8003f54:	440b      	add	r3, r1
 8003f56:	3384      	adds	r3, #132	; 0x84
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4b58      	ldr	r3, [pc, #352]	; (80040bc <LTDC_SetConfig+0x32c>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	6a1b      	ldr	r3, [r3, #32]
 8003f68:	68f9      	ldr	r1, [r7, #12]
 8003f6a:	6809      	ldr	r1, [r1, #0]
 8003f6c:	4608      	mov	r0, r1
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	01c9      	lsls	r1, r1, #7
 8003f72:	4401      	add	r1, r0
 8003f74:	3184      	adds	r1, #132	; 0x84
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	01db      	lsls	r3, r3, #7
 8003f84:	4413      	add	r3, r2
 8003f86:	3384      	adds	r3, #132	; 0x84
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	01db      	lsls	r3, r3, #7
 8003f94:	4413      	add	r3, r2
 8003f96:	3384      	adds	r3, #132	; 0x84
 8003f98:	461a      	mov	r2, r3
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	01db      	lsls	r3, r3, #7
 8003fa8:	4413      	add	r3, r2
 8003faa:	3384      	adds	r3, #132	; 0x84
 8003fac:	461a      	mov	r2, r3
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d102      	bne.n	8003fc2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	61fb      	str	r3, [r7, #28]
 8003fc0:	e01b      	b.n	8003ffa <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d102      	bne.n	8003fd0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	e014      	b.n	8003ffa <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d00b      	beq.n	8003ff0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d007      	beq.n	8003ff0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003fe4:	2b03      	cmp	r3, #3
 8003fe6:	d003      	beq.n	8003ff0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003fec:	2b07      	cmp	r3, #7
 8003fee:	d102      	bne.n	8003ff6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	e001      	b.n	8003ffa <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	01db      	lsls	r3, r3, #7
 8004004:	4413      	add	r3, r2
 8004006:	3384      	adds	r3, #132	; 0x84
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	4611      	mov	r1, r2
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	01d2      	lsls	r2, r2, #7
 8004014:	440a      	add	r2, r1
 8004016:	3284      	adds	r2, #132	; 0x84
 8004018:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800401c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	fb02 f303 	mul.w	r3, r2, r3
 8004028:	041a      	lsls	r2, r3, #16
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	6859      	ldr	r1, [r3, #4]
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	1acb      	subs	r3, r1, r3
 8004034:	69f9      	ldr	r1, [r7, #28]
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	3307      	adds	r3, #7
 800403c:	68f9      	ldr	r1, [r7, #12]
 800403e:	6809      	ldr	r1, [r1, #0]
 8004040:	4608      	mov	r0, r1
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	01c9      	lsls	r1, r1, #7
 8004046:	4401      	add	r1, r0
 8004048:	3184      	adds	r1, #132	; 0x84
 800404a:	4313      	orrs	r3, r2
 800404c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	01db      	lsls	r3, r3, #7
 8004058:	4413      	add	r3, r2
 800405a:	3384      	adds	r3, #132	; 0x84
 800405c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4619      	mov	r1, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	01db      	lsls	r3, r3, #7
 8004068:	440b      	add	r3, r1
 800406a:	3384      	adds	r3, #132	; 0x84
 800406c:	4619      	mov	r1, r3
 800406e:	4b14      	ldr	r3, [pc, #80]	; (80040c0 <LTDC_SetConfig+0x330>)
 8004070:	4013      	ands	r3, r2
 8004072:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	461a      	mov	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	01db      	lsls	r3, r3, #7
 800407e:	4413      	add	r3, r2
 8004080:	3384      	adds	r3, #132	; 0x84
 8004082:	461a      	mov	r2, r3
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	461a      	mov	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	01db      	lsls	r3, r3, #7
 8004094:	4413      	add	r3, r2
 8004096:	3384      	adds	r3, #132	; 0x84
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	4611      	mov	r1, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	01d2      	lsls	r2, r2, #7
 80040a4:	440a      	add	r2, r1
 80040a6:	3284      	adds	r2, #132	; 0x84
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6013      	str	r3, [r2, #0]
}
 80040ae:	bf00      	nop
 80040b0:	3724      	adds	r7, #36	; 0x24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	fffff8f8 	.word	0xfffff8f8
 80040c0:	fffff800 	.word	0xfffff800

080040c4 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040cc:	f7fd ffd0 	bl	8002070 <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e03b      	b.n	8004154 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2202      	movs	r2, #2
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80040fc:	e00f      	b.n	800411e <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80040fe:	f7fd ffb7 	bl	8002070 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b05      	cmp	r3, #5
 800410a:	d908      	bls.n	800411e <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2240      	movs	r2, #64	; 0x40
 8004110:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2203      	movs	r2, #3
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e01a      	b.n	8004154 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1e8      	bne.n	80040fe <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f86d 	bl	800420c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e048      	b.n	8004200 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68da      	ldr	r2, [r3, #12]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2200      	movs	r2, #0
 8004184:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2200      	movs	r2, #0
 800418c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2200      	movs	r2, #0
 8004194:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	2200      	movs	r2, #0
 800419c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2200      	movs	r2, #0
 80041a4:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2200      	movs	r2, #0
 80041ac:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2200      	movs	r2, #0
 80041b4:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2200      	movs	r2, #0
 80041bc:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2200      	movs	r2, #0
 80041c4:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2200      	movs	r2, #0
 80041cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	221f      	movs	r2, #31
 80041d4:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68d9      	ldr	r1, [r3, #12]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004232:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
 8004238:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800423e:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800424a:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004250:	3b01      	subs	r3, #1
 8004252:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 8004254:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8004260:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8004262:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426c:	d107      	bne.n	800427e <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800427c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2200      	movs	r2, #0
 8004284:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	2b00      	cmp	r3, #0
 800428c:	da11      	bge.n	80042b2 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	695a      	ldr	r2, [r3, #20]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800429c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042a2:	425b      	negs	r3, r3
 80042a4:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	b292      	uxth	r2, r2
 80042ae:	621a      	str	r2, [r3, #32]
 80042b0:	e006      	b.n	80042c0 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042b6:	461a      	mov	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	b292      	uxth	r2, r2
 80042be:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da15      	bge.n	80042f4 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	695a      	ldr	r2, [r3, #20]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80042d6:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042dc:	425b      	negs	r3, r3
 80042de:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6a19      	ldr	r1, [r3, #32]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	041a      	lsls	r2, r3, #16
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	621a      	str	r2, [r3, #32]
 80042f2:	e009      	b.n	8004308 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6a19      	ldr	r1, [r3, #32]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	041a      	lsls	r2, r3, #16
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d006      	beq.n	8004320 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	629a      	str	r2, [r3, #40]	; 0x28
 800431e:	e003      	b.n	8004328 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2200      	movs	r2, #0
 8004326:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2200      	movs	r2, #0
 800432e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004330:	bf00      	nop
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004344:	4b29      	ldr	r3, [pc, #164]	; (80043ec <HAL_PWREx_ConfigSupply+0xb0>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	2b06      	cmp	r3, #6
 800434e:	d00a      	beq.n	8004366 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004350:	4b26      	ldr	r3, [pc, #152]	; (80043ec <HAL_PWREx_ConfigSupply+0xb0>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	429a      	cmp	r2, r3
 800435c:	d001      	beq.n	8004362 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e040      	b.n	80043e4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e03e      	b.n	80043e4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004366:	4b21      	ldr	r3, [pc, #132]	; (80043ec <HAL_PWREx_ConfigSupply+0xb0>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800436e:	491f      	ldr	r1, [pc, #124]	; (80043ec <HAL_PWREx_ConfigSupply+0xb0>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4313      	orrs	r3, r2
 8004374:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004376:	f7fd fe7b 	bl	8002070 <HAL_GetTick>
 800437a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800437c:	e009      	b.n	8004392 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800437e:	f7fd fe77 	bl	8002070 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800438c:	d901      	bls.n	8004392 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e028      	b.n	80043e4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004392:	4b16      	ldr	r3, [pc, #88]	; (80043ec <HAL_PWREx_ConfigSupply+0xb0>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800439a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800439e:	d1ee      	bne.n	800437e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b1e      	cmp	r3, #30
 80043a4:	d008      	beq.n	80043b8 <HAL_PWREx_ConfigSupply+0x7c>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b2e      	cmp	r3, #46	; 0x2e
 80043aa:	d005      	beq.n	80043b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b1d      	cmp	r3, #29
 80043b0:	d002      	beq.n	80043b8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b2d      	cmp	r3, #45	; 0x2d
 80043b6:	d114      	bne.n	80043e2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80043b8:	f7fd fe5a 	bl	8002070 <HAL_GetTick>
 80043bc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043be:	e009      	b.n	80043d4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043c0:	f7fd fe56 	bl	8002070 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ce:	d901      	bls.n	80043d4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e007      	b.n	80043e4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_PWREx_ConfigSupply+0xb0>)
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e0:	d1ee      	bne.n	80043c0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	58024800 	.word	0x58024800

080043f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08c      	sub	sp, #48	; 0x30
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d102      	bne.n	8004404 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	f000 bc48 	b.w	8004c94 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8088 	beq.w	8004522 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004412:	4b99      	ldr	r3, [pc, #612]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800441c:	4b96      	ldr	r3, [pc, #600]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	2b10      	cmp	r3, #16
 8004426:	d007      	beq.n	8004438 <HAL_RCC_OscConfig+0x48>
 8004428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442a:	2b18      	cmp	r3, #24
 800442c:	d111      	bne.n	8004452 <HAL_RCC_OscConfig+0x62>
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d10c      	bne.n	8004452 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004438:	4b8f      	ldr	r3, [pc, #572]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d06d      	beq.n	8004520 <HAL_RCC_OscConfig+0x130>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d169      	bne.n	8004520 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	f000 bc21 	b.w	8004c94 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445a:	d106      	bne.n	800446a <HAL_RCC_OscConfig+0x7a>
 800445c:	4b86      	ldr	r3, [pc, #536]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a85      	ldr	r2, [pc, #532]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	e02e      	b.n	80044c8 <HAL_RCC_OscConfig+0xd8>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10c      	bne.n	800448c <HAL_RCC_OscConfig+0x9c>
 8004472:	4b81      	ldr	r3, [pc, #516]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a80      	ldr	r2, [pc, #512]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4b7e      	ldr	r3, [pc, #504]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a7d      	ldr	r2, [pc, #500]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	e01d      	b.n	80044c8 <HAL_RCC_OscConfig+0xd8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004494:	d10c      	bne.n	80044b0 <HAL_RCC_OscConfig+0xc0>
 8004496:	4b78      	ldr	r3, [pc, #480]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a77      	ldr	r2, [pc, #476]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 800449c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4b75      	ldr	r3, [pc, #468]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a74      	ldr	r2, [pc, #464]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80044a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e00b      	b.n	80044c8 <HAL_RCC_OscConfig+0xd8>
 80044b0:	4b71      	ldr	r3, [pc, #452]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a70      	ldr	r2, [pc, #448]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80044b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	4b6e      	ldr	r3, [pc, #440]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a6d      	ldr	r2, [pc, #436]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80044c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d013      	beq.n	80044f8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fd fdce 	bl	8002070 <HAL_GetTick>
 80044d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fd fdca 	bl	8002070 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e3d4      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044ea:	4b63      	ldr	r3, [pc, #396]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0xe8>
 80044f6:	e014      	b.n	8004522 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fd fdba 	bl	8002070 <HAL_GetTick>
 80044fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004500:	f7fd fdb6 	bl	8002070 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	; 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e3c0      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004512:	4b59      	ldr	r3, [pc, #356]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x110>
 800451e:	e000      	b.n	8004522 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	f000 80ca 	beq.w	80046c4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004530:	4b51      	ldr	r3, [pc, #324]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004538:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800453a:	4b4f      	ldr	r3, [pc, #316]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <HAL_RCC_OscConfig+0x166>
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	2b18      	cmp	r3, #24
 800454a:	d156      	bne.n	80045fa <HAL_RCC_OscConfig+0x20a>
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0303 	and.w	r3, r3, #3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d151      	bne.n	80045fa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004556:	4b48      	ldr	r3, [pc, #288]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0304 	and.w	r3, r3, #4
 800455e:	2b00      	cmp	r3, #0
 8004560:	d005      	beq.n	800456e <HAL_RCC_OscConfig+0x17e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e392      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800456e:	4b42      	ldr	r3, [pc, #264]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 0219 	bic.w	r2, r3, #25
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	493f      	ldr	r1, [pc, #252]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004580:	f7fd fd76 	bl	8002070 <HAL_GetTick>
 8004584:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004586:	e008      	b.n	800459a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004588:	f7fd fd72 	bl	8002070 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	2b02      	cmp	r3, #2
 8004594:	d901      	bls.n	800459a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004596:	2303      	movs	r3, #3
 8004598:	e37c      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800459a:	4b37      	ldr	r3, [pc, #220]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0f0      	beq.n	8004588 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045a6:	f7fd fd93 	bl	80020d0 <HAL_GetREVID>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d817      	bhi.n	80045e4 <HAL_RCC_OscConfig+0x1f4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d108      	bne.n	80045ce <HAL_RCC_OscConfig+0x1de>
 80045bc:	4b2e      	ldr	r3, [pc, #184]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045c4:	4a2c      	ldr	r2, [pc, #176]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80045c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045ca:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045cc:	e07a      	b.n	80046c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ce:	4b2a      	ldr	r3, [pc, #168]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	031b      	lsls	r3, r3, #12
 80045dc:	4926      	ldr	r1, [pc, #152]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045e2:	e06f      	b.n	80046c4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e4:	4b24      	ldr	r3, [pc, #144]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	061b      	lsls	r3, r3, #24
 80045f2:	4921      	ldr	r1, [pc, #132]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045f8:	e064      	b.n	80046c4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d047      	beq.n	8004692 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004602:	4b1d      	ldr	r3, [pc, #116]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f023 0219 	bic.w	r2, r3, #25
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	491a      	ldr	r1, [pc, #104]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004610:	4313      	orrs	r3, r2
 8004612:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fd fd2c 	bl	8002070 <HAL_GetTick>
 8004618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800461c:	f7fd fd28 	bl	8002070 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e332      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800462e:	4b12      	ldr	r3, [pc, #72]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b00      	cmp	r3, #0
 8004638:	d0f0      	beq.n	800461c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463a:	f7fd fd49 	bl	80020d0 <HAL_GetREVID>
 800463e:	4603      	mov	r3, r0
 8004640:	f241 0203 	movw	r2, #4099	; 0x1003
 8004644:	4293      	cmp	r3, r2
 8004646:	d819      	bhi.n	800467c <HAL_RCC_OscConfig+0x28c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b40      	cmp	r3, #64	; 0x40
 800464e:	d108      	bne.n	8004662 <HAL_RCC_OscConfig+0x272>
 8004650:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004658:	4a07      	ldr	r2, [pc, #28]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 800465a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800465e:	6053      	str	r3, [r2, #4]
 8004660:	e030      	b.n	80046c4 <HAL_RCC_OscConfig+0x2d4>
 8004662:	4b05      	ldr	r3, [pc, #20]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	031b      	lsls	r3, r3, #12
 8004670:	4901      	ldr	r1, [pc, #4]	; (8004678 <HAL_RCC_OscConfig+0x288>)
 8004672:	4313      	orrs	r3, r2
 8004674:	604b      	str	r3, [r1, #4]
 8004676:	e025      	b.n	80046c4 <HAL_RCC_OscConfig+0x2d4>
 8004678:	58024400 	.word	0x58024400
 800467c:	4b9a      	ldr	r3, [pc, #616]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	4997      	ldr	r1, [pc, #604]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
 8004690:	e018      	b.n	80046c4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004692:	4b95      	ldr	r3, [pc, #596]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a94      	ldr	r2, [pc, #592]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 8004698:	f023 0301 	bic.w	r3, r3, #1
 800469c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fd fce7 	bl	8002070 <HAL_GetTick>
 80046a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046a6:	f7fd fce3 	bl	8002070 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e2ed      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80046b8:	4b8b      	ldr	r3, [pc, #556]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1f0      	bne.n	80046a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80a9 	beq.w	8004824 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046d2:	4b85      	ldr	r3, [pc, #532]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046dc:	4b82      	ldr	r3, [pc, #520]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	2b08      	cmp	r3, #8
 80046e6:	d007      	beq.n	80046f8 <HAL_RCC_OscConfig+0x308>
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b18      	cmp	r3, #24
 80046ec:	d13a      	bne.n	8004764 <HAL_RCC_OscConfig+0x374>
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d135      	bne.n	8004764 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046f8:	4b7b      	ldr	r3, [pc, #492]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_OscConfig+0x320>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	2b80      	cmp	r3, #128	; 0x80
 800470a:	d001      	beq.n	8004710 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e2c1      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004710:	f7fd fcde 	bl	80020d0 <HAL_GetREVID>
 8004714:	4603      	mov	r3, r0
 8004716:	f241 0203 	movw	r2, #4099	; 0x1003
 800471a:	4293      	cmp	r3, r2
 800471c:	d817      	bhi.n	800474e <HAL_RCC_OscConfig+0x35e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	2b20      	cmp	r3, #32
 8004724:	d108      	bne.n	8004738 <HAL_RCC_OscConfig+0x348>
 8004726:	4b70      	ldr	r3, [pc, #448]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800472e:	4a6e      	ldr	r2, [pc, #440]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 8004730:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004734:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004736:	e075      	b.n	8004824 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004738:	4b6b      	ldr	r3, [pc, #428]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	069b      	lsls	r3, r3, #26
 8004746:	4968      	ldr	r1, [pc, #416]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 8004748:	4313      	orrs	r3, r2
 800474a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800474c:	e06a      	b.n	8004824 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800474e:	4b66      	ldr	r3, [pc, #408]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	061b      	lsls	r3, r3, #24
 800475c:	4962      	ldr	r1, [pc, #392]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 800475e:	4313      	orrs	r3, r2
 8004760:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004762:	e05f      	b.n	8004824 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	69db      	ldr	r3, [r3, #28]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d042      	beq.n	80047f2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800476c:	4b5e      	ldr	r3, [pc, #376]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a5d      	ldr	r2, [pc, #372]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 8004772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fd fc7a 	bl	8002070 <HAL_GetTick>
 800477c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800477e:	e008      	b.n	8004792 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004780:	f7fd fc76 	bl	8002070 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	d901      	bls.n	8004792 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e280      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004792:	4b55      	ldr	r3, [pc, #340]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d0f0      	beq.n	8004780 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800479e:	f7fd fc97 	bl	80020d0 <HAL_GetREVID>
 80047a2:	4603      	mov	r3, r0
 80047a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d817      	bhi.n	80047dc <HAL_RCC_OscConfig+0x3ec>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d108      	bne.n	80047c6 <HAL_RCC_OscConfig+0x3d6>
 80047b4:	4b4c      	ldr	r3, [pc, #304]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80047bc:	4a4a      	ldr	r2, [pc, #296]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80047be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047c2:	6053      	str	r3, [r2, #4]
 80047c4:	e02e      	b.n	8004824 <HAL_RCC_OscConfig+0x434>
 80047c6:	4b48      	ldr	r3, [pc, #288]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	069b      	lsls	r3, r3, #26
 80047d4:	4944      	ldr	r1, [pc, #272]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	604b      	str	r3, [r1, #4]
 80047da:	e023      	b.n	8004824 <HAL_RCC_OscConfig+0x434>
 80047dc:	4b42      	ldr	r3, [pc, #264]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	493f      	ldr	r1, [pc, #252]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60cb      	str	r3, [r1, #12]
 80047f0:	e018      	b.n	8004824 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047f2:	4b3d      	ldr	r3, [pc, #244]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a3c      	ldr	r2, [pc, #240]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80047f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fe:	f7fd fc37 	bl	8002070 <HAL_GetTick>
 8004802:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004806:	f7fd fc33 	bl	8002070 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e23d      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004818:	4b33      	ldr	r3, [pc, #204]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1f0      	bne.n	8004806 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0308 	and.w	r3, r3, #8
 800482c:	2b00      	cmp	r3, #0
 800482e:	d036      	beq.n	800489e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d019      	beq.n	800486c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004838:	4b2b      	ldr	r3, [pc, #172]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 800483a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483c:	4a2a      	ldr	r2, [pc, #168]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 800483e:	f043 0301 	orr.w	r3, r3, #1
 8004842:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004844:	f7fd fc14 	bl	8002070 <HAL_GetTick>
 8004848:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800484c:	f7fd fc10 	bl	8002070 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b02      	cmp	r3, #2
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e21a      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800485e:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 8004860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d0f0      	beq.n	800484c <HAL_RCC_OscConfig+0x45c>
 800486a:	e018      	b.n	800489e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800486c:	4b1e      	ldr	r3, [pc, #120]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 800486e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004870:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 8004872:	f023 0301 	bic.w	r3, r3, #1
 8004876:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fd fbfa 	bl	8002070 <HAL_GetTick>
 800487c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800487e:	e008      	b.n	8004892 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004880:	f7fd fbf6 	bl	8002070 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	2b02      	cmp	r3, #2
 800488c:	d901      	bls.n	8004892 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e200      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004892:	4b15      	ldr	r3, [pc, #84]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 8004894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004896:	f003 0302 	and.w	r3, r3, #2
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1f0      	bne.n	8004880 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d039      	beq.n	800491e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d01c      	beq.n	80048ec <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80048b2:	4b0d      	ldr	r3, [pc, #52]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a0c      	ldr	r2, [pc, #48]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80048b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80048bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048be:	f7fd fbd7 	bl	8002070 <HAL_GetTick>
 80048c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048c6:	f7fd fbd3 	bl	8002070 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e1dd      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <HAL_RCC_OscConfig+0x4f8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d0f0      	beq.n	80048c6 <HAL_RCC_OscConfig+0x4d6>
 80048e4:	e01b      	b.n	800491e <HAL_RCC_OscConfig+0x52e>
 80048e6:	bf00      	nop
 80048e8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048ec:	4b9b      	ldr	r3, [pc, #620]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a9a      	ldr	r2, [pc, #616]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 80048f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048f8:	f7fd fbba 	bl	8002070 <HAL_GetTick>
 80048fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048fe:	e008      	b.n	8004912 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004900:	f7fd fbb6 	bl	8002070 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	2b02      	cmp	r3, #2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e1c0      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004912:	4b92      	ldr	r3, [pc, #584]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f0      	bne.n	8004900 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 8081 	beq.w	8004a2e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800492c:	4b8c      	ldr	r3, [pc, #560]	; (8004b60 <HAL_RCC_OscConfig+0x770>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a8b      	ldr	r2, [pc, #556]	; (8004b60 <HAL_RCC_OscConfig+0x770>)
 8004932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004936:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004938:	f7fd fb9a 	bl	8002070 <HAL_GetTick>
 800493c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004940:	f7fd fb96 	bl	8002070 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b64      	cmp	r3, #100	; 0x64
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e1a0      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004952:	4b83      	ldr	r3, [pc, #524]	; (8004b60 <HAL_RCC_OscConfig+0x770>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d0f0      	beq.n	8004940 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d106      	bne.n	8004974 <HAL_RCC_OscConfig+0x584>
 8004966:	4b7d      	ldr	r3, [pc, #500]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496a:	4a7c      	ldr	r2, [pc, #496]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6713      	str	r3, [r2, #112]	; 0x70
 8004972:	e02d      	b.n	80049d0 <HAL_RCC_OscConfig+0x5e0>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10c      	bne.n	8004996 <HAL_RCC_OscConfig+0x5a6>
 800497c:	4b77      	ldr	r3, [pc, #476]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 800497e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004980:	4a76      	ldr	r2, [pc, #472]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004982:	f023 0301 	bic.w	r3, r3, #1
 8004986:	6713      	str	r3, [r2, #112]	; 0x70
 8004988:	4b74      	ldr	r3, [pc, #464]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 800498a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498c:	4a73      	ldr	r2, [pc, #460]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 800498e:	f023 0304 	bic.w	r3, r3, #4
 8004992:	6713      	str	r3, [r2, #112]	; 0x70
 8004994:	e01c      	b.n	80049d0 <HAL_RCC_OscConfig+0x5e0>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b05      	cmp	r3, #5
 800499c:	d10c      	bne.n	80049b8 <HAL_RCC_OscConfig+0x5c8>
 800499e:	4b6f      	ldr	r3, [pc, #444]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a2:	4a6e      	ldr	r2, [pc, #440]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 80049a4:	f043 0304 	orr.w	r3, r3, #4
 80049a8:	6713      	str	r3, [r2, #112]	; 0x70
 80049aa:	4b6c      	ldr	r3, [pc, #432]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ae:	4a6b      	ldr	r2, [pc, #428]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	6713      	str	r3, [r2, #112]	; 0x70
 80049b6:	e00b      	b.n	80049d0 <HAL_RCC_OscConfig+0x5e0>
 80049b8:	4b68      	ldr	r3, [pc, #416]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 80049ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049bc:	4a67      	ldr	r2, [pc, #412]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 80049be:	f023 0301 	bic.w	r3, r3, #1
 80049c2:	6713      	str	r3, [r2, #112]	; 0x70
 80049c4:	4b65      	ldr	r3, [pc, #404]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 80049c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c8:	4a64      	ldr	r2, [pc, #400]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 80049ca:	f023 0304 	bic.w	r3, r3, #4
 80049ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d015      	beq.n	8004a04 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d8:	f7fd fb4a 	bl	8002070 <HAL_GetTick>
 80049dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049de:	e00a      	b.n	80049f6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e0:	f7fd fb46 	bl	8002070 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e14e      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049f6:	4b59      	ldr	r3, [pc, #356]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 80049f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0ee      	beq.n	80049e0 <HAL_RCC_OscConfig+0x5f0>
 8004a02:	e014      	b.n	8004a2e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fd fb34 	bl	8002070 <HAL_GetTick>
 8004a08:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a0a:	e00a      	b.n	8004a22 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a0c:	f7fd fb30 	bl	8002070 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e138      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a22:	4b4e      	ldr	r3, [pc, #312]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1ee      	bne.n	8004a0c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f000 812d 	beq.w	8004c92 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a38:	4b48      	ldr	r3, [pc, #288]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a40:	2b18      	cmp	r3, #24
 8004a42:	f000 80bd 	beq.w	8004bc0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	f040 809e 	bne.w	8004b8c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a50:	4b42      	ldr	r3, [pc, #264]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a41      	ldr	r2, [pc, #260]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fd fb08 	bl	8002070 <HAL_GetTick>
 8004a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fd fb04 	bl	8002070 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e10e      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a76:	4b39      	ldr	r3, [pc, #228]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a82:	4b36      	ldr	r3, [pc, #216]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a86:	4b37      	ldr	r3, [pc, #220]	; (8004b64 <HAL_RCC_OscConfig+0x774>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a92:	0112      	lsls	r2, r2, #4
 8004a94:	430a      	orrs	r2, r1
 8004a96:	4931      	ldr	r1, [pc, #196]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	025b      	lsls	r3, r3, #9
 8004aae:	b29b      	uxth	r3, r3
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	041b      	lsls	r3, r3, #16
 8004aba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	061b      	lsls	r3, r3, #24
 8004ac8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004acc:	4923      	ldr	r1, [pc, #140]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ad2:	4b22      	ldr	r3, [pc, #136]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	4a21      	ldr	r2, [pc, #132]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004ad8:	f023 0301 	bic.w	r3, r3, #1
 8004adc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ade:	4b1f      	ldr	r3, [pc, #124]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae2:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <HAL_RCC_OscConfig+0x778>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004aea:	00d2      	lsls	r2, r2, #3
 8004aec:	491b      	ldr	r1, [pc, #108]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004af2:	4b1a      	ldr	r3, [pc, #104]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	f023 020c 	bic.w	r2, r3, #12
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	4917      	ldr	r1, [pc, #92]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b04:	4b15      	ldr	r3, [pc, #84]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f023 0202 	bic.w	r2, r3, #2
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b10:	4912      	ldr	r1, [pc, #72]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b16:	4b11      	ldr	r3, [pc, #68]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1a:	4a10      	ldr	r2, [pc, #64]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b22:	4b0e      	ldr	r3, [pc, #56]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b26:	4a0d      	ldr	r2, [pc, #52]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	4a0a      	ldr	r2, [pc, #40]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b3e:	4a07      	ldr	r2, [pc, #28]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a04      	ldr	r2, [pc, #16]	; (8004b5c <HAL_RCC_OscConfig+0x76c>)
 8004b4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b52:	f7fd fa8d 	bl	8002070 <HAL_GetTick>
 8004b56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b58:	e011      	b.n	8004b7e <HAL_RCC_OscConfig+0x78e>
 8004b5a:	bf00      	nop
 8004b5c:	58024400 	.word	0x58024400
 8004b60:	58024800 	.word	0x58024800
 8004b64:	fffffc0c 	.word	0xfffffc0c
 8004b68:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b6c:	f7fd fa80 	bl	8002070 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e08a      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b7e:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x77c>
 8004b8a:	e082      	b.n	8004c92 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b8c:	4b43      	ldr	r3, [pc, #268]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a42      	ldr	r2, [pc, #264]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004b92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fd fa6a 	bl	8002070 <HAL_GetTick>
 8004b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba0:	f7fd fa66 	bl	8002070 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e070      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bb2:	4b3a      	ldr	r3, [pc, #232]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1f0      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x7b0>
 8004bbe:	e068      	b.n	8004c92 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004bc0:	4b36      	ldr	r3, [pc, #216]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bc6:	4b35      	ldr	r3, [pc, #212]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d031      	beq.n	8004c38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f003 0203 	and.w	r2, r3, #3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d12a      	bne.n	8004c38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	091b      	lsrs	r3, r3, #4
 8004be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d122      	bne.n	8004c38 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d11a      	bne.n	8004c38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	0a5b      	lsrs	r3, r3, #9
 8004c06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c0e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d111      	bne.n	8004c38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	0c1b      	lsrs	r3, r3, #16
 8004c18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d108      	bne.n	8004c38 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	0e1b      	lsrs	r3, r3, #24
 8004c2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c32:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d001      	beq.n	8004c3c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e02b      	b.n	8004c94 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c3c:	4b17      	ldr	r3, [pc, #92]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c40:	08db      	lsrs	r3, r3, #3
 8004c42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c46:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d01f      	beq.n	8004c92 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c52:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004c58:	f023 0301 	bic.w	r3, r3, #1
 8004c5c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c5e:	f7fd fa07 	bl	8002070 <HAL_GetTick>
 8004c62:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c64:	bf00      	nop
 8004c66:	f7fd fa03 	bl	8002070 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d0f9      	beq.n	8004c66 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c72:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <HAL_RCC_OscConfig+0x8b0>)
 8004c78:	4013      	ands	r3, r2
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c7e:	00d2      	lsls	r2, r2, #3
 8004c80:	4906      	ldr	r1, [pc, #24]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004c86:	4b05      	ldr	r3, [pc, #20]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8a:	4a04      	ldr	r2, [pc, #16]	; (8004c9c <HAL_RCC_OscConfig+0x8ac>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3730      	adds	r7, #48	; 0x30
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	58024400 	.word	0x58024400
 8004ca0:	ffff0007 	.word	0xffff0007

08004ca4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d101      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e19c      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cb8:	4b8a      	ldr	r3, [pc, #552]	; (8004ee4 <HAL_RCC_ClockConfig+0x240>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 030f 	and.w	r3, r3, #15
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d910      	bls.n	8004ce8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc6:	4b87      	ldr	r3, [pc, #540]	; (8004ee4 <HAL_RCC_ClockConfig+0x240>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f023 020f 	bic.w	r2, r3, #15
 8004cce:	4985      	ldr	r1, [pc, #532]	; (8004ee4 <HAL_RCC_ClockConfig+0x240>)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd6:	4b83      	ldr	r3, [pc, #524]	; (8004ee4 <HAL_RCC_ClockConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e184      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d010      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	4b7b      	ldr	r3, [pc, #492]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d908      	bls.n	8004d16 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d04:	4b78      	ldr	r3, [pc, #480]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	4975      	ldr	r1, [pc, #468]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d010      	beq.n	8004d44 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	695a      	ldr	r2, [r3, #20]
 8004d26:	4b70      	ldr	r3, [pc, #448]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d908      	bls.n	8004d44 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004d32:	4b6d      	ldr	r3, [pc, #436]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	496a      	ldr	r1, [pc, #424]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0310 	and.w	r3, r3, #16
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d010      	beq.n	8004d72 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	4b64      	ldr	r3, [pc, #400]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d908      	bls.n	8004d72 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d60:	4b61      	ldr	r3, [pc, #388]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004d62:	69db      	ldr	r3, [r3, #28]
 8004d64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	495e      	ldr	r1, [pc, #376]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d010      	beq.n	8004da0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	4b59      	ldr	r3, [pc, #356]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d908      	bls.n	8004da0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d8e:	4b56      	ldr	r3, [pc, #344]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	4953      	ldr	r1, [pc, #332]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d010      	beq.n	8004dce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	68da      	ldr	r2, [r3, #12]
 8004db0:	4b4d      	ldr	r3, [pc, #308]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d908      	bls.n	8004dce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dbc:	4b4a      	ldr	r3, [pc, #296]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	f023 020f 	bic.w	r2, r3, #15
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4947      	ldr	r1, [pc, #284]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d055      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004dda:	4b43      	ldr	r3, [pc, #268]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	4940      	ldr	r1, [pc, #256]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d107      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004df4:	4b3c      	ldr	r3, [pc, #240]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d121      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0f6      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d107      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e0c:	4b36      	ldr	r3, [pc, #216]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d115      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0ea      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d107      	bne.n	8004e34 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004e24:	4b30      	ldr	r3, [pc, #192]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d109      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e0de      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004e34:	4b2c      	ldr	r3, [pc, #176]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e0d6      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e44:	4b28      	ldr	r3, [pc, #160]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	f023 0207 	bic.w	r2, r3, #7
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4925      	ldr	r1, [pc, #148]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e56:	f7fd f90b 	bl	8002070 <HAL_GetTick>
 8004e5a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5c:	e00a      	b.n	8004e74 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e5e:	f7fd f907 	bl	8002070 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e0be      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e74:	4b1c      	ldr	r3, [pc, #112]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d1eb      	bne.n	8004e5e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d010      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d208      	bcs.n	8004eb4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea2:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	f023 020f 	bic.w	r2, r3, #15
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	490e      	ldr	r1, [pc, #56]	; (8004ee8 <HAL_RCC_ClockConfig+0x244>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <HAL_RCC_ClockConfig+0x240>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 030f 	and.w	r3, r3, #15
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d214      	bcs.n	8004eec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec2:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <HAL_RCC_ClockConfig+0x240>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f023 020f 	bic.w	r2, r3, #15
 8004eca:	4906      	ldr	r1, [pc, #24]	; (8004ee4 <HAL_RCC_ClockConfig+0x240>)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed2:	4b04      	ldr	r3, [pc, #16]	; (8004ee4 <HAL_RCC_ClockConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d005      	beq.n	8004eec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e086      	b.n	8004ff2 <HAL_RCC_ClockConfig+0x34e>
 8004ee4:	52002000 	.word	0x52002000
 8004ee8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d010      	beq.n	8004f1a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691a      	ldr	r2, [r3, #16]
 8004efc:	4b3f      	ldr	r3, [pc, #252]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d208      	bcs.n	8004f1a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f08:	4b3c      	ldr	r3, [pc, #240]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	4939      	ldr	r1, [pc, #228]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 0308 	and.w	r3, r3, #8
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d010      	beq.n	8004f48 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	695a      	ldr	r2, [r3, #20]
 8004f2a:	4b34      	ldr	r3, [pc, #208]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d208      	bcs.n	8004f48 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f36:	4b31      	ldr	r3, [pc, #196]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	492e      	ldr	r1, [pc, #184]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0310 	and.w	r3, r3, #16
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d010      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699a      	ldr	r2, [r3, #24]
 8004f58:	4b28      	ldr	r3, [pc, #160]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004f5a:	69db      	ldr	r3, [r3, #28]
 8004f5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d208      	bcs.n	8004f76 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f64:	4b25      	ldr	r3, [pc, #148]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	4922      	ldr	r1, [pc, #136]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0320 	and.w	r3, r3, #32
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d010      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	69da      	ldr	r2, [r3, #28]
 8004f86:	4b1d      	ldr	r3, [pc, #116]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d208      	bcs.n	8004fa4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f92:	4b1a      	ldr	r3, [pc, #104]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	4917      	ldr	r1, [pc, #92]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004fa4:	f000 f834 	bl	8005010 <HAL_RCC_GetSysClockFreq>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	4b14      	ldr	r3, [pc, #80]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	4912      	ldr	r1, [pc, #72]	; (8005000 <HAL_RCC_ClockConfig+0x35c>)
 8004fb6:	5ccb      	ldrb	r3, [r1, r3]
 8004fb8:	f003 031f 	and.w	r3, r3, #31
 8004fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	; (8004ffc <HAL_RCC_ClockConfig+0x358>)
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	4a0d      	ldr	r2, [pc, #52]	; (8005000 <HAL_RCC_ClockConfig+0x35c>)
 8004fcc:	5cd3      	ldrb	r3, [r2, r3]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd8:	4a0a      	ldr	r2, [pc, #40]	; (8005004 <HAL_RCC_ClockConfig+0x360>)
 8004fda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fdc:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <HAL_RCC_ClockConfig+0x364>)
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004fe2:	4b0a      	ldr	r3, [pc, #40]	; (800500c <HAL_RCC_ClockConfig+0x368>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fc fff8 	bl	8001fdc <HAL_InitTick>
 8004fec:	4603      	mov	r3, r0
 8004fee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	58024400 	.word	0x58024400
 8005000:	08008324 	.word	0x08008324
 8005004:	20000014 	.word	0x20000014
 8005008:	20000010 	.word	0x20000010
 800500c:	20000018 	.word	0x20000018

08005010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005010:	b480      	push	{r7}
 8005012:	b089      	sub	sp, #36	; 0x24
 8005014:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005016:	4bb3      	ldr	r3, [pc, #716]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800501e:	2b18      	cmp	r3, #24
 8005020:	f200 8155 	bhi.w	80052ce <HAL_RCC_GetSysClockFreq+0x2be>
 8005024:	a201      	add	r2, pc, #4	; (adr r2, 800502c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502a:	bf00      	nop
 800502c:	08005091 	.word	0x08005091
 8005030:	080052cf 	.word	0x080052cf
 8005034:	080052cf 	.word	0x080052cf
 8005038:	080052cf 	.word	0x080052cf
 800503c:	080052cf 	.word	0x080052cf
 8005040:	080052cf 	.word	0x080052cf
 8005044:	080052cf 	.word	0x080052cf
 8005048:	080052cf 	.word	0x080052cf
 800504c:	080050b7 	.word	0x080050b7
 8005050:	080052cf 	.word	0x080052cf
 8005054:	080052cf 	.word	0x080052cf
 8005058:	080052cf 	.word	0x080052cf
 800505c:	080052cf 	.word	0x080052cf
 8005060:	080052cf 	.word	0x080052cf
 8005064:	080052cf 	.word	0x080052cf
 8005068:	080052cf 	.word	0x080052cf
 800506c:	080050bd 	.word	0x080050bd
 8005070:	080052cf 	.word	0x080052cf
 8005074:	080052cf 	.word	0x080052cf
 8005078:	080052cf 	.word	0x080052cf
 800507c:	080052cf 	.word	0x080052cf
 8005080:	080052cf 	.word	0x080052cf
 8005084:	080052cf 	.word	0x080052cf
 8005088:	080052cf 	.word	0x080052cf
 800508c:	080050c3 	.word	0x080050c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005090:	4b94      	ldr	r3, [pc, #592]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d009      	beq.n	80050b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800509c:	4b91      	ldr	r3, [pc, #580]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	08db      	lsrs	r3, r3, #3
 80050a2:	f003 0303 	and.w	r3, r3, #3
 80050a6:	4a90      	ldr	r2, [pc, #576]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050a8:	fa22 f303 	lsr.w	r3, r2, r3
 80050ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80050ae:	e111      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80050b0:	4b8d      	ldr	r3, [pc, #564]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050b2:	61bb      	str	r3, [r7, #24]
      break;
 80050b4:	e10e      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80050b6:	4b8d      	ldr	r3, [pc, #564]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80050b8:	61bb      	str	r3, [r7, #24]
      break;
 80050ba:	e10b      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80050bc:	4b8c      	ldr	r3, [pc, #560]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80050be:	61bb      	str	r3, [r7, #24]
      break;
 80050c0:	e108      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050c2:	4b88      	ldr	r3, [pc, #544]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80050cc:	4b85      	ldr	r3, [pc, #532]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050d6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80050d8:	4b82      	ldr	r3, [pc, #520]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80050e2:	4b80      	ldr	r3, [pc, #512]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e6:	08db      	lsrs	r3, r3, #3
 80050e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	fb02 f303 	mul.w	r3, r2, r3
 80050f2:	ee07 3a90 	vmov	s15, r3
 80050f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 80e1 	beq.w	80052c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b02      	cmp	r3, #2
 800510a:	f000 8083 	beq.w	8005214 <HAL_RCC_GetSysClockFreq+0x204>
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b02      	cmp	r3, #2
 8005112:	f200 80a1 	bhi.w	8005258 <HAL_RCC_GetSysClockFreq+0x248>
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <HAL_RCC_GetSysClockFreq+0x114>
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d056      	beq.n	80051d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005122:	e099      	b.n	8005258 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005124:	4b6f      	ldr	r3, [pc, #444]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0320 	and.w	r3, r3, #32
 800512c:	2b00      	cmp	r3, #0
 800512e:	d02d      	beq.n	800518c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005130:	4b6c      	ldr	r3, [pc, #432]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	08db      	lsrs	r3, r3, #3
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	4a6b      	ldr	r2, [pc, #428]	; (80052e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800513c:	fa22 f303 	lsr.w	r3, r2, r3
 8005140:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	ee07 3a90 	vmov	s15, r3
 8005148:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515a:	4b62      	ldr	r3, [pc, #392]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800515c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005162:	ee07 3a90 	vmov	s15, r3
 8005166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516a:	ed97 6a02 	vldr	s12, [r7, #8]
 800516e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80052f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005186:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800518a:	e087      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	eddf 6a58 	vldr	s13, [pc, #352]	; 80052f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800519a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800519e:	4b51      	ldr	r3, [pc, #324]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051a6:	ee07 3a90 	vmov	s15, r3
 80051aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80051b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80052f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80051ce:	e065      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	ee07 3a90 	vmov	s15, r3
 80051d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80052fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80051de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051e2:	4b40      	ldr	r3, [pc, #256]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80051f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80052f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80051fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800520a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005212:	e043      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	ee07 3a90 	vmov	s15, r3
 800521a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800521e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005300 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005222:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005226:	4b2f      	ldr	r3, [pc, #188]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800522a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800522e:	ee07 3a90 	vmov	s15, r3
 8005232:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005236:	ed97 6a02 	vldr	s12, [r7, #8]
 800523a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80052f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800523e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005242:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800524a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800524e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005252:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005256:	e021      	b.n	800529c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	ee07 3a90 	vmov	s15, r3
 800525e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005262:	eddf 6a26 	vldr	s13, [pc, #152]	; 80052fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8005266:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800526a:	4b1e      	ldr	r3, [pc, #120]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005272:	ee07 3a90 	vmov	s15, r3
 8005276:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800527a:	ed97 6a02 	vldr	s12, [r7, #8]
 800527e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80052f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005282:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005286:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800528a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800528e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005296:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800529a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800529c:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800529e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a0:	0a5b      	lsrs	r3, r3, #9
 80052a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a6:	3301      	adds	r3, #1
 80052a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	ee07 3a90 	vmov	s15, r3
 80052b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80052b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80052b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052c0:	ee17 3a90 	vmov	r3, s15
 80052c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80052c6:	e005      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	61bb      	str	r3, [r7, #24]
      break;
 80052cc:	e002      	b.n	80052d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80052ce:	4b07      	ldr	r3, [pc, #28]	; (80052ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052d0:	61bb      	str	r3, [r7, #24]
      break;
 80052d2:	bf00      	nop
  }

  return sysclockfreq;
 80052d4:	69bb      	ldr	r3, [r7, #24]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3724      	adds	r7, #36	; 0x24
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	58024400 	.word	0x58024400
 80052e8:	03d09000 	.word	0x03d09000
 80052ec:	003d0900 	.word	0x003d0900
 80052f0:	017d7840 	.word	0x017d7840
 80052f4:	46000000 	.word	0x46000000
 80052f8:	4c742400 	.word	0x4c742400
 80052fc:	4a742400 	.word	0x4a742400
 8005300:	4bbebc20 	.word	0x4bbebc20

08005304 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005308:	b0cc      	sub	sp, #304	; 0x130
 800530a:	af00      	add	r7, sp, #0
 800530c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005310:	2300      	movs	r3, #0
 8005312:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005316:	2300      	movs	r3, #0
 8005318:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800531c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8005328:	2500      	movs	r5, #0
 800532a:	ea54 0305 	orrs.w	r3, r4, r5
 800532e:	d049      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005330:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005334:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005336:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800533a:	d02f      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800533c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005340:	d828      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005346:	d01a      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005348:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800534c:	d822      	bhi.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005352:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005356:	d007      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005358:	e01c      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800535a:	4bb8      	ldr	r3, [pc, #736]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	4ab7      	ldr	r2, [pc, #732]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005364:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005366:	e01a      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005368:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800536c:	3308      	adds	r3, #8
 800536e:	2102      	movs	r1, #2
 8005370:	4618      	mov	r0, r3
 8005372:	f001 fa11 	bl	8006798 <RCCEx_PLL2_Config>
 8005376:	4603      	mov	r3, r0
 8005378:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800537c:	e00f      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800537e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005382:	3328      	adds	r3, #40	; 0x28
 8005384:	2102      	movs	r1, #2
 8005386:	4618      	mov	r0, r3
 8005388:	f001 fab8 	bl	80068fc <RCCEx_PLL3_Config>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005392:	e004      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800539a:	e000      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800539c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800539e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10a      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053a6:	4ba5      	ldr	r3, [pc, #660]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80053ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053b4:	4aa1      	ldr	r2, [pc, #644]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053b6:	430b      	orrs	r3, r1
 80053b8:	6513      	str	r3, [r2, #80]	; 0x50
 80053ba:	e003      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80053c0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80053d0:	f04f 0900 	mov.w	r9, #0
 80053d4:	ea58 0309 	orrs.w	r3, r8, r9
 80053d8:	d047      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80053da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d82a      	bhi.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005401 	.word	0x08005401
 80053f0:	0800540f 	.word	0x0800540f
 80053f4:	08005425 	.word	0x08005425
 80053f8:	08005443 	.word	0x08005443
 80053fc:	08005443 	.word	0x08005443
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005400:	4b8e      	ldr	r3, [pc, #568]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005404:	4a8d      	ldr	r2, [pc, #564]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800540a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800540c:	e01a      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800540e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005412:	3308      	adds	r3, #8
 8005414:	2100      	movs	r1, #0
 8005416:	4618      	mov	r0, r3
 8005418:	f001 f9be 	bl	8006798 <RCCEx_PLL2_Config>
 800541c:	4603      	mov	r3, r0
 800541e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005422:	e00f      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005424:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005428:	3328      	adds	r3, #40	; 0x28
 800542a:	2100      	movs	r1, #0
 800542c:	4618      	mov	r0, r3
 800542e:	f001 fa65 	bl	80068fc <RCCEx_PLL3_Config>
 8005432:	4603      	mov	r3, r0
 8005434:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005438:	e004      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005440:	e000      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005442:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005444:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800544c:	4b7b      	ldr	r3, [pc, #492]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800544e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005450:	f023 0107 	bic.w	r1, r3, #7
 8005454:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545a:	4a78      	ldr	r2, [pc, #480]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800545c:	430b      	orrs	r3, r1
 800545e:	6513      	str	r3, [r2, #80]	; 0x50
 8005460:	e003      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005462:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005466:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800546a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800546e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005472:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8005476:	f04f 0b00 	mov.w	fp, #0
 800547a:	ea5a 030b 	orrs.w	r3, sl, fp
 800547e:	d04c      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005480:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800548a:	d030      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800548c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005490:	d829      	bhi.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005492:	2bc0      	cmp	r3, #192	; 0xc0
 8005494:	d02d      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005496:	2bc0      	cmp	r3, #192	; 0xc0
 8005498:	d825      	bhi.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d018      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800549e:	2b80      	cmp	r3, #128	; 0x80
 80054a0:	d821      	bhi.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d002      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80054a6:	2b40      	cmp	r3, #64	; 0x40
 80054a8:	d007      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80054aa:	e01c      	b.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ac:	4b63      	ldr	r3, [pc, #396]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	4a62      	ldr	r2, [pc, #392]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054b8:	e01c      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054be:	3308      	adds	r3, #8
 80054c0:	2100      	movs	r1, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 f968 	bl	8006798 <RCCEx_PLL2_Config>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054ce:	e011      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054d4:	3328      	adds	r3, #40	; 0x28
 80054d6:	2100      	movs	r1, #0
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 fa0f 	bl	80068fc <RCCEx_PLL3_Config>
 80054de:	4603      	mov	r3, r0
 80054e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80054e4:	e006      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80054ec:	e002      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054ee:	bf00      	nop
 80054f0:	e000      	b.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80054f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10a      	bne.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80054fc:	4b4f      	ldr	r3, [pc, #316]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005500:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8005504:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550a:	4a4c      	ldr	r2, [pc, #304]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800550c:	430b      	orrs	r3, r1
 800550e:	6513      	str	r3, [r2, #80]	; 0x50
 8005510:	e003      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005512:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005516:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800551a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800551e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005522:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8005526:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800552a:	2300      	movs	r3, #0
 800552c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005530:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8005534:	460b      	mov	r3, r1
 8005536:	4313      	orrs	r3, r2
 8005538:	d053      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800553a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800553e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005542:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005546:	d035      	beq.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005548:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800554c:	d82e      	bhi.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800554e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005552:	d031      	beq.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005554:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005558:	d828      	bhi.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800555a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800555e:	d01a      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005564:	d822      	bhi.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800556a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800556e:	d007      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005570:	e01c      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005572:	4b32      	ldr	r3, [pc, #200]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	4a31      	ldr	r2, [pc, #196]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800557c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800557e:	e01c      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005580:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005584:	3308      	adds	r3, #8
 8005586:	2100      	movs	r1, #0
 8005588:	4618      	mov	r0, r3
 800558a:	f001 f905 	bl	8006798 <RCCEx_PLL2_Config>
 800558e:	4603      	mov	r3, r0
 8005590:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005594:	e011      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005596:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800559a:	3328      	adds	r3, #40	; 0x28
 800559c:	2100      	movs	r1, #0
 800559e:	4618      	mov	r0, r3
 80055a0:	f001 f9ac 	bl	80068fc <RCCEx_PLL3_Config>
 80055a4:	4603      	mov	r3, r0
 80055a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055aa:	e006      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80055b2:	e002      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055b4:	bf00      	nop
 80055b6:	e000      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80055b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80055c2:	4b1e      	ldr	r3, [pc, #120]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80055ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80055d2:	4a1a      	ldr	r2, [pc, #104]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055d4:	430b      	orrs	r3, r1
 80055d6:	6593      	str	r3, [r2, #88]	; 0x58
 80055d8:	e003      	b.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80055de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80055e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80055ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80055f2:	2300      	movs	r3, #0
 80055f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80055f8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80055fc:	460b      	mov	r3, r1
 80055fe:	4313      	orrs	r3, r2
 8005600:	d056      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005602:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800560a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800560e:	d038      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005610:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005614:	d831      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005616:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800561a:	d034      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800561c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005620:	d82b      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005622:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005626:	d01d      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005628:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800562c:	d825      	bhi.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d006      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005632:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005636:	d00a      	beq.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005638:	e01f      	b.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800563a:	bf00      	nop
 800563c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005640:	4ba2      	ldr	r3, [pc, #648]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005644:	4aa1      	ldr	r2, [pc, #644]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005646:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800564a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800564c:	e01c      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800564e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005652:	3308      	adds	r3, #8
 8005654:	2100      	movs	r1, #0
 8005656:	4618      	mov	r0, r3
 8005658:	f001 f89e 	bl	8006798 <RCCEx_PLL2_Config>
 800565c:	4603      	mov	r3, r0
 800565e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005662:	e011      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005664:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005668:	3328      	adds	r3, #40	; 0x28
 800566a:	2100      	movs	r1, #0
 800566c:	4618      	mov	r0, r3
 800566e:	f001 f945 	bl	80068fc <RCCEx_PLL3_Config>
 8005672:	4603      	mov	r3, r0
 8005674:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005678:	e006      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005680:	e002      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005682:	bf00      	nop
 8005684:	e000      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005688:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10b      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005690:	4b8e      	ldr	r3, [pc, #568]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005694:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005698:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800569c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80056a0:	4a8a      	ldr	r2, [pc, #552]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056a2:	430b      	orrs	r3, r1
 80056a4:	6593      	str	r3, [r2, #88]	; 0x58
 80056a6:	e003      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80056ac:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80056b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80056bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056c0:	2300      	movs	r3, #0
 80056c2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056c6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80056ca:	460b      	mov	r3, r1
 80056cc:	4313      	orrs	r3, r2
 80056ce:	d03a      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80056d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80056d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d6:	2b30      	cmp	r3, #48	; 0x30
 80056d8:	d01f      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80056da:	2b30      	cmp	r3, #48	; 0x30
 80056dc:	d819      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056de:	2b20      	cmp	r3, #32
 80056e0:	d00c      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	d815      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d019      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80056ea:	2b10      	cmp	r3, #16
 80056ec:	d111      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ee:	4b77      	ldr	r3, [pc, #476]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f2:	4a76      	ldr	r2, [pc, #472]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80056fa:	e011      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005700:	3308      	adds	r3, #8
 8005702:	2102      	movs	r1, #2
 8005704:	4618      	mov	r0, r3
 8005706:	f001 f847 	bl	8006798 <RCCEx_PLL2_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005710:	e006      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005718:	e002      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800571e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005720:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005728:	4b68      	ldr	r3, [pc, #416]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800572a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005730:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005736:	4a65      	ldr	r2, [pc, #404]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005738:	430b      	orrs	r3, r1
 800573a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800573c:	e003      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005742:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005746:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005752:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005756:	2300      	movs	r3, #0
 8005758:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800575c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8005760:	460b      	mov	r3, r1
 8005762:	4313      	orrs	r3, r2
 8005764:	d051      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005766:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800576a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800576c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005770:	d035      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005772:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005776:	d82e      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005778:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800577c:	d031      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800577e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005782:	d828      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005788:	d01a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800578a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800578e:	d822      	bhi.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005798:	d007      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800579a:	e01c      	b.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800579c:	4b4b      	ldr	r3, [pc, #300]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	4a4a      	ldr	r2, [pc, #296]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057a8:	e01c      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057ae:	3308      	adds	r3, #8
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fff0 	bl	8006798 <RCCEx_PLL2_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057be:	e011      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057c4:	3328      	adds	r3, #40	; 0x28
 80057c6:	2100      	movs	r1, #0
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 f897 	bl	80068fc <RCCEx_PLL3_Config>
 80057ce:	4603      	mov	r3, r0
 80057d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80057d4:	e006      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80057dc:	e002      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057de:	bf00      	nop
 80057e0:	e000      	b.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80057e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80057ec:	4b37      	ldr	r3, [pc, #220]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80057f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057fa:	4a34      	ldr	r2, [pc, #208]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057fc:	430b      	orrs	r3, r1
 80057fe:	6513      	str	r3, [r2, #80]	; 0x50
 8005800:	e003      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005802:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005806:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800580a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800580e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005812:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005816:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800581a:	2300      	movs	r3, #0
 800581c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005820:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8005824:	460b      	mov	r3, r1
 8005826:	4313      	orrs	r3, r2
 8005828:	d056      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800582a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800582e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005834:	d033      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005836:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800583a:	d82c      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800583c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005840:	d02f      	beq.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005842:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005846:	d826      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005848:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800584c:	d02b      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800584e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005852:	d820      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005854:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005858:	d012      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800585a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800585e:	d81a      	bhi.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005860:	2b00      	cmp	r3, #0
 8005862:	d022      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005868:	d115      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800586a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800586e:	3308      	adds	r3, #8
 8005870:	2101      	movs	r1, #1
 8005872:	4618      	mov	r0, r3
 8005874:	f000 ff90 	bl	8006798 <RCCEx_PLL2_Config>
 8005878:	4603      	mov	r3, r0
 800587a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800587e:	e015      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005880:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005884:	3328      	adds	r3, #40	; 0x28
 8005886:	2101      	movs	r1, #1
 8005888:	4618      	mov	r0, r3
 800588a:	f001 f837 	bl	80068fc <RCCEx_PLL3_Config>
 800588e:	4603      	mov	r3, r0
 8005890:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005894:	e00a      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800589c:	e006      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800589e:	bf00      	nop
 80058a0:	e004      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058a2:	bf00      	nop
 80058a4:	e002      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058a6:	bf00      	nop
 80058a8:	e000      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80058aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10d      	bne.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80058b4:	4b05      	ldr	r3, [pc, #20]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80058bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058c2:	4a02      	ldr	r2, [pc, #8]	; (80058cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058c4:	430b      	orrs	r3, r1
 80058c6:	6513      	str	r3, [r2, #80]	; 0x50
 80058c8:	e006      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80058ca:	bf00      	nop
 80058cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80058d4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80058d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80058e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058e8:	2300      	movs	r3, #0
 80058ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058ee:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80058f2:	460b      	mov	r3, r1
 80058f4:	4313      	orrs	r3, r2
 80058f6:	d055      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80058f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80058fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005900:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005904:	d033      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005906:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800590a:	d82c      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800590c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005910:	d02f      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005916:	d826      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005918:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800591c:	d02b      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800591e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005922:	d820      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005924:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005928:	d012      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800592a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800592e:	d81a      	bhi.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005930:	2b00      	cmp	r3, #0
 8005932:	d022      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005938:	d115      	bne.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800593a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800593e:	3308      	adds	r3, #8
 8005940:	2101      	movs	r1, #1
 8005942:	4618      	mov	r0, r3
 8005944:	f000 ff28 	bl	8006798 <RCCEx_PLL2_Config>
 8005948:	4603      	mov	r3, r0
 800594a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800594e:	e015      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005950:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005954:	3328      	adds	r3, #40	; 0x28
 8005956:	2101      	movs	r1, #1
 8005958:	4618      	mov	r0, r3
 800595a:	f000 ffcf 	bl	80068fc <RCCEx_PLL3_Config>
 800595e:	4603      	mov	r3, r0
 8005960:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005964:	e00a      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800596c:	e006      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800596e:	bf00      	nop
 8005970:	e004      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005972:	bf00      	nop
 8005974:	e002      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005976:	bf00      	nop
 8005978:	e000      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800597a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800597c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10b      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005984:	4bb6      	ldr	r3, [pc, #728]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005988:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800598c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005990:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005994:	4ab2      	ldr	r2, [pc, #712]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005996:	430b      	orrs	r3, r1
 8005998:	6593      	str	r3, [r2, #88]	; 0x58
 800599a:	e003      	b.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800599c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80059a0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80059a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80059b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80059b4:	2300      	movs	r3, #0
 80059b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80059ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80059be:	460b      	mov	r3, r1
 80059c0:	4313      	orrs	r3, r2
 80059c2:	d02a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80059c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d011      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80059ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d2:	d10a      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80059d8:	3308      	adds	r3, #8
 80059da:	2101      	movs	r1, #1
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fedb 	bl	8006798 <RCCEx_PLL2_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80059e8:	e004      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80059f0:	e000      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 80059f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d10a      	bne.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80059fc:	4b98      	ldr	r3, [pc, #608]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80059fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a00:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005a04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0a:	4a95      	ldr	r2, [pc, #596]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005a10:	e003      	b.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a12:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a16:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005a26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a30:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005a34:	460b      	mov	r3, r1
 8005a36:	4313      	orrs	r3, r2
 8005a38:	d037      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a44:	d00e      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8005a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a4a:	d816      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x776>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d018      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8005a50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a54:	d111      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a56:	4b82      	ldr	r3, [pc, #520]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	4a81      	ldr	r2, [pc, #516]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a62:	e00f      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a68:	3308      	adds	r3, #8
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f000 fe93 	bl	8006798 <RCCEx_PLL2_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005a78:	e004      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005a80:	e000      	b.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8005a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a84:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a8c:	4b74      	ldr	r3, [pc, #464]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a90:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9a:	4a71      	ldr	r2, [pc, #452]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005a9c:	430b      	orrs	r3, r1
 8005a9e:	6513      	str	r3, [r2, #80]	; 0x50
 8005aa0:	e003      	b.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005aa6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005ab6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aba:	2300      	movs	r3, #0
 8005abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005ac0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	d03a      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005aca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d81d      	bhi.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8005ad4:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b19 	.word	0x08005b19
 8005ae0:	08005aed 	.word	0x08005aed
 8005ae4:	08005afb 	.word	0x08005afb
 8005ae8:	08005b19 	.word	0x08005b19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aec:	4b5c      	ldr	r3, [pc, #368]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af0:	4a5b      	ldr	r2, [pc, #364]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005af2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005af6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005af8:	e00f      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005afa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005afe:	3308      	adds	r3, #8
 8005b00:	2102      	movs	r1, #2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 fe48 	bl	8006798 <RCCEx_PLL2_Config>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005b0e:	e004      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005b16:	e000      	b.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8005b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b1a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d10a      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005b22:	4b4f      	ldr	r3, [pc, #316]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b26:	f023 0103 	bic.w	r1, r3, #3
 8005b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b30:	4a4b      	ldr	r2, [pc, #300]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005b32:	430b      	orrs	r3, r1
 8005b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005b36:	e003      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b38:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005b3c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b48:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b50:	2300      	movs	r3, #0
 8005b52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f000 80a0 	beq.w	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b62:	4b40      	ldr	r3, [pc, #256]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a3f      	ldr	r2, [pc, #252]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b6e:	f7fc fa7f 	bl	8002070 <HAL_GetTick>
 8005b72:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b76:	e00b      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b78:	f7fc fa7a 	bl	8002070 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b64      	cmp	r3, #100	; 0x64
 8005b86:	d903      	bls.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005b8e:	e005      	b.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b90:	4b34      	ldr	r3, [pc, #208]	; (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0ed      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8005b9c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d17a      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ba4:	4b2e      	ldr	r3, [pc, #184]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005ba6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ba8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005bb0:	4053      	eors	r3, r2
 8005bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d015      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bba:	4b29      	ldr	r3, [pc, #164]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bc6:	4b26      	ldr	r3, [pc, #152]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	4a25      	ldr	r2, [pc, #148]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bd2:	4b23      	ldr	r3, [pc, #140]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd6:	4a22      	ldr	r2, [pc, #136]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bdc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005bde:	4a20      	ldr	r2, [pc, #128]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005be0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005be4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005be6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005bea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bf2:	d118      	bne.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf4:	f7fc fa3c 	bl	8002070 <HAL_GetTick>
 8005bf8:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bfc:	e00d      	b.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bfe:	f7fc fa37 	bl	8002070 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005c08:	1ad2      	subs	r2, r2, r3
 8005c0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d903      	bls.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8005c18:	e005      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c1a:	4b11      	ldr	r3, [pc, #68]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d0eb      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8005c26:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d130      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c32:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c3e:	d115      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8005c40:	4b07      	ldr	r3, [pc, #28]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005c48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c50:	091a      	lsrs	r2, r3, #4
 8005c52:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	4a02      	ldr	r2, [pc, #8]	; (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	6113      	str	r3, [r2, #16]
 8005c5c:	e00c      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8005c5e:	bf00      	nop
 8005c60:	58024400 	.word	0x58024400
 8005c64:	58024800 	.word	0x58024800
 8005c68:	00ffffcf 	.word	0x00ffffcf
 8005c6c:	4bd4      	ldr	r3, [pc, #848]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	4ad3      	ldr	r2, [pc, #844]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c72:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c76:	6113      	str	r3, [r2, #16]
 8005c78:	4bd1      	ldr	r3, [pc, #836]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c7a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005c7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005c80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c88:	4acd      	ldr	r2, [pc, #820]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c90:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c94:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8005c98:	e003      	b.n	8005ca2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005c9e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005caa:	f002 0301 	and.w	r3, r2, #1
 8005cae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005cb8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f000 808b 	beq.w	8005dda <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ccc:	2b28      	cmp	r3, #40	; 0x28
 8005cce:	d86b      	bhi.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8005cd0:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8005cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd6:	bf00      	nop
 8005cd8:	08005db1 	.word	0x08005db1
 8005cdc:	08005da9 	.word	0x08005da9
 8005ce0:	08005da9 	.word	0x08005da9
 8005ce4:	08005da9 	.word	0x08005da9
 8005ce8:	08005da9 	.word	0x08005da9
 8005cec:	08005da9 	.word	0x08005da9
 8005cf0:	08005da9 	.word	0x08005da9
 8005cf4:	08005da9 	.word	0x08005da9
 8005cf8:	08005d7d 	.word	0x08005d7d
 8005cfc:	08005da9 	.word	0x08005da9
 8005d00:	08005da9 	.word	0x08005da9
 8005d04:	08005da9 	.word	0x08005da9
 8005d08:	08005da9 	.word	0x08005da9
 8005d0c:	08005da9 	.word	0x08005da9
 8005d10:	08005da9 	.word	0x08005da9
 8005d14:	08005da9 	.word	0x08005da9
 8005d18:	08005d93 	.word	0x08005d93
 8005d1c:	08005da9 	.word	0x08005da9
 8005d20:	08005da9 	.word	0x08005da9
 8005d24:	08005da9 	.word	0x08005da9
 8005d28:	08005da9 	.word	0x08005da9
 8005d2c:	08005da9 	.word	0x08005da9
 8005d30:	08005da9 	.word	0x08005da9
 8005d34:	08005da9 	.word	0x08005da9
 8005d38:	08005db1 	.word	0x08005db1
 8005d3c:	08005da9 	.word	0x08005da9
 8005d40:	08005da9 	.word	0x08005da9
 8005d44:	08005da9 	.word	0x08005da9
 8005d48:	08005da9 	.word	0x08005da9
 8005d4c:	08005da9 	.word	0x08005da9
 8005d50:	08005da9 	.word	0x08005da9
 8005d54:	08005da9 	.word	0x08005da9
 8005d58:	08005db1 	.word	0x08005db1
 8005d5c:	08005da9 	.word	0x08005da9
 8005d60:	08005da9 	.word	0x08005da9
 8005d64:	08005da9 	.word	0x08005da9
 8005d68:	08005da9 	.word	0x08005da9
 8005d6c:	08005da9 	.word	0x08005da9
 8005d70:	08005da9 	.word	0x08005da9
 8005d74:	08005da9 	.word	0x08005da9
 8005d78:	08005db1 	.word	0x08005db1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d80:	3308      	adds	r3, #8
 8005d82:	2101      	movs	r1, #1
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 fd07 	bl	8006798 <RCCEx_PLL2_Config>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005d90:	e00f      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d96:	3328      	adds	r3, #40	; 0x28
 8005d98:	2101      	movs	r1, #1
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fdae 	bl	80068fc <RCCEx_PLL3_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005da6:	e004      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005dae:	e000      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8005db0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d10b      	bne.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005dba:	4b81      	ldr	r3, [pc, #516]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dbe:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dca:	4a7d      	ldr	r2, [pc, #500]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005dcc:	430b      	orrs	r3, r1
 8005dce:	6553      	str	r3, [r2, #84]	; 0x54
 8005dd0:	e003      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005dd6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	f002 0302 	and.w	r3, r2, #2
 8005de6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005dea:	2300      	movs	r3, #0
 8005dec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005df0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005df4:	460b      	mov	r3, r1
 8005df6:	4313      	orrs	r3, r2
 8005df8:	d042      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005dfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e00:	2b05      	cmp	r3, #5
 8005e02:	d825      	bhi.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8005e04:	a201      	add	r2, pc, #4	; (adr r2, 8005e0c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8005e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e0a:	bf00      	nop
 8005e0c:	08005e59 	.word	0x08005e59
 8005e10:	08005e25 	.word	0x08005e25
 8005e14:	08005e3b 	.word	0x08005e3b
 8005e18:	08005e59 	.word	0x08005e59
 8005e1c:	08005e59 	.word	0x08005e59
 8005e20:	08005e59 	.word	0x08005e59
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e28:	3308      	adds	r3, #8
 8005e2a:	2101      	movs	r1, #1
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fcb3 	bl	8006798 <RCCEx_PLL2_Config>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e38:	e00f      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e3e:	3328      	adds	r3, #40	; 0x28
 8005e40:	2101      	movs	r1, #1
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fd5a 	bl	80068fc <RCCEx_PLL3_Config>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005e4e:	e004      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005e56:	e000      	b.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8005e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e5a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005e62:	4b57      	ldr	r3, [pc, #348]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e66:	f023 0107 	bic.w	r1, r3, #7
 8005e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e70:	4a53      	ldr	r2, [pc, #332]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005e72:	430b      	orrs	r3, r1
 8005e74:	6553      	str	r3, [r2, #84]	; 0x54
 8005e76:	e003      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e78:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005e7c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f002 0304 	and.w	r3, r2, #4
 8005e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e90:	2300      	movs	r3, #0
 8005e92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e96:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	d044      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005ea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	d825      	bhi.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8005eac:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005f01 	.word	0x08005f01
 8005eb8:	08005ecd 	.word	0x08005ecd
 8005ebc:	08005ee3 	.word	0x08005ee3
 8005ec0:	08005f01 	.word	0x08005f01
 8005ec4:	08005f01 	.word	0x08005f01
 8005ec8:	08005f01 	.word	0x08005f01
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	2101      	movs	r1, #1
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 fc5f 	bl	8006798 <RCCEx_PLL2_Config>
 8005eda:	4603      	mov	r3, r0
 8005edc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ee0:	e00f      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ee6:	3328      	adds	r3, #40	; 0x28
 8005ee8:	2101      	movs	r1, #1
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fd06 	bl	80068fc <RCCEx_PLL3_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005ef6:	e004      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005efe:	e000      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8005f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f02:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10b      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f0a:	4b2d      	ldr	r3, [pc, #180]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	f023 0107 	bic.w	r1, r3, #7
 8005f12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f1a:	4a29      	ldr	r2, [pc, #164]	; (8005fc0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6593      	str	r3, [r2, #88]	; 0x58
 8005f20:	e003      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005f26:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	f002 0320 	and.w	r3, r2, #32
 8005f36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f44:	460b      	mov	r3, r1
 8005f46:	4313      	orrs	r3, r2
 8005f48:	d057      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f56:	d035      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8005f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f5c:	d82c      	bhi.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f62:	d031      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8005f64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f68:	d826      	bhi.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005f6a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f6e:	d02d      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8005f70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f74:	d820      	bhi.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f7a:	d012      	beq.n	8005fa2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8005f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f80:	d81a      	bhi.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d024      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8005f86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f8a:	d115      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005f90:	3308      	adds	r3, #8
 8005f92:	2100      	movs	r1, #0
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 fbff 	bl	8006798 <RCCEx_PLL2_Config>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005fa0:	e017      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005fa2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fa6:	3328      	adds	r3, #40	; 0x28
 8005fa8:	2102      	movs	r1, #2
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fca6 	bl	80068fc <RCCEx_PLL3_Config>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005fb6:	e00c      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8005fc0:	58024400 	.word	0x58024400
        break;
 8005fc4:	bf00      	nop
 8005fc6:	e004      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005fc8:	bf00      	nop
 8005fca:	e002      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005fcc:	bf00      	nop
 8005fce:	e000      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8005fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fda:	4bc2      	ldr	r3, [pc, #776]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fde:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005fe2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fea:	4abe      	ldr	r2, [pc, #760]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6553      	str	r3, [r2, #84]	; 0x54
 8005ff0:	e003      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005ff6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005ffa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800600a:	2300      	movs	r3, #0
 800600c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006010:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006014:	460b      	mov	r3, r1
 8006016:	4313      	orrs	r3, r2
 8006018:	d055      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800601a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800601e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006022:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006026:	d033      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8006028:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800602c:	d82c      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800602e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006032:	d02f      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8006034:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006038:	d826      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800603a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800603e:	d02b      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8006040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006044:	d820      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800604a:	d012      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800604c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006050:	d81a      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d022      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8006056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800605a:	d115      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800605c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006060:	3308      	adds	r3, #8
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f000 fb97 	bl	8006798 <RCCEx_PLL2_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006070:	e015      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006072:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006076:	3328      	adds	r3, #40	; 0x28
 8006078:	2102      	movs	r1, #2
 800607a:	4618      	mov	r0, r3
 800607c:	f000 fc3e 	bl	80068fc <RCCEx_PLL3_Config>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006086:	e00a      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800608e:	e006      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006090:	bf00      	nop
 8006092:	e004      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006094:	bf00      	nop
 8006096:	e002      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8006098:	bf00      	nop
 800609a:	e000      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800609c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10b      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060a6:	4b8f      	ldr	r3, [pc, #572]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060aa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80060ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80060b6:	4a8b      	ldr	r2, [pc, #556]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6593      	str	r3, [r2, #88]	; 0x58
 80060bc:	e003      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80060c2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80060c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80060d2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060dc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80060e0:	460b      	mov	r3, r1
 80060e2:	4313      	orrs	r3, r2
 80060e4:	d055      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80060e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80060ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80060ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060f2:	d033      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80060f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80060f8:	d82c      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80060fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060fe:	d02f      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8006100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006104:	d826      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006106:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800610a:	d02b      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800610c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006110:	d820      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006112:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006116:	d012      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8006118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800611c:	d81a      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d022      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8006122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006126:	d115      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006128:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800612c:	3308      	adds	r3, #8
 800612e:	2100      	movs	r1, #0
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fb31 	bl	8006798 <RCCEx_PLL2_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800613c:	e015      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800613e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006142:	3328      	adds	r3, #40	; 0x28
 8006144:	2102      	movs	r1, #2
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fbd8 	bl	80068fc <RCCEx_PLL3_Config>
 800614c:	4603      	mov	r3, r0
 800614e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006152:	e00a      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800615a:	e006      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800615c:	bf00      	nop
 800615e:	e004      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006160:	bf00      	nop
 8006162:	e002      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006164:	bf00      	nop
 8006166:	e000      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8006168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10b      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006172:	4b5c      	ldr	r3, [pc, #368]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006176:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800617a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800617e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006182:	4a58      	ldr	r2, [pc, #352]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8006184:	430b      	orrs	r3, r1
 8006186:	6593      	str	r3, [r2, #88]	; 0x58
 8006188:	e003      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800618a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800618e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006192:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619a:	f002 0308 	and.w	r3, r2, #8
 800619e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061a2:	2300      	movs	r3, #0
 80061a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061a8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80061ac:	460b      	mov	r3, r1
 80061ae:	4313      	orrs	r3, r2
 80061b0:	d01e      	beq.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80061b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061be:	d10c      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80061c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061c4:	3328      	adds	r3, #40	; 0x28
 80061c6:	2102      	movs	r1, #2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fb97 	bl	80068fc <RCCEx_PLL3_Config>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d002      	beq.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80061da:	4b42      	ldr	r3, [pc, #264]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ea:	4a3e      	ldr	r2, [pc, #248]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f002 0310 	and.w	r3, r2, #16
 80061fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006200:	2300      	movs	r3, #0
 8006202:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006206:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800620a:	460b      	mov	r3, r1
 800620c:	4313      	orrs	r3, r2
 800620e:	d01e      	beq.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006210:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621c:	d10c      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800621e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006222:	3328      	adds	r3, #40	; 0x28
 8006224:	2102      	movs	r1, #2
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fb68 	bl	80068fc <RCCEx_PLL3_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006238:	4b2a      	ldr	r3, [pc, #168]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800623a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006240:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006244:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006248:	4a26      	ldr	r2, [pc, #152]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800624a:	430b      	orrs	r3, r1
 800624c:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800624e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006256:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800625a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800625e:	2300      	movs	r3, #0
 8006260:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006264:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006268:	460b      	mov	r3, r1
 800626a:	4313      	orrs	r3, r2
 800626c:	d040      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800626e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006272:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006276:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800627a:	d022      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800627c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006280:	d81b      	bhi.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8006286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800628a:	d00b      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800628c:	e015      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800628e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006292:	3308      	adds	r3, #8
 8006294:	2100      	movs	r1, #0
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fa7e 	bl	8006798 <RCCEx_PLL2_Config>
 800629c:	4603      	mov	r3, r0
 800629e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80062a2:	e00f      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062a8:	3328      	adds	r3, #40	; 0x28
 80062aa:	2102      	movs	r1, #2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fb25 	bl	80068fc <RCCEx_PLL3_Config>
 80062b2:	4603      	mov	r3, r0
 80062b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80062b8:	e004      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80062c0:	e000      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80062c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10d      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80062d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062dc:	4a01      	ldr	r2, [pc, #4]	; (80062e4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80062de:	430b      	orrs	r3, r1
 80062e0:	6593      	str	r3, [r2, #88]	; 0x58
 80062e2:	e005      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80062e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80062ec:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80062f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80062f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80062fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80062fe:	2300      	movs	r3, #0
 8006300:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006302:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006306:	460b      	mov	r3, r1
 8006308:	4313      	orrs	r3, r2
 800630a:	d03b      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800630c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006314:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006318:	d01f      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800631a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800631e:	d818      	bhi.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8006320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006324:	d003      	beq.n	800632e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8006326:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800632a:	d007      	beq.n	800633c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800632c:	e011      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800632e:	4b64      	ldr	r3, [pc, #400]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	4a63      	ldr	r2, [pc, #396]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006338:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800633a:	e00f      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800633c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006340:	3328      	adds	r3, #40	; 0x28
 8006342:	2101      	movs	r1, #1
 8006344:	4618      	mov	r0, r3
 8006346:	f000 fad9 	bl	80068fc <RCCEx_PLL3_Config>
 800634a:	4603      	mov	r3, r0
 800634c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8006350:	e004      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006358:	e000      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800635a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800635c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10b      	bne.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006364:	4b56      	ldr	r3, [pc, #344]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006368:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800636c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006374:	4a52      	ldr	r2, [pc, #328]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006376:	430b      	orrs	r3, r1
 8006378:	6553      	str	r3, [r2, #84]	; 0x54
 800637a:	e003      	b.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006380:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006384:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006390:	673b      	str	r3, [r7, #112]	; 0x70
 8006392:	2300      	movs	r3, #0
 8006394:	677b      	str	r3, [r7, #116]	; 0x74
 8006396:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800639a:	460b      	mov	r3, r1
 800639c:	4313      	orrs	r3, r2
 800639e:	d031      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80063a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80063aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ae:	d007      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80063b0:	e011      	b.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b2:	4b43      	ldr	r3, [pc, #268]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	4a42      	ldr	r2, [pc, #264]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063be:	e00e      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80063c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063c4:	3308      	adds	r3, #8
 80063c6:	2102      	movs	r1, #2
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 f9e5 	bl	8006798 <RCCEx_PLL2_Config>
 80063ce:	4603      	mov	r3, r0
 80063d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80063d4:	e003      	b.n	80063de <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80063dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10a      	bne.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80063e6:	4b36      	ldr	r3, [pc, #216]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ea:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80063ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80063f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f4:	4a32      	ldr	r2, [pc, #200]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80063f6:	430b      	orrs	r3, r1
 80063f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063fa:	e003      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006400:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006404:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006410:	66bb      	str	r3, [r7, #104]	; 0x68
 8006412:	2300      	movs	r3, #0
 8006414:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006416:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800641a:	460b      	mov	r3, r1
 800641c:	4313      	orrs	r3, r2
 800641e:	d00c      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006420:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006424:	3328      	adds	r3, #40	; 0x28
 8006426:	2102      	movs	r1, #2
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fa67 	bl	80068fc <RCCEx_PLL3_Config>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800643a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006446:	663b      	str	r3, [r7, #96]	; 0x60
 8006448:	2300      	movs	r3, #0
 800644a:	667b      	str	r3, [r7, #100]	; 0x64
 800644c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006450:	460b      	mov	r3, r1
 8006452:	4313      	orrs	r3, r2
 8006454:	d03a      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006456:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800645a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800645e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006462:	d018      	beq.n	8006496 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8006464:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006468:	d811      	bhi.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800646a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800646e:	d014      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8006470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006474:	d80b      	bhi.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8006476:	2b00      	cmp	r3, #0
 8006478:	d011      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800647a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800647e:	d106      	bne.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006480:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4a0e      	ldr	r2, [pc, #56]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8006486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800648a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800648c:	e008      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8006494:	e004      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8006496:	bf00      	nop
 8006498:	e002      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800649a:	bf00      	nop
 800649c:	e000      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800649e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10d      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80064a8:	4b05      	ldr	r3, [pc, #20]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80064aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80064b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064b8:	4a01      	ldr	r2, [pc, #4]	; (80064c0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80064ba:	430b      	orrs	r3, r1
 80064bc:	6553      	str	r3, [r2, #84]	; 0x54
 80064be:	e005      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80064c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80064c8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80064d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80064da:	2300      	movs	r3, #0
 80064dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064de:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80064e2:	460b      	mov	r3, r1
 80064e4:	4313      	orrs	r3, r2
 80064e6:	d009      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064e8:	4baa      	ldr	r3, [pc, #680]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80064f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80064f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064f6:	4aa7      	ldr	r2, [pc, #668]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80064f8:	430b      	orrs	r3, r1
 80064fa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80064fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006504:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006508:	653b      	str	r3, [r7, #80]	; 0x50
 800650a:	2300      	movs	r3, #0
 800650c:	657b      	str	r3, [r7, #84]	; 0x54
 800650e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8006512:	460b      	mov	r3, r1
 8006514:	4313      	orrs	r3, r2
 8006516:	d00a      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006518:	4b9e      	ldr	r3, [pc, #632]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006520:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006524:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006528:	4a9a      	ldr	r2, [pc, #616]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800652a:	430b      	orrs	r3, r1
 800652c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800652e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800653a:	64bb      	str	r3, [r7, #72]	; 0x48
 800653c:	2300      	movs	r3, #0
 800653e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006540:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006544:	460b      	mov	r3, r1
 8006546:	4313      	orrs	r3, r2
 8006548:	d009      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800654a:	4b92      	ldr	r3, [pc, #584]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800654c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8006552:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006558:	4a8e      	ldr	r2, [pc, #568]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800655a:	430b      	orrs	r3, r1
 800655c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800655e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006566:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800656a:	643b      	str	r3, [r7, #64]	; 0x40
 800656c:	2300      	movs	r3, #0
 800656e:	647b      	str	r3, [r7, #68]	; 0x44
 8006570:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006574:	460b      	mov	r3, r1
 8006576:	4313      	orrs	r3, r2
 8006578:	d00e      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800657a:	4b86      	ldr	r3, [pc, #536]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	4a85      	ldr	r2, [pc, #532]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006580:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006584:	6113      	str	r3, [r2, #16]
 8006586:	4b83      	ldr	r3, [pc, #524]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006588:	6919      	ldr	r1, [r3, #16]
 800658a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800658e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006592:	4a80      	ldr	r2, [pc, #512]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8006594:	430b      	orrs	r3, r1
 8006596:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006598:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800659c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80065a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80065a6:	2300      	movs	r3, #0
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80065aa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80065ae:	460b      	mov	r3, r1
 80065b0:	4313      	orrs	r3, r2
 80065b2:	d009      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80065b4:	4b77      	ldr	r3, [pc, #476]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80065b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065b8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80065bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065c2:	4a74      	ldr	r2, [pc, #464]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80065c4:	430b      	orrs	r3, r1
 80065c6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80065c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80065d4:	633b      	str	r3, [r7, #48]	; 0x30
 80065d6:	2300      	movs	r3, #0
 80065d8:	637b      	str	r3, [r7, #52]	; 0x34
 80065da:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80065de:	460b      	mov	r3, r1
 80065e0:	4313      	orrs	r3, r2
 80065e2:	d00a      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80065e4:	4b6b      	ldr	r3, [pc, #428]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80065e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80065ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f4:	4a67      	ldr	r2, [pc, #412]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80065f6:	430b      	orrs	r3, r1
 80065f8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80065fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80065fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006602:	2100      	movs	r1, #0
 8006604:	62b9      	str	r1, [r7, #40]	; 0x28
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800660c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006610:	460b      	mov	r3, r1
 8006612:	4313      	orrs	r3, r2
 8006614:	d011      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006616:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800661a:	3308      	adds	r3, #8
 800661c:	2100      	movs	r1, #0
 800661e:	4618      	mov	r0, r3
 8006620:	f000 f8ba 	bl	8006798 <RCCEx_PLL2_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800662a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800662e:	2b00      	cmp	r3, #0
 8006630:	d003      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006632:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006636:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800663a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006642:	2100      	movs	r1, #0
 8006644:	6239      	str	r1, [r7, #32]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
 800664c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006650:	460b      	mov	r3, r1
 8006652:	4313      	orrs	r3, r2
 8006654:	d011      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006656:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800665a:	3308      	adds	r3, #8
 800665c:	2101      	movs	r1, #1
 800665e:	4618      	mov	r0, r3
 8006660:	f000 f89a 	bl	8006798 <RCCEx_PLL2_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800666a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006672:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006676:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800667a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	2100      	movs	r1, #0
 8006684:	61b9      	str	r1, [r7, #24]
 8006686:	f003 0304 	and.w	r3, r3, #4
 800668a:	61fb      	str	r3, [r7, #28]
 800668c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006690:	460b      	mov	r3, r1
 8006692:	4313      	orrs	r3, r2
 8006694:	d011      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006696:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800669a:	3308      	adds	r3, #8
 800669c:	2102      	movs	r1, #2
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 f87a 	bl	8006798 <RCCEx_PLL2_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80066aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066b6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80066ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	2100      	movs	r1, #0
 80066c4:	6139      	str	r1, [r7, #16]
 80066c6:	f003 0308 	and.w	r3, r3, #8
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80066d0:	460b      	mov	r3, r1
 80066d2:	4313      	orrs	r3, r2
 80066d4:	d011      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80066d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066da:	3328      	adds	r3, #40	; 0x28
 80066dc:	2100      	movs	r1, #0
 80066de:	4618      	mov	r0, r3
 80066e0:	f000 f90c 	bl	80068fc <RCCEx_PLL3_Config>
 80066e4:	4603      	mov	r3, r0
 80066e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 80066ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066f6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80066fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80066fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006702:	2100      	movs	r1, #0
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	60fb      	str	r3, [r7, #12]
 800670c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006710:	460b      	mov	r3, r1
 8006712:	4313      	orrs	r3, r2
 8006714:	d011      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006716:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800671a:	3328      	adds	r3, #40	; 0x28
 800671c:	2101      	movs	r1, #1
 800671e:	4618      	mov	r0, r3
 8006720:	f000 f8ec 	bl	80068fc <RCCEx_PLL3_Config>
 8006724:	4603      	mov	r3, r0
 8006726:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800672a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006732:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006736:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800673a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800673e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006742:	2100      	movs	r1, #0
 8006744:	6039      	str	r1, [r7, #0]
 8006746:	f003 0320 	and.w	r3, r3, #32
 800674a:	607b      	str	r3, [r7, #4]
 800674c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006750:	460b      	mov	r3, r1
 8006752:	4313      	orrs	r3, r2
 8006754:	d011      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006756:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800675a:	3328      	adds	r3, #40	; 0x28
 800675c:	2102      	movs	r1, #2
 800675e:	4618      	mov	r0, r3
 8006760:	f000 f8cc 	bl	80068fc <RCCEx_PLL3_Config>
 8006764:	4603      	mov	r3, r0
 8006766:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800676a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006772:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006776:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 800677a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	e000      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
}
 8006788:	4618      	mov	r0, r3
 800678a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800678e:	46bd      	mov	sp, r7
 8006790:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006794:	58024400 	.word	0x58024400

08006798 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80067a6:	4b53      	ldr	r3, [pc, #332]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80067a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	2b03      	cmp	r3, #3
 80067b0:	d101      	bne.n	80067b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e099      	b.n	80068ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80067b6:	4b4f      	ldr	r3, [pc, #316]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a4e      	ldr	r2, [pc, #312]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80067bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80067c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c2:	f7fb fc55 	bl	8002070 <HAL_GetTick>
 80067c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067c8:	e008      	b.n	80067dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80067ca:	f7fb fc51 	bl	8002070 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e086      	b.n	80068ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80067dc:	4b45      	ldr	r3, [pc, #276]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f0      	bne.n	80067ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80067e8:	4b42      	ldr	r3, [pc, #264]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80067ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	031b      	lsls	r3, r3, #12
 80067f6:	493f      	ldr	r1, [pc, #252]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	628b      	str	r3, [r1, #40]	; 0x28
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	3b01      	subs	r3, #1
 8006802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	3b01      	subs	r3, #1
 800680c:	025b      	lsls	r3, r3, #9
 800680e:	b29b      	uxth	r3, r3
 8006810:	431a      	orrs	r2, r3
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	3b01      	subs	r3, #1
 8006818:	041b      	lsls	r3, r3, #16
 800681a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	3b01      	subs	r3, #1
 8006826:	061b      	lsls	r3, r3, #24
 8006828:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800682c:	4931      	ldr	r1, [pc, #196]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 800682e:	4313      	orrs	r3, r2
 8006830:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006832:	4b30      	ldr	r3, [pc, #192]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006836:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	492d      	ldr	r1, [pc, #180]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006840:	4313      	orrs	r3, r2
 8006842:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006844:	4b2b      	ldr	r3, [pc, #172]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	f023 0220 	bic.w	r2, r3, #32
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	4928      	ldr	r1, [pc, #160]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006852:	4313      	orrs	r3, r2
 8006854:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006856:	4b27      	ldr	r3, [pc, #156]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	4a26      	ldr	r2, [pc, #152]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 800685c:	f023 0310 	bic.w	r3, r3, #16
 8006860:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006862:	4b24      	ldr	r3, [pc, #144]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006866:	4b24      	ldr	r3, [pc, #144]	; (80068f8 <RCCEx_PLL2_Config+0x160>)
 8006868:	4013      	ands	r3, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	69d2      	ldr	r2, [r2, #28]
 800686e:	00d2      	lsls	r2, r2, #3
 8006870:	4920      	ldr	r1, [pc, #128]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006872:	4313      	orrs	r3, r2
 8006874:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006876:	4b1f      	ldr	r3, [pc, #124]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	4a1e      	ldr	r2, [pc, #120]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 800687c:	f043 0310 	orr.w	r3, r3, #16
 8006880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d106      	bne.n	8006896 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006888:	4b1a      	ldr	r3, [pc, #104]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 800688a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800688c:	4a19      	ldr	r2, [pc, #100]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 800688e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006892:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006894:	e00f      	b.n	80068b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d106      	bne.n	80068aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800689c:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	4a14      	ldr	r2, [pc, #80]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80068a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80068a8:	e005      	b.n	80068b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80068aa:	4b12      	ldr	r3, [pc, #72]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80068ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ae:	4a11      	ldr	r2, [pc, #68]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80068b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80068b6:	4b0f      	ldr	r3, [pc, #60]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a0e      	ldr	r2, [pc, #56]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80068bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80068c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068c2:	f7fb fbd5 	bl	8002070 <HAL_GetTick>
 80068c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068c8:	e008      	b.n	80068dc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068ca:	f7fb fbd1 	bl	8002070 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d901      	bls.n	80068dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e006      	b.n	80068ea <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80068dc:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <RCCEx_PLL2_Config+0x15c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d0f0      	beq.n	80068ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80068e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	58024400 	.word	0x58024400
 80068f8:	ffff0007 	.word	0xffff0007

080068fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006906:	2300      	movs	r3, #0
 8006908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800690a:	4b53      	ldr	r3, [pc, #332]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 800690c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690e:	f003 0303 	and.w	r3, r3, #3
 8006912:	2b03      	cmp	r3, #3
 8006914:	d101      	bne.n	800691a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e099      	b.n	8006a4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800691a:	4b4f      	ldr	r3, [pc, #316]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a4e      	ldr	r2, [pc, #312]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006926:	f7fb fba3 	bl	8002070 <HAL_GetTick>
 800692a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800692c:	e008      	b.n	8006940 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800692e:	f7fb fb9f 	bl	8002070 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	2b02      	cmp	r3, #2
 800693a:	d901      	bls.n	8006940 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e086      	b.n	8006a4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006940:	4b45      	ldr	r3, [pc, #276]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1f0      	bne.n	800692e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800694c:	4b42      	ldr	r3, [pc, #264]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	051b      	lsls	r3, r3, #20
 800695a:	493f      	ldr	r1, [pc, #252]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 800695c:	4313      	orrs	r3, r2
 800695e:	628b      	str	r3, [r1, #40]	; 0x28
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	3b01      	subs	r3, #1
 8006966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	3b01      	subs	r3, #1
 8006970:	025b      	lsls	r3, r3, #9
 8006972:	b29b      	uxth	r3, r3
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68db      	ldr	r3, [r3, #12]
 800697a:	3b01      	subs	r3, #1
 800697c:	041b      	lsls	r3, r3, #16
 800697e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006982:	431a      	orrs	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	691b      	ldr	r3, [r3, #16]
 8006988:	3b01      	subs	r3, #1
 800698a:	061b      	lsls	r3, r3, #24
 800698c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006990:	4931      	ldr	r1, [pc, #196]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006992:	4313      	orrs	r3, r2
 8006994:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006996:	4b30      	ldr	r3, [pc, #192]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	492d      	ldr	r1, [pc, #180]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80069a8:	4b2b      	ldr	r3, [pc, #172]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	4928      	ldr	r1, [pc, #160]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069b6:	4313      	orrs	r3, r2
 80069b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80069ba:	4b27      	ldr	r3, [pc, #156]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	4a26      	ldr	r2, [pc, #152]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80069c6:	4b24      	ldr	r3, [pc, #144]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069ca:	4b24      	ldr	r3, [pc, #144]	; (8006a5c <RCCEx_PLL3_Config+0x160>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	69d2      	ldr	r2, [r2, #28]
 80069d2:	00d2      	lsls	r2, r2, #3
 80069d4:	4920      	ldr	r1, [pc, #128]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80069da:	4b1f      	ldr	r3, [pc, #124]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069de:	4a1e      	ldr	r2, [pc, #120]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d106      	bne.n	80069fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80069ec:	4b1a      	ldr	r3, [pc, #104]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f0:	4a19      	ldr	r2, [pc, #100]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 80069f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80069f8:	e00f      	b.n	8006a1a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d106      	bne.n	8006a0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006a00:	4b15      	ldr	r3, [pc, #84]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a04:	4a14      	ldr	r2, [pc, #80]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a0c:	e005      	b.n	8006a1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006a0e:	4b12      	ldr	r3, [pc, #72]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a12:	4a11      	ldr	r2, [pc, #68]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006a1a:	4b0f      	ldr	r3, [pc, #60]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a0e      	ldr	r2, [pc, #56]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a26:	f7fb fb23 	bl	8002070 <HAL_GetTick>
 8006a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a2c:	e008      	b.n	8006a40 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a2e:	f7fb fb1f 	bl	8002070 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d901      	bls.n	8006a40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e006      	b.n	8006a4e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006a40:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <RCCEx_PLL3_Config+0x15c>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0f0      	beq.n	8006a2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	58024400 	.word	0x58024400
 8006a5c:	ffff0007 	.word	0xffff0007

08006a60 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e02b      	b.n	8006acc <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d106      	bne.n	8006a8e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 f825 	bl	8006ad8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4610      	mov	r0, r2
 8006aa2:	f000 f881 	bl	8006ba8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6818      	ldr	r0, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	f000 f8d5 	bl	8006c60 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8006ab6:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <HAL_SDRAM_Init+0x74>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a06      	ldr	r2, [pc, #24]	; (8006ad4 <HAL_SDRAM_Init+0x74>)
 8006abc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ac0:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}
 8006ad4:	52004000 	.word	0x52004000

08006ad8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b086      	sub	sp, #24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006afe:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006b00:	7dfb      	ldrb	r3, [r7, #23]
 8006b02:	2b02      	cmp	r3, #2
 8006b04:	d101      	bne.n	8006b0a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006b06:	2302      	movs	r3, #2
 8006b08:	e021      	b.n	8006b4e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d002      	beq.n	8006b16 <HAL_SDRAM_SendCommand+0x2a>
 8006b10:	7dfb      	ldrb	r3, [r7, #23]
 8006b12:	2b05      	cmp	r3, #5
 8006b14:	d118      	bne.n	8006b48 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 f904 	bl	8006d34 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d104      	bne.n	8006b3e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2205      	movs	r2, #5
 8006b38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b3c:	e006      	b.n	8006b4c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b46:	e001      	b.n	8006b4c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d101      	bne.n	8006b70 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	e016      	b.n	8006b9e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b76:	b2db      	uxtb	r3, r3
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d10f      	bne.n	8006b9c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2202      	movs	r2, #2
 8006b80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6839      	ldr	r1, [r7, #0]
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 f8f6 	bl	8006d7c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	e000      	b.n	8006b9e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3708      	adds	r7, #8
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
	...

08006ba8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d121      	bne.n	8006bfe <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	4b27      	ldr	r3, [pc, #156]	; (8006c5c <FMC_SDRAM_Init+0xb4>)
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	6851      	ldr	r1, [r2, #4]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	6892      	ldr	r2, [r2, #8]
 8006bca:	4311      	orrs	r1, r2
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	68d2      	ldr	r2, [r2, #12]
 8006bd0:	4311      	orrs	r1, r2
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	6912      	ldr	r2, [r2, #16]
 8006bd6:	4311      	orrs	r1, r2
 8006bd8:	683a      	ldr	r2, [r7, #0]
 8006bda:	6952      	ldr	r2, [r2, #20]
 8006bdc:	4311      	orrs	r1, r2
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	6992      	ldr	r2, [r2, #24]
 8006be2:	4311      	orrs	r1, r2
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	69d2      	ldr	r2, [r2, #28]
 8006be8:	4311      	orrs	r1, r2
 8006bea:	683a      	ldr	r2, [r7, #0]
 8006bec:	6a12      	ldr	r2, [r2, #32]
 8006bee:	4311      	orrs	r1, r2
 8006bf0:	683a      	ldr	r2, [r7, #0]
 8006bf2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	e026      	b.n	8006c4c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	69d9      	ldr	r1, [r3, #28]
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	6a1b      	ldr	r3, [r3, #32]
 8006c0e:	4319      	orrs	r1, r3
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	430b      	orrs	r3, r1
 8006c16:	431a      	orrs	r2, r3
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	4b0e      	ldr	r3, [pc, #56]	; (8006c5c <FMC_SDRAM_Init+0xb4>)
 8006c22:	4013      	ands	r3, r2
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	6851      	ldr	r1, [r2, #4]
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	6892      	ldr	r2, [r2, #8]
 8006c2c:	4311      	orrs	r1, r2
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	68d2      	ldr	r2, [r2, #12]
 8006c32:	4311      	orrs	r1, r2
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	6912      	ldr	r2, [r2, #16]
 8006c38:	4311      	orrs	r1, r2
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	6952      	ldr	r2, [r2, #20]
 8006c3e:	4311      	orrs	r1, r2
 8006c40:	683a      	ldr	r2, [r7, #0]
 8006c42:	6992      	ldr	r2, [r2, #24]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	ffff8000 	.word	0xffff8000

08006c60 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d128      	bne.n	8006cc4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	1e59      	subs	r1, r3, #1
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	4319      	orrs	r1, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	021b      	lsls	r3, r3, #8
 8006c92:	4319      	orrs	r1, r3
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	031b      	lsls	r3, r3, #12
 8006c9c:	4319      	orrs	r1, r3
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	041b      	lsls	r3, r3, #16
 8006ca6:	4319      	orrs	r1, r3
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	695b      	ldr	r3, [r3, #20]
 8006cac:	3b01      	subs	r3, #1
 8006cae:	051b      	lsls	r3, r3, #20
 8006cb0:	4319      	orrs	r1, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	061b      	lsls	r3, r3, #24
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	431a      	orrs	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	609a      	str	r2, [r3, #8]
 8006cc2:	e02d      	b.n	8006d20 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	4b19      	ldr	r3, [pc, #100]	; (8006d30 <FMC_SDRAM_Timing_Init+0xd0>)
 8006cca:	4013      	ands	r3, r2
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	68d2      	ldr	r2, [r2, #12]
 8006cd0:	3a01      	subs	r2, #1
 8006cd2:	0311      	lsls	r1, r2, #12
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	6952      	ldr	r2, [r2, #20]
 8006cd8:	3a01      	subs	r2, #1
 8006cda:	0512      	lsls	r2, r2, #20
 8006cdc:	430a      	orrs	r2, r1
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	1e59      	subs	r1, r3, #1
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	011b      	lsls	r3, r3, #4
 8006cfa:	4319      	orrs	r1, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	021b      	lsls	r3, r3, #8
 8006d04:	4319      	orrs	r1, r3
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	041b      	lsls	r3, r3, #16
 8006d0e:	4319      	orrs	r1, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	061b      	lsls	r3, r3, #24
 8006d18:	430b      	orrs	r3, r1
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	ff0f0fff 	.word	0xff0f0fff

08006d34 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	691a      	ldr	r2, [r3, #16]
 8006d44:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <FMC_SDRAM_SendCommand+0x44>)
 8006d46:	4013      	ands	r3, r2
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	6811      	ldr	r1, [r2, #0]
 8006d4c:	68ba      	ldr	r2, [r7, #8]
 8006d4e:	6852      	ldr	r2, [r2, #4]
 8006d50:	4311      	orrs	r1, r2
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	6892      	ldr	r2, [r2, #8]
 8006d56:	3a01      	subs	r2, #1
 8006d58:	0152      	lsls	r2, r2, #5
 8006d5a:	4311      	orrs	r1, r2
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	68d2      	ldr	r2, [r2, #12]
 8006d60:	0252      	lsls	r2, r2, #9
 8006d62:	430a      	orrs	r2, r1
 8006d64:	431a      	orrs	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr
 8006d78:	ffc00000 	.word	0xffc00000

08006d7c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	695a      	ldr	r2, [r3, #20]
 8006d8a:	4b07      	ldr	r3, [pc, #28]	; (8006da8 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	0052      	lsls	r2, r2, #1
 8006d92:	431a      	orrs	r2, r3
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	ffffc001 	.word	0xffffc001

08006dac <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af02      	add	r7, sp, #8
  /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1 (Cortex-M7) 
     in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
  */
  
  /* Configure the MPU attributes as Write Through for SDRAM*/
  MPU_Config();
 8006db2:	f000 fd81 	bl	80078b8 <MPU_Config>
  
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8006db6:	f000 fd11 	bl	80077dc <CPU_CACHE_Enable>
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();
 8006dba:	f7fb f8cb 	bl	8001f54 <HAL_Init>

  /* Configure the system clock to 400 MHz */
  SystemClock_Config();
 8006dbe:	f000 fc77 	bl	80076b0 <SystemClock_Config>

  /* When system initialization is finished, Cortex-M7 could wakeup (when needed) the Cortex-M4  by means of 
     HSEM notification or by any D2 wakeup source (SEV,EXTI..)   */  

  /* Initialize used Leds */
  BSP_LED_Init(LED3);
 8006dc2:	2002      	movs	r0, #2
 8006dc4:	f7fa f9f0 	bl	80011a8 <BSP_LED_Init>

  /* Initialize the SDRAM */
  BSP_SDRAM_Init(0);
 8006dc8:	2000      	movs	r0, #0
 8006dca:	f7fa fea5 	bl	8001b18 <BSP_SDRAM_Init>
  
  /* Initialize the LCD   */
  if( LCD_Init() != BSP_ERROR_NONE)
 8006dce:	f000 f953 	bl	8007078 <LCD_Init>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d001      	beq.n	8006ddc <main+0x30>
  {
    Error_Handler();
 8006dd8:	f000 fdaf 	bl	800793a <Error_Handler>
  }
  
    /* Set the LCD Context */
  Lcd_Ctx[0].ActiveLayer = 0;
 8006ddc:	4b5d      	ldr	r3, [pc, #372]	; (8006f54 <main+0x1a8>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	609a      	str	r2, [r3, #8]
  Lcd_Ctx[0].PixelFormat = LCD_PIXEL_FORMAT_ARGB8888;
 8006de2:	4b5c      	ldr	r3, [pc, #368]	; (8006f54 <main+0x1a8>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	60da      	str	r2, [r3, #12]
  Lcd_Ctx[0].BppFactor = 4; /* 4 Bytes Per Pixel for ARGB8888 */  
 8006de8:	4b5a      	ldr	r3, [pc, #360]	; (8006f54 <main+0x1a8>)
 8006dea:	2204      	movs	r2, #4
 8006dec:	611a      	str	r2, [r3, #16]
  Lcd_Ctx[0].XSize = 800;  
 8006dee:	4b59      	ldr	r3, [pc, #356]	; (8006f54 <main+0x1a8>)
 8006df0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006df4:	601a      	str	r2, [r3, #0]
  Lcd_Ctx[0].YSize = 480;
 8006df6:	4b57      	ldr	r3, [pc, #348]	; (8006f54 <main+0x1a8>)
 8006df8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8006dfc:	605a      	str	r2, [r3, #4]
  
  /* Disable DSI Wrapper in order to access and configure the LTDC */
  __HAL_DSI_WRAPPER_DISABLE(&hlcd_dsi);
 8006dfe:	2300      	movs	r3, #0
 8006e00:	60bb      	str	r3, [r7, #8]
 8006e02:	4b55      	ldr	r3, [pc, #340]	; (8006f58 <main+0x1ac>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006e0a:	4b53      	ldr	r3, [pc, #332]	; (8006f58 <main+0x1ac>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0208 	bic.w	r2, r2, #8
 8006e12:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8006e16:	4b50      	ldr	r3, [pc, #320]	; (8006f58 <main+0x1ac>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e1e:	f003 0308 	and.w	r3, r3, #8
 8006e22:	60bb      	str	r3, [r7, #8]
 8006e24:	68bb      	ldr	r3, [r7, #8]

  /* Initialize LTDC layer 0 iused for Hint */  
  LCD_LayertInit(0, LCD_FRAME_BUFFER); 
 8006e26:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	f000 fa7c 	bl	8007328 <LCD_LayertInit>
  UTIL_LCD_SetFuncDriver(&LCD_UTIL_Driver);
 8006e30:	484a      	ldr	r0, [pc, #296]	; (8006f5c <main+0x1b0>)
 8006e32:	f000 fdeb 	bl	8007a0c <UTIL_LCD_SetFuncDriver>

  /* Enable DSI Wrapper so DSI IP will drive the LTDC */
  __HAL_DSI_WRAPPER_ENABLE(&hlcd_dsi);  
 8006e36:	2300      	movs	r3, #0
 8006e38:	607b      	str	r3, [r7, #4]
 8006e3a:	4b47      	ldr	r3, [pc, #284]	; (8006f58 <main+0x1ac>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006e42:	4b45      	ldr	r3, [pc, #276]	; (8006f58 <main+0x1ac>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0208 	orr.w	r2, r2, #8
 8006e4a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8006e4e:	4b42      	ldr	r3, [pc, #264]	; (8006f58 <main+0x1ac>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e56:	f003 0308 	and.w	r3, r3, #8
 8006e5a:	607b      	str	r3, [r7, #4]
 8006e5c:	687b      	ldr	r3, [r7, #4]
    
  /* Display example brief   */
  LCD_BriefDisplay();
 8006e5e:	f000 fb7d 	bl	800755c <LCD_BriefDisplay>

  /* Copy Buffer 0 into buffer 1, so only image area to be redrawn later */
  CopyBuffer((uint32_t *)Buffers[0], (uint32_t *)Buffers[1], 0, 0, 800, 480);
 8006e62:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8006e66:	4618      	mov	r0, r3
 8006e68:	4b3d      	ldr	r3, [pc, #244]	; (8006f60 <main+0x1b4>)
 8006e6a:	4619      	mov	r1, r3
 8006e6c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8006e70:	9301      	str	r3, [sp, #4]
 8006e72:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f000 fbb0 	bl	80075e0 <CopyBuffer>
  
  /*Draw first image */
  CopyBuffer((uint32_t *)Images[ImageIndex++], (uint32_t *)Buffers[front_buffer], 240, 160, 320, 240);
 8006e80:	4b38      	ldr	r3, [pc, #224]	; (8006f64 <main+0x1b8>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	4937      	ldr	r1, [pc, #220]	; (8006f64 <main+0x1b8>)
 8006e88:	600a      	str	r2, [r1, #0]
 8006e8a:	4a37      	ldr	r2, [pc, #220]	; (8006f68 <main+0x1bc>)
 8006e8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006e90:	4b36      	ldr	r3, [pc, #216]	; (8006f6c <main+0x1c0>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a36      	ldr	r2, [pc, #216]	; (8006f70 <main+0x1c4>)
 8006e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	23f0      	movs	r3, #240	; 0xf0
 8006e9e:	9301      	str	r3, [sp, #4]
 8006ea0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	23a0      	movs	r3, #160	; 0xa0
 8006ea8:	22f0      	movs	r2, #240	; 0xf0
 8006eaa:	f000 fb99 	bl	80075e0 <CopyBuffer>
  pend_buffer = 0;
 8006eae:	4b31      	ldr	r3, [pc, #196]	; (8006f74 <main+0x1c8>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]

  /*Refresh the LCD display*/
    HAL_DSI_Refresh(&hlcd_dsi);
 8006eb4:	4828      	ldr	r0, [pc, #160]	; (8006f58 <main+0x1ac>)
 8006eb6:	f7fc fa59 	bl	800336c <HAL_DSI_Refresh>
    uint16_t X=0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	81fb      	strh	r3, [r7, #14]
    uint16_t Y=0;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	81bb      	strh	r3, [r7, #12]
    /* Infinite loop */
    while (1)
    {
      if(pend_buffer < 0)
 8006ec2:	4b2c      	ldr	r3, [pc, #176]	; (8006f74 <main+0x1c8>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	dafb      	bge.n	8006ec2 <main+0x116>
      {
        /* Prepare back buffer */
  //    	DrawProp.LcdLayer = (uint32_t)(1- front_buffer);
        	UTIL_LCD_DisplayStringAt(X,Y, (uint8_t *)"Prueba",RIGHT_MODE);
 8006eca:	89f8      	ldrh	r0, [r7, #14]
 8006ecc:	89b9      	ldrh	r1, [r7, #12]
 8006ece:	2302      	movs	r3, #2
 8006ed0:	4a29      	ldr	r2, [pc, #164]	; (8006f78 <main+0x1cc>)
 8006ed2:	f000 fe8f 	bl	8007bf4 <UTIL_LCD_DisplayStringAt>
        	X++; if(X>=480) X=0;
 8006ed6:	89fb      	ldrh	r3, [r7, #14]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	81fb      	strh	r3, [r7, #14]
 8006edc:	89fb      	ldrh	r3, [r7, #14]
 8006ede:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8006ee2:	d301      	bcc.n	8006ee8 <main+0x13c>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	81fb      	strh	r3, [r7, #14]
        	Y++; if(Y>=480) Y=0;
 8006ee8:	89bb      	ldrh	r3, [r7, #12]
 8006eea:	3301      	adds	r3, #1
 8006eec:	81bb      	strh	r3, [r7, #12]
 8006eee:	89bb      	ldrh	r3, [r7, #12]
 8006ef0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8006ef4:	d301      	bcc.n	8006efa <main+0x14e>
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	81bb      	strh	r3, [r7, #12]
        CopyBuffer((uint32_t *)Images[ImageIndex++], (uint32_t *)Buffers[1- front_buffer], 240, 160, 320, 240);
 8006efa:	4b1a      	ldr	r3, [pc, #104]	; (8006f64 <main+0x1b8>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	4918      	ldr	r1, [pc, #96]	; (8006f64 <main+0x1b8>)
 8006f02:	600a      	str	r2, [r1, #0]
 8006f04:	4a18      	ldr	r2, [pc, #96]	; (8006f68 <main+0x1bc>)
 8006f06:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006f0a:	4b18      	ldr	r3, [pc, #96]	; (8006f6c <main+0x1c0>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f1c3 0301 	rsb	r3, r3, #1
 8006f12:	4a17      	ldr	r2, [pc, #92]	; (8006f70 <main+0x1c4>)
 8006f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f18:	4619      	mov	r1, r3
 8006f1a:	23f0      	movs	r3, #240	; 0xf0
 8006f1c:	9301      	str	r3, [sp, #4]
 8006f1e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	23a0      	movs	r3, #160	; 0xa0
 8006f26:	22f0      	movs	r2, #240	; 0xf0
 8006f28:	f000 fb5a 	bl	80075e0 <CopyBuffer>
        pend_buffer = 1- front_buffer;
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	; (8006f6c <main+0x1c0>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f1c3 0301 	rsb	r3, r3, #1
 8006f34:	4a0f      	ldr	r2, [pc, #60]	; (8006f74 <main+0x1c8>)
 8006f36:	6013      	str	r3, [r2, #0]

        if(ImageIndex >= 2)
 8006f38:	4b0a      	ldr	r3, [pc, #40]	; (8006f64 <main+0x1b8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d902      	bls.n	8006f46 <main+0x19a>
        {
          ImageIndex = 0;
 8006f40:	4b08      	ldr	r3, [pc, #32]	; (8006f64 <main+0x1b8>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
        }

        /* Refresh the display */
        HAL_DSI_Refresh(&hlcd_dsi);
 8006f46:	4804      	ldr	r0, [pc, #16]	; (8006f58 <main+0x1ac>)
 8006f48:	f7fc fa10 	bl	800336c <HAL_DSI_Refresh>

        /* Wait some time before switching to next stage */
        HAL_Delay(100);
 8006f4c:	2064      	movs	r0, #100	; 0x64
 8006f4e:	f7fb f89b 	bl	8002088 <HAL_Delay>
      if(pend_buffer < 0)
 8006f52:	e7b6      	b.n	8006ec2 <main+0x116>
 8006f54:	200001a4 	.word	0x200001a4
 8006f58:	20000078 	.word	0x20000078
 8006f5c:	0809e33c 	.word	0x0809e33c
 8006f60:	d0177000 	.word	0xd0177000
 8006f64:	20000424 	.word	0x20000424
 8006f68:	20000024 	.word	0x20000024
 8006f6c:	20000420 	.word	0x20000420
 8006f70:	0809e334 	.word	0x0809e334
 8006f74:	20000020 	.word	0x20000020
 8006f78:	08008104 	.word	0x08008104

08006f7c <LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  *XSize = Lcd_Ctx[0].XSize;
 8006f86:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <LCD_GetXSize+0x20>)
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	601a      	str	r2, [r3, #0]
 
  return BSP_ERROR_NONE;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	200001a4 	.word	0x200001a4

08006fa0 <LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  *YSize = Lcd_Ctx[0].YSize;
 8006faa:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <LCD_GetYSize+0x20>)
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	601a      	str	r2, [r3, #0]
 
  return BSP_ERROR_NONE;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	200001a4 	.word	0x200001a4

08006fc4 <HAL_DSI_EndOfRefreshCallback>:
  * @param  hdsi: pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef *hdsi)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  if(pend_buffer >= 0)
 8006fcc:	4b25      	ldr	r3, [pc, #148]	; (8007064 <HAL_DSI_EndOfRefreshCallback+0xa0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	db41      	blt.n	8007058 <HAL_DSI_EndOfRefreshCallback+0x94>
  { 
  /* Disable DSI Wrapper */
    __HAL_DSI_WRAPPER_DISABLE(&hlcd_dsi);
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	4b23      	ldr	r3, [pc, #140]	; (8007068 <HAL_DSI_EndOfRefreshCallback+0xa4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006fe0:	4b21      	ldr	r3, [pc, #132]	; (8007068 <HAL_DSI_EndOfRefreshCallback+0xa4>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0208 	bic.w	r2, r2, #8
 8006fe8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8006fec:	4b1e      	ldr	r3, [pc, #120]	; (8007068 <HAL_DSI_EndOfRefreshCallback+0xa4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	60fb      	str	r3, [r7, #12]
 8006ffa:	68fb      	ldr	r3, [r7, #12]
    /* Update LTDC configuaration */
    LTDC_LAYER(&hlcd_ltdc, 0)->CFBAR = ((uint32_t)Buffers[pend_buffer]);
 8006ffc:	4b19      	ldr	r3, [pc, #100]	; (8007064 <HAL_DSI_EndOfRefreshCallback+0xa0>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a1a      	ldr	r2, [pc, #104]	; (800706c <HAL_DSI_EndOfRefreshCallback+0xa8>)
 8007002:	6812      	ldr	r2, [r2, #0]
 8007004:	3284      	adds	r2, #132	; 0x84
 8007006:	4611      	mov	r1, r2
 8007008:	4a19      	ldr	r2, [pc, #100]	; (8007070 <HAL_DSI_EndOfRefreshCallback+0xac>)
 800700a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800700e:	628b      	str	r3, [r1, #40]	; 0x28
    __HAL_LTDC_RELOAD_CONFIG(&hlcd_ltdc);
 8007010:	4b16      	ldr	r3, [pc, #88]	; (800706c <HAL_DSI_EndOfRefreshCallback+0xa8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007016:	4b15      	ldr	r3, [pc, #84]	; (800706c <HAL_DSI_EndOfRefreshCallback+0xa8>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0201 	orr.w	r2, r2, #1
 800701e:	625a      	str	r2, [r3, #36]	; 0x24
    /* Enable DSI Wrapper */
    __HAL_DSI_WRAPPER_ENABLE(&hlcd_dsi);
 8007020:	2300      	movs	r3, #0
 8007022:	60bb      	str	r3, [r7, #8]
 8007024:	4b10      	ldr	r3, [pc, #64]	; (8007068 <HAL_DSI_EndOfRefreshCallback+0xa4>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800702c:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <HAL_DSI_EndOfRefreshCallback+0xa4>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 0208 	orr.w	r2, r2, #8
 8007034:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8007038:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <HAL_DSI_EndOfRefreshCallback+0xa4>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007040:	f003 0308 	and.w	r3, r3, #8
 8007044:	60bb      	str	r3, [r7, #8]
 8007046:	68bb      	ldr	r3, [r7, #8]
    
    front_buffer = pend_buffer;  
 8007048:	4b06      	ldr	r3, [pc, #24]	; (8007064 <HAL_DSI_EndOfRefreshCallback+0xa0>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a09      	ldr	r2, [pc, #36]	; (8007074 <HAL_DSI_EndOfRefreshCallback+0xb0>)
 800704e:	6013      	str	r3, [r2, #0]
    pend_buffer = -1;
 8007050:	4b04      	ldr	r3, [pc, #16]	; (8007064 <HAL_DSI_EndOfRefreshCallback+0xa0>)
 8007052:	f04f 32ff 	mov.w	r2, #4294967295
 8007056:	601a      	str	r2, [r3, #0]
  }
}
 8007058:	bf00      	nop
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	20000020 	.word	0x20000020
 8007068:	20000078 	.word	0x20000078
 800706c:	200000fc 	.word	0x200000fc
 8007070:	0809e334 	.word	0x0809e334
 8007074:	20000420 	.word	0x20000420

08007078 <LCD_Init>:
  *     - OTM8009A LCD Display IC Driver ititialization
  * @param  None
  * @retval LCD state
  */
static uint8_t LCD_Init(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08a      	sub	sp, #40	; 0x28
 800707c:	af00      	add	r7, sp, #0
  static OTM8009A_Object_t   OTM8009AObj;
  static void                *Lcd_CompObj = NULL;
  
  /* Toggle Hardware Reset of the DSI LCD using
     its XRES signal (active low) */
  BSP_LCD_Reset(0);
 800707e:	2000      	movs	r0, #0
 8007080:	f7fa f8fc 	bl	800127c <BSP_LCD_Reset>
  * This will set IP blocks LTDC, DSI and DMA2D
  * - out of reset
  * - clocked
  * - NVIC IRQ related to IP blocks enabled
  */
  LCD_MspInit();
 8007084:	f000 f9f0 	bl	8007468 <LCD_MspInit>
  /* LCD clock configuration */
  /* PLL3_VCO Input = HSE_VALUE/PLL3M = 5 Mhz */
  /* PLL3_VCO Output = PLL3_VCO Input * PLL3N = 800 Mhz */
  /* PLLLCDCLK = PLL3_VCO Output/PLL3R = 800/19 = 42 Mhz */
  /* LTDC clock frequency = PLLLCDCLK = 42 Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8007088:	4979      	ldr	r1, [pc, #484]	; (8007270 <LCD_Init+0x1f8>)
 800708a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800708e:	f04f 0300 	mov.w	r3, #0
 8007092:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.PLL3.PLL3M = 5;    
 8007096:	4b76      	ldr	r3, [pc, #472]	; (8007270 <LCD_Init+0x1f8>)
 8007098:	2205      	movs	r2, #5
 800709a:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 160;
 800709c:	4b74      	ldr	r3, [pc, #464]	; (8007270 <LCD_Init+0x1f8>)
 800709e:	22a0      	movs	r2, #160	; 0xa0
 80070a0:	62da      	str	r2, [r3, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80070a2:	4b73      	ldr	r3, [pc, #460]	; (8007270 <LCD_Init+0x1f8>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	645a      	str	r2, [r3, #68]	; 0x44
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80070a8:	4b71      	ldr	r3, [pc, #452]	; (8007270 <LCD_Init+0x1f8>)
 80070aa:	2202      	movs	r2, #2
 80070ac:	631a      	str	r2, [r3, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 2;  
 80070ae:	4b70      	ldr	r3, [pc, #448]	; (8007270 <LCD_Init+0x1f8>)
 80070b0:	2202      	movs	r2, #2
 80070b2:	635a      	str	r2, [r3, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 19;
 80070b4:	4b6e      	ldr	r3, [pc, #440]	; (8007270 <LCD_Init+0x1f8>)
 80070b6:	2213      	movs	r2, #19
 80070b8:	639a      	str	r2, [r3, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80070ba:	4b6d      	ldr	r3, [pc, #436]	; (8007270 <LCD_Init+0x1f8>)
 80070bc:	2200      	movs	r2, #0
 80070be:	641a      	str	r2, [r3, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 80070c0:	4b6b      	ldr	r3, [pc, #428]	; (8007270 <LCD_Init+0x1f8>)
 80070c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070c6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);   
 80070c8:	4869      	ldr	r0, [pc, #420]	; (8007270 <LCD_Init+0x1f8>)
 80070ca:	f7fe f91b 	bl	8005304 <HAL_RCCEx_PeriphCLKConfig>
  
  /* Base address of DSI Host/Wrapper registers to be set before calling De-Init */
  hlcd_dsi.Instance = DSI;
 80070ce:	4b69      	ldr	r3, [pc, #420]	; (8007274 <LCD_Init+0x1fc>)
 80070d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80070d4:	601a      	str	r2, [r3, #0]
  
  HAL_DSI_DeInit(&(hlcd_dsi));
 80070d6:	4867      	ldr	r0, [pc, #412]	; (8007274 <LCD_Init+0x1fc>)
 80070d8:	f7fb fddc 	bl	8002c94 <HAL_DSI_DeInit>
  
  dsiPllInit.PLLNDIV  = 100;
 80070dc:	4b66      	ldr	r3, [pc, #408]	; (8007278 <LCD_Init+0x200>)
 80070de:	2264      	movs	r2, #100	; 0x64
 80070e0:	601a      	str	r2, [r3, #0]
  dsiPllInit.PLLIDF   = DSI_PLL_IN_DIV5;
 80070e2:	4b65      	ldr	r3, [pc, #404]	; (8007278 <LCD_Init+0x200>)
 80070e4:	2205      	movs	r2, #5
 80070e6:	605a      	str	r2, [r3, #4]
  dsiPllInit.PLLODF  = DSI_PLL_OUT_DIV1;  
 80070e8:	4b63      	ldr	r3, [pc, #396]	; (8007278 <LCD_Init+0x200>)
 80070ea:	2200      	movs	r2, #0
 80070ec:	609a      	str	r2, [r3, #8]

  hlcd_dsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80070ee:	4b61      	ldr	r3, [pc, #388]	; (8007274 <LCD_Init+0x1fc>)
 80070f0:	2201      	movs	r2, #1
 80070f2:	60da      	str	r2, [r3, #12]
  hlcd_dsi.Init.TXEscapeCkdiv = 0x4;
 80070f4:	4b5f      	ldr	r3, [pc, #380]	; (8007274 <LCD_Init+0x1fc>)
 80070f6:	2204      	movs	r2, #4
 80070f8:	609a      	str	r2, [r3, #8]
  
  
  HAL_DSI_Init(&(hlcd_dsi), &(dsiPllInit));
 80070fa:	495f      	ldr	r1, [pc, #380]	; (8007278 <LCD_Init+0x200>)
 80070fc:	485d      	ldr	r0, [pc, #372]	; (8007274 <LCD_Init+0x1fc>)
 80070fe:	f7fb fcad 	bl	8002a5c <HAL_DSI_Init>
    
  /* Configure the DSI for Command mode */
  CmdCfg.VirtualChannelID      = 0;
 8007102:	4b5e      	ldr	r3, [pc, #376]	; (800727c <LCD_Init+0x204>)
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
  CmdCfg.HSPolarity            = DSI_HSYNC_ACTIVE_HIGH;
 8007108:	4b5c      	ldr	r3, [pc, #368]	; (800727c <LCD_Init+0x204>)
 800710a:	2200      	movs	r2, #0
 800710c:	615a      	str	r2, [r3, #20]
  CmdCfg.VSPolarity            = DSI_VSYNC_ACTIVE_HIGH;
 800710e:	4b5b      	ldr	r3, [pc, #364]	; (800727c <LCD_Init+0x204>)
 8007110:	2200      	movs	r2, #0
 8007112:	619a      	str	r2, [r3, #24]
  CmdCfg.DEPolarity            = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8007114:	4b59      	ldr	r3, [pc, #356]	; (800727c <LCD_Init+0x204>)
 8007116:	2200      	movs	r2, #0
 8007118:	61da      	str	r2, [r3, #28]
  CmdCfg.ColorCoding           = DSI_RGB888;
 800711a:	4b58      	ldr	r3, [pc, #352]	; (800727c <LCD_Init+0x204>)
 800711c:	2205      	movs	r2, #5
 800711e:	605a      	str	r2, [r3, #4]
  CmdCfg.CommandSize           = HACT;
 8007120:	4b56      	ldr	r3, [pc, #344]	; (800727c <LCD_Init+0x204>)
 8007122:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007126:	609a      	str	r2, [r3, #8]
  CmdCfg.TearingEffectSource   = DSI_TE_DSILINK;
 8007128:	4b54      	ldr	r3, [pc, #336]	; (800727c <LCD_Init+0x204>)
 800712a:	2200      	movs	r2, #0
 800712c:	60da      	str	r2, [r3, #12]
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 800712e:	4b53      	ldr	r3, [pc, #332]	; (800727c <LCD_Init+0x204>)
 8007130:	2200      	movs	r2, #0
 8007132:	611a      	str	r2, [r3, #16]
  CmdCfg.VSyncPol              = DSI_VSYNC_FALLING;
 8007134:	4b51      	ldr	r3, [pc, #324]	; (800727c <LCD_Init+0x204>)
 8007136:	2200      	movs	r2, #0
 8007138:	621a      	str	r2, [r3, #32]
  CmdCfg.AutomaticRefresh      = DSI_AR_DISABLE;
 800713a:	4b50      	ldr	r3, [pc, #320]	; (800727c <LCD_Init+0x204>)
 800713c:	2200      	movs	r2, #0
 800713e:	625a      	str	r2, [r3, #36]	; 0x24
  CmdCfg.TEAcknowledgeRequest  = DSI_TE_ACKNOWLEDGE_ENABLE;
 8007140:	4b4e      	ldr	r3, [pc, #312]	; (800727c <LCD_Init+0x204>)
 8007142:	2201      	movs	r2, #1
 8007144:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigAdaptedCommandMode(&hlcd_dsi, &CmdCfg);
 8007146:	494d      	ldr	r1, [pc, #308]	; (800727c <LCD_Init+0x204>)
 8007148:	484a      	ldr	r0, [pc, #296]	; (8007274 <LCD_Init+0x1fc>)
 800714a:	f7fb ff09 	bl	8002f60 <HAL_DSI_ConfigAdaptedCommandMode>
  
  LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_ENABLE;
 800714e:	4b4c      	ldr	r3, [pc, #304]	; (8007280 <LCD_Init+0x208>)
 8007150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007154:	601a      	str	r2, [r3, #0]
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_ENABLE;
 8007156:	4b4a      	ldr	r3, [pc, #296]	; (8007280 <LCD_Init+0x208>)
 8007158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800715c:	605a      	str	r2, [r3, #4]
  LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_ENABLE;
 800715e:	4b48      	ldr	r3, [pc, #288]	; (8007280 <LCD_Init+0x208>)
 8007160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007164:	609a      	str	r2, [r3, #8]
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_ENABLE;
 8007166:	4b46      	ldr	r3, [pc, #280]	; (8007280 <LCD_Init+0x208>)
 8007168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800716c:	60da      	str	r2, [r3, #12]
  LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_ENABLE;
 800716e:	4b44      	ldr	r3, [pc, #272]	; (8007280 <LCD_Init+0x208>)
 8007170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007174:	611a      	str	r2, [r3, #16]
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_ENABLE;
 8007176:	4b42      	ldr	r3, [pc, #264]	; (8007280 <LCD_Init+0x208>)
 8007178:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800717c:	615a      	str	r2, [r3, #20]
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_ENABLE;
 800717e:	4b40      	ldr	r3, [pc, #256]	; (8007280 <LCD_Init+0x208>)
 8007180:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007184:	619a      	str	r2, [r3, #24]
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_ENABLE;
 8007186:	4b3e      	ldr	r3, [pc, #248]	; (8007280 <LCD_Init+0x208>)
 8007188:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800718c:	61da      	str	r2, [r3, #28]
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_ENABLE;
 800718e:	4b3c      	ldr	r3, [pc, #240]	; (8007280 <LCD_Init+0x208>)
 8007190:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007194:	621a      	str	r2, [r3, #32]
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_ENABLE;
 8007196:	4b3a      	ldr	r3, [pc, #232]	; (8007280 <LCD_Init+0x208>)
 8007198:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800719c:	625a      	str	r2, [r3, #36]	; 0x24
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_ENABLE;
 800719e:	4b38      	ldr	r3, [pc, #224]	; (8007280 <LCD_Init+0x208>)
 80071a0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80071a4:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigCommand(&hlcd_dsi, &LPCmd);
 80071a6:	4936      	ldr	r1, [pc, #216]	; (8007280 <LCD_Init+0x208>)
 80071a8:	4832      	ldr	r0, [pc, #200]	; (8007274 <LCD_Init+0x1fc>)
 80071aa:	f7fb ffb3 	bl	8003114 <HAL_DSI_ConfigCommand>

  /* Initialize LTDC */
  LTDC_Init();
 80071ae:	f000 f873 	bl	8007298 <LTDC_Init>
  
  /* Start DSI */
  HAL_DSI_Start(&(hlcd_dsi));
 80071b2:	4830      	ldr	r0, [pc, #192]	; (8007274 <LCD_Init+0x1fc>)
 80071b4:	f7fc f89e 	bl	80032f4 <HAL_DSI_Start>
 
  /* Configure DSI PHY HS2LP and LP2HS timings */
  PhyTimings.ClockLaneHS2LPTime = 35;
 80071b8:	2323      	movs	r3, #35	; 0x23
 80071ba:	613b      	str	r3, [r7, #16]
  PhyTimings.ClockLaneLP2HSTime = 35;
 80071bc:	2323      	movs	r3, #35	; 0x23
 80071be:	617b      	str	r3, [r7, #20]
  PhyTimings.DataLaneHS2LPTime = 35;
 80071c0:	2323      	movs	r3, #35	; 0x23
 80071c2:	61bb      	str	r3, [r7, #24]
  PhyTimings.DataLaneLP2HSTime = 35;
 80071c4:	2323      	movs	r3, #35	; 0x23
 80071c6:	61fb      	str	r3, [r7, #28]
  PhyTimings.DataLaneMaxReadTime = 0;
 80071c8:	2300      	movs	r3, #0
 80071ca:	623b      	str	r3, [r7, #32]
  PhyTimings.StopWaitTime = 10;
 80071cc:	230a      	movs	r3, #10
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_DSI_ConfigPhyTimer(&hlcd_dsi, &PhyTimings);   
 80071d0:	f107 0310 	add.w	r3, r7, #16
 80071d4:	4619      	mov	r1, r3
 80071d6:	4827      	ldr	r0, [pc, #156]	; (8007274 <LCD_Init+0x1fc>)
 80071d8:	f7fc f822 	bl	8003220 <HAL_DSI_ConfigPhyTimer>
    
  /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
  */
  IOCtx.Address     = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	803b      	strh	r3, [r7, #0]
  IOCtx.GetTick     = BSP_GetTick;
 80071e0:	4b28      	ldr	r3, [pc, #160]	; (8007284 <LCD_Init+0x20c>)
 80071e2:	60fb      	str	r3, [r7, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 80071e4:	4b28      	ldr	r3, [pc, #160]	; (8007288 <LCD_Init+0x210>)
 80071e6:	607b      	str	r3, [r7, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 80071e8:	4b28      	ldr	r3, [pc, #160]	; (800728c <LCD_Init+0x214>)
 80071ea:	60bb      	str	r3, [r7, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 80071ec:	463b      	mov	r3, r7
 80071ee:	4619      	mov	r1, r3
 80071f0:	4827      	ldr	r0, [pc, #156]	; (8007290 <LCD_Init+0x218>)
 80071f2:	f7f9 f97d 	bl	80004f0 <OTM8009A_RegisterBusIO>
  Lcd_CompObj=(&OTM8009AObj);
 80071f6:	4b27      	ldr	r3, [pc, #156]	; (8007294 <LCD_Init+0x21c>)
 80071f8:	4a25      	ldr	r2, [pc, #148]	; (8007290 <LCD_Init+0x218>)
 80071fa:	601a      	str	r2, [r3, #0]
  OTM8009A_Init(Lcd_CompObj, OTM8009A_COLMOD_RGB888, LCD_ORIENTATION_LANDSCAPE);
 80071fc:	4b25      	ldr	r3, [pc, #148]	; (8007294 <LCD_Init+0x21c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	2201      	movs	r2, #1
 8007202:	2177      	movs	r1, #119	; 0x77
 8007204:	4618      	mov	r0, r3
 8007206:	f7f9 f9a1 	bl	800054c <OTM8009A_Init>
  
  LPCmd.LPGenShortWriteNoP    = DSI_LP_GSW0P_DISABLE;
 800720a:	4b1d      	ldr	r3, [pc, #116]	; (8007280 <LCD_Init+0x208>)
 800720c:	2200      	movs	r2, #0
 800720e:	601a      	str	r2, [r3, #0]
  LPCmd.LPGenShortWriteOneP   = DSI_LP_GSW1P_DISABLE;
 8007210:	4b1b      	ldr	r3, [pc, #108]	; (8007280 <LCD_Init+0x208>)
 8007212:	2200      	movs	r2, #0
 8007214:	605a      	str	r2, [r3, #4]
  LPCmd.LPGenShortWriteTwoP   = DSI_LP_GSW2P_DISABLE;
 8007216:	4b1a      	ldr	r3, [pc, #104]	; (8007280 <LCD_Init+0x208>)
 8007218:	2200      	movs	r2, #0
 800721a:	609a      	str	r2, [r3, #8]
  LPCmd.LPGenShortReadNoP     = DSI_LP_GSR0P_DISABLE;
 800721c:	4b18      	ldr	r3, [pc, #96]	; (8007280 <LCD_Init+0x208>)
 800721e:	2200      	movs	r2, #0
 8007220:	60da      	str	r2, [r3, #12]
  LPCmd.LPGenShortReadOneP    = DSI_LP_GSR1P_DISABLE;
 8007222:	4b17      	ldr	r3, [pc, #92]	; (8007280 <LCD_Init+0x208>)
 8007224:	2200      	movs	r2, #0
 8007226:	611a      	str	r2, [r3, #16]
  LPCmd.LPGenShortReadTwoP    = DSI_LP_GSR2P_DISABLE;
 8007228:	4b15      	ldr	r3, [pc, #84]	; (8007280 <LCD_Init+0x208>)
 800722a:	2200      	movs	r2, #0
 800722c:	615a      	str	r2, [r3, #20]
  LPCmd.LPGenLongWrite        = DSI_LP_GLW_DISABLE;
 800722e:	4b14      	ldr	r3, [pc, #80]	; (8007280 <LCD_Init+0x208>)
 8007230:	2200      	movs	r2, #0
 8007232:	619a      	str	r2, [r3, #24]
  LPCmd.LPDcsShortWriteNoP    = DSI_LP_DSW0P_DISABLE;
 8007234:	4b12      	ldr	r3, [pc, #72]	; (8007280 <LCD_Init+0x208>)
 8007236:	2200      	movs	r2, #0
 8007238:	61da      	str	r2, [r3, #28]
  LPCmd.LPDcsShortWriteOneP   = DSI_LP_DSW1P_DISABLE;
 800723a:	4b11      	ldr	r3, [pc, #68]	; (8007280 <LCD_Init+0x208>)
 800723c:	2200      	movs	r2, #0
 800723e:	621a      	str	r2, [r3, #32]
  LPCmd.LPDcsShortReadNoP     = DSI_LP_DSR0P_DISABLE;
 8007240:	4b0f      	ldr	r3, [pc, #60]	; (8007280 <LCD_Init+0x208>)
 8007242:	2200      	movs	r2, #0
 8007244:	625a      	str	r2, [r3, #36]	; 0x24
  LPCmd.LPDcsLongWrite        = DSI_LP_DLW_DISABLE;
 8007246:	4b0e      	ldr	r3, [pc, #56]	; (8007280 <LCD_Init+0x208>)
 8007248:	2200      	movs	r2, #0
 800724a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_DSI_ConfigCommand(&hlcd_dsi, &LPCmd);
 800724c:	490c      	ldr	r1, [pc, #48]	; (8007280 <LCD_Init+0x208>)
 800724e:	4809      	ldr	r0, [pc, #36]	; (8007274 <LCD_Init+0x1fc>)
 8007250:	f7fb ff60 	bl	8003114 <HAL_DSI_ConfigCommand>
  
  HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8007254:	2104      	movs	r1, #4
 8007256:	4807      	ldr	r0, [pc, #28]	; (8007274 <LCD_Init+0x1fc>)
 8007258:	f7fb ffba 	bl	80031d0 <HAL_DSI_ConfigFlowControl>
  HAL_DSI_ForceRXLowPower(&hlcd_dsi, ENABLE);  
 800725c:	2101      	movs	r1, #1
 800725e:	4805      	ldr	r0, [pc, #20]	; (8007274 <LCD_Init+0x1fc>)
 8007260:	f7fc fa23 	bl	80036aa <HAL_DSI_ForceRXLowPower>
  
  return BSP_ERROR_NONE;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3728      	adds	r7, #40	; 0x28
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20000358 	.word	0x20000358
 8007274:	20000078 	.word	0x20000078
 8007278:	2000034c 	.word	0x2000034c
 800727c:	200002ec 	.word	0x200002ec
 8007280:	20000318 	.word	0x20000318
 8007284:	0800126d 	.word	0x0800126d
 8007288:	080073a1 	.word	0x080073a1
 800728c:	08007419 	.word	0x08007419
 8007290:	20000428 	.word	0x20000428
 8007294:	20000448 	.word	0x20000448

08007298 <LTDC_Init>:
  * @brief  
  * @param  None
  * @retval None
  */
void LTDC_Init(void)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	af00      	add	r7, sp, #0
  /* DeInit */
  hlcd_ltdc.Instance = LTDC;
 800729c:	4b20      	ldr	r3, [pc, #128]	; (8007320 <LTDC_Init+0x88>)
 800729e:	4a21      	ldr	r2, [pc, #132]	; (8007324 <LTDC_Init+0x8c>)
 80072a0:	601a      	str	r2, [r3, #0]
  HAL_LTDC_DeInit(&hlcd_ltdc);
 80072a2:	481f      	ldr	r0, [pc, #124]	; (8007320 <LTDC_Init+0x88>)
 80072a4:	f7fc fcca 	bl	8003c3c <HAL_LTDC_DeInit>
  
  /* LTDC Config */
  /* Timing and polarity */
  hlcd_ltdc.Init.HorizontalSync = HSYNC;
 80072a8:	4b1d      	ldr	r3, [pc, #116]	; (8007320 <LTDC_Init+0x88>)
 80072aa:	2201      	movs	r2, #1
 80072ac:	615a      	str	r2, [r3, #20]
  hlcd_ltdc.Init.VerticalSync = VSYNC;
 80072ae:	4b1c      	ldr	r3, [pc, #112]	; (8007320 <LTDC_Init+0x88>)
 80072b0:	2201      	movs	r2, #1
 80072b2:	619a      	str	r2, [r3, #24]
  hlcd_ltdc.Init.AccumulatedHBP = HSYNC+HBP;
 80072b4:	4b1a      	ldr	r3, [pc, #104]	; (8007320 <LTDC_Init+0x88>)
 80072b6:	2202      	movs	r2, #2
 80072b8:	61da      	str	r2, [r3, #28]
  hlcd_ltdc.Init.AccumulatedVBP = VSYNC+VBP;
 80072ba:	4b19      	ldr	r3, [pc, #100]	; (8007320 <LTDC_Init+0x88>)
 80072bc:	2202      	movs	r2, #2
 80072be:	621a      	str	r2, [r3, #32]
  hlcd_ltdc.Init.AccumulatedActiveH = VSYNC+VBP+VACT;
 80072c0:	4b17      	ldr	r3, [pc, #92]	; (8007320 <LTDC_Init+0x88>)
 80072c2:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80072c6:	629a      	str	r2, [r3, #40]	; 0x28
  hlcd_ltdc.Init.AccumulatedActiveW = HSYNC+HBP+HACT;
 80072c8:	4b15      	ldr	r3, [pc, #84]	; (8007320 <LTDC_Init+0x88>)
 80072ca:	f240 3222 	movw	r2, #802	; 0x322
 80072ce:	625a      	str	r2, [r3, #36]	; 0x24
  hlcd_ltdc.Init.TotalHeigh = VSYNC+VBP+VACT+VFP;
 80072d0:	4b13      	ldr	r3, [pc, #76]	; (8007320 <LTDC_Init+0x88>)
 80072d2:	f240 12e3 	movw	r2, #483	; 0x1e3
 80072d6:	631a      	str	r2, [r3, #48]	; 0x30
  hlcd_ltdc.Init.TotalWidth = HSYNC+HBP+HACT+HFP;
 80072d8:	4b11      	ldr	r3, [pc, #68]	; (8007320 <LTDC_Init+0x88>)
 80072da:	f240 3223 	movw	r2, #803	; 0x323
 80072de:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* background value */
  hlcd_ltdc.Init.Backcolor.Blue = 0;
 80072e0:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <LTDC_Init+0x88>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hlcd_ltdc.Init.Backcolor.Green = 0;
 80072e8:	4b0d      	ldr	r3, [pc, #52]	; (8007320 <LTDC_Init+0x88>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hlcd_ltdc.Init.Backcolor.Red = 0;
 80072f0:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <LTDC_Init+0x88>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hlcd_ltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80072f8:	4b09      	ldr	r3, [pc, #36]	; (8007320 <LTDC_Init+0x88>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	605a      	str	r2, [r3, #4]
  hlcd_ltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80072fe:	4b08      	ldr	r3, [pc, #32]	; (8007320 <LTDC_Init+0x88>)
 8007300:	2200      	movs	r2, #0
 8007302:	609a      	str	r2, [r3, #8]
  hlcd_ltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007304:	4b06      	ldr	r3, [pc, #24]	; (8007320 <LTDC_Init+0x88>)
 8007306:	2200      	movs	r2, #0
 8007308:	60da      	str	r2, [r3, #12]
  hlcd_ltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800730a:	4b05      	ldr	r3, [pc, #20]	; (8007320 <LTDC_Init+0x88>)
 800730c:	2200      	movs	r2, #0
 800730e:	611a      	str	r2, [r3, #16]
  hlcd_ltdc.Instance = LTDC;
 8007310:	4b03      	ldr	r3, [pc, #12]	; (8007320 <LTDC_Init+0x88>)
 8007312:	4a04      	ldr	r2, [pc, #16]	; (8007324 <LTDC_Init+0x8c>)
 8007314:	601a      	str	r2, [r3, #0]

  HAL_LTDC_Init(&hlcd_ltdc);
 8007316:	4802      	ldr	r0, [pc, #8]	; (8007320 <LTDC_Init+0x88>)
 8007318:	f7fc fbc0 	bl	8003a9c <HAL_LTDC_Init>
}
 800731c:	bf00      	nop
 800731e:	bd80      	pop	{r7, pc}
 8007320:	200000fc 	.word	0x200000fc
 8007324:	50001000 	.word	0x50001000

08007328 <LCD_LayertInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
static void LCD_LayertInit(uint16_t LayerIndex, uint32_t Address)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b090      	sub	sp, #64	; 0x40
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	6039      	str	r1, [r7, #0]
 8007332:	80fb      	strh	r3, [r7, #6]
  LTDC_LayerCfgTypeDef  layercfg;

  /* Layer Init */
  layercfg.WindowX0 = 0;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
  layercfg.WindowX1 = Lcd_Ctx[0].XSize ;
 8007338:	4b17      	ldr	r3, [pc, #92]	; (8007398 <LCD_LayertInit+0x70>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	613b      	str	r3, [r7, #16]
  layercfg.WindowY0 = 0;
 800733e:	2300      	movs	r3, #0
 8007340:	617b      	str	r3, [r7, #20]
  layercfg.WindowY1 = Lcd_Ctx[0].YSize; 
 8007342:	4b15      	ldr	r3, [pc, #84]	; (8007398 <LCD_LayertInit+0x70>)
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	61bb      	str	r3, [r7, #24]
  layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8007348:	2300      	movs	r3, #0
 800734a:	61fb      	str	r3, [r7, #28]
  layercfg.FBStartAdress = Address;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	633b      	str	r3, [r7, #48]	; 0x30
  layercfg.Alpha = 255;
 8007350:	23ff      	movs	r3, #255	; 0xff
 8007352:	623b      	str	r3, [r7, #32]
  layercfg.Alpha0 = 0;
 8007354:	2300      	movs	r3, #0
 8007356:	627b      	str	r3, [r7, #36]	; 0x24
  layercfg.Backcolor.Blue = 0;
 8007358:	2300      	movs	r3, #0
 800735a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layercfg.Backcolor.Green = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layercfg.Backcolor.Red = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800736a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800736e:	62bb      	str	r3, [r7, #40]	; 0x28
  layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007370:	2307      	movs	r3, #7
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
  layercfg.ImageWidth = Lcd_Ctx[0].XSize;
 8007374:	4b08      	ldr	r3, [pc, #32]	; (8007398 <LCD_LayertInit+0x70>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	637b      	str	r3, [r7, #52]	; 0x34
  layercfg.ImageHeight = Lcd_Ctx[0].YSize;
 800737a:	4b07      	ldr	r3, [pc, #28]	; (8007398 <LCD_LayertInit+0x70>)
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hlcd_ltdc, &layercfg, LayerIndex); 
 8007380:	88fa      	ldrh	r2, [r7, #6]
 8007382:	f107 030c 	add.w	r3, r7, #12
 8007386:	4619      	mov	r1, r3
 8007388:	4804      	ldr	r0, [pc, #16]	; (800739c <LCD_LayertInit+0x74>)
 800738a:	f7fc fcc2 	bl	8003d12 <HAL_LTDC_ConfigLayer>
}
 800738e:	bf00      	nop
 8007390:	3740      	adds	r7, #64	; 0x40
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	200001a4 	.word	0x200001a4
 800739c:	200000fc 	.word	0x200000fc

080073a0 <DSI_IO_Write>:
  * @param  pData pointer to a buffer of data to be write
  * @param  Size To precise command to be used (short or long)
  * @retval BSP status
  */
static int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b088      	sub	sp, #32
 80073a4:	af02      	add	r7, sp, #8
 80073a6:	60ba      	str	r2, [r7, #8]
 80073a8:	461a      	mov	r2, r3
 80073aa:	4603      	mov	r3, r0
 80073ac:	81fb      	strh	r3, [r7, #14]
 80073ae:	460b      	mov	r3, r1
 80073b0:	81bb      	strh	r3, [r7, #12]
 80073b2:	4613      	mov	r3, r2
 80073b4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]

  if(Size <= 1U)
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d812      	bhi.n	80073e6 <DSI_IO_Write+0x46>
  {
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 80073c0:	89f9      	ldrh	r1, [r7, #14]
 80073c2:	89b8      	ldrh	r0, [r7, #12]
 80073c4:	88fb      	ldrh	r3, [r7, #6]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	4603      	mov	r3, r0
 80073d0:	2215      	movs	r2, #21
 80073d2:	4810      	ldr	r0, [pc, #64]	; (8007414 <DSI_IO_Write+0x74>)
 80073d4:	f7fb ffeb 	bl	80033ae <HAL_DSI_ShortWrite>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d014      	beq.n	8007408 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80073de:	f06f 0307 	mvn.w	r3, #7
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e010      	b.n	8007408 <DSI_IO_Write+0x68>
    }
  }
  else
  {
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 80073e6:	89f9      	ldrh	r1, [r7, #14]
 80073e8:	88f8      	ldrh	r0, [r7, #6]
 80073ea:	89bb      	ldrh	r3, [r7, #12]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	9201      	str	r2, [sp, #4]
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	4603      	mov	r3, r0
 80073f4:	2239      	movs	r2, #57	; 0x39
 80073f6:	4807      	ldr	r0, [pc, #28]	; (8007414 <DSI_IO_Write+0x74>)
 80073f8:	f7fb fffb 	bl	80033f2 <HAL_DSI_LongWrite>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8007402:	f06f 0307 	mvn.w	r3, #7
 8007406:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007408:	697b      	ldr	r3, [r7, #20]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3718      	adds	r7, #24
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
 8007412:	bf00      	nop
 8007414:	20000078 	.word	0x20000078

08007418 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08a      	sub	sp, #40	; 0x28
 800741c:	af04      	add	r7, sp, #16
 800741e:	60ba      	str	r2, [r7, #8]
 8007420:	461a      	mov	r2, r3
 8007422:	4603      	mov	r3, r0
 8007424:	81fb      	strh	r3, [r7, #14]
 8007426:	460b      	mov	r3, r1
 8007428:	81bb      	strh	r3, [r7, #12]
 800742a:	4613      	mov	r3, r2
 800742c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800742e:	2300      	movs	r3, #0
 8007430:	617b      	str	r3, [r7, #20]

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8007432:	89f9      	ldrh	r1, [r7, #14]
 8007434:	88f8      	ldrh	r0, [r7, #6]
 8007436:	89bb      	ldrh	r3, [r7, #12]
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	9202      	str	r2, [sp, #8]
 800743c:	9301      	str	r3, [sp, #4]
 800743e:	2306      	movs	r3, #6
 8007440:	9300      	str	r3, [sp, #0]
 8007442:	4603      	mov	r3, r0
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	4807      	ldr	r0, [pc, #28]	; (8007464 <DSI_IO_Read+0x4c>)
 8007448:	f7fc f86b 	bl	8003522 <HAL_DSI_Read>
 800744c:	4603      	mov	r3, r0
 800744e:	2b00      	cmp	r3, #0
 8007450:	d002      	beq.n	8007458 <DSI_IO_Read+0x40>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8007452:	f06f 0307 	mvn.w	r3, #7
 8007456:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007458:	697b      	ldr	r3, [r7, #20]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20000078 	.word	0x20000078

08007468 <LCD_MspInit>:

void LCD_MspInit(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
  /** @brief Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800746e:	4b3a      	ldr	r3, [pc, #232]	; (8007558 <LCD_MspInit+0xf0>)
 8007470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007474:	4a38      	ldr	r2, [pc, #224]	; (8007558 <LCD_MspInit+0xf0>)
 8007476:	f043 0308 	orr.w	r3, r3, #8
 800747a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800747e:	4b36      	ldr	r3, [pc, #216]	; (8007558 <LCD_MspInit+0xf0>)
 8007480:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007484:	f003 0308 	and.w	r3, r3, #8
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	68fb      	ldr	r3, [r7, #12]

  /** @brief Toggle Sw reset of LTDC IP */
  __HAL_RCC_LTDC_FORCE_RESET();
 800748c:	4b32      	ldr	r3, [pc, #200]	; (8007558 <LCD_MspInit+0xf0>)
 800748e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007492:	4a31      	ldr	r2, [pc, #196]	; (8007558 <LCD_MspInit+0xf0>)
 8007494:	f043 0308 	orr.w	r3, r3, #8
 8007498:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  __HAL_RCC_LTDC_RELEASE_RESET();
 800749c:	4b2e      	ldr	r3, [pc, #184]	; (8007558 <LCD_MspInit+0xf0>)
 800749e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074a2:	4a2d      	ldr	r2, [pc, #180]	; (8007558 <LCD_MspInit+0xf0>)
 80074a4:	f023 0308 	bic.w	r3, r3, #8
 80074a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

  /** @brief Enable the DMA2D clock */
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80074ac:	4b2a      	ldr	r3, [pc, #168]	; (8007558 <LCD_MspInit+0xf0>)
 80074ae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80074b2:	4a29      	ldr	r2, [pc, #164]	; (8007558 <LCD_MspInit+0xf0>)
 80074b4:	f043 0310 	orr.w	r3, r3, #16
 80074b8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80074bc:	4b26      	ldr	r3, [pc, #152]	; (8007558 <LCD_MspInit+0xf0>)
 80074be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	60bb      	str	r3, [r7, #8]
 80074c8:	68bb      	ldr	r3, [r7, #8]

  /** @brief Toggle Sw reset of DMA2D IP */
  __HAL_RCC_DMA2D_FORCE_RESET();
 80074ca:	4b23      	ldr	r3, [pc, #140]	; (8007558 <LCD_MspInit+0xf0>)
 80074cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ce:	4a22      	ldr	r2, [pc, #136]	; (8007558 <LCD_MspInit+0xf0>)
 80074d0:	f043 0310 	orr.w	r3, r3, #16
 80074d4:	67d3      	str	r3, [r2, #124]	; 0x7c
  __HAL_RCC_DMA2D_RELEASE_RESET();
 80074d6:	4b20      	ldr	r3, [pc, #128]	; (8007558 <LCD_MspInit+0xf0>)
 80074d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074da:	4a1f      	ldr	r2, [pc, #124]	; (8007558 <LCD_MspInit+0xf0>)
 80074dc:	f023 0310 	bic.w	r3, r3, #16
 80074e0:	67d3      	str	r3, [r2, #124]	; 0x7c

  /** @brief Enable DSI Host and wrapper clocks */
  __HAL_RCC_DSI_CLK_ENABLE();
 80074e2:	4b1d      	ldr	r3, [pc, #116]	; (8007558 <LCD_MspInit+0xf0>)
 80074e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80074e8:	4a1b      	ldr	r2, [pc, #108]	; (8007558 <LCD_MspInit+0xf0>)
 80074ea:	f043 0310 	orr.w	r3, r3, #16
 80074ee:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80074f2:	4b19      	ldr	r3, [pc, #100]	; (8007558 <LCD_MspInit+0xf0>)
 80074f4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	607b      	str	r3, [r7, #4]
 80074fe:	687b      	ldr	r3, [r7, #4]

  /** @brief Soft Reset the DSI Host and wrapper */
  __HAL_RCC_DSI_FORCE_RESET();
 8007500:	4b15      	ldr	r3, [pc, #84]	; (8007558 <LCD_MspInit+0xf0>)
 8007502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007506:	4a14      	ldr	r2, [pc, #80]	; (8007558 <LCD_MspInit+0xf0>)
 8007508:	f043 0310 	orr.w	r3, r3, #16
 800750c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
  __HAL_RCC_DSI_RELEASE_RESET();
 8007510:	4b11      	ldr	r3, [pc, #68]	; (8007558 <LCD_MspInit+0xf0>)
 8007512:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007516:	4a10      	ldr	r2, [pc, #64]	; (8007558 <LCD_MspInit+0xf0>)
 8007518:	f023 0310 	bic.w	r3, r3, #16
 800751c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

  /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 9, 0xf);
 8007520:	220f      	movs	r2, #15
 8007522:	2109      	movs	r1, #9
 8007524:	2058      	movs	r0, #88	; 0x58
 8007526:	f7fa feca 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800752a:	2058      	movs	r0, #88	; 0x58
 800752c:	f7fa fee1 	bl	80022f2 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 9, 0xf);
 8007530:	220f      	movs	r2, #15
 8007532:	2109      	movs	r1, #9
 8007534:	205a      	movs	r0, #90	; 0x5a
 8007536:	f7fa fec2 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800753a:	205a      	movs	r0, #90	; 0x5a
 800753c:	f7fa fed9 	bl	80022f2 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 9, 0xf);
 8007540:	220f      	movs	r2, #15
 8007542:	2109      	movs	r1, #9
 8007544:	207b      	movs	r0, #123	; 0x7b
 8007546:	f7fa feba 	bl	80022be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800754a:	207b      	movs	r0, #123	; 0x7b
 800754c:	f7fa fed1 	bl	80022f2 <HAL_NVIC_EnableIRQ>
}
 8007550:	bf00      	nop
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	58024400 	.word	0x58024400

0800755c <LCD_BriefDisplay>:
  * @brief  Display Example description.
  * @param  None
  * @retval None
  */
static void LCD_BriefDisplay(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af02      	add	r7, sp, #8
  UTIL_LCD_SetFont(&Font24);  
 8007562:	4819      	ldr	r0, [pc, #100]	; (80075c8 <LCD_BriefDisplay+0x6c>)
 8007564:	f000 fad0 	bl	8007b08 <UTIL_LCD_SetFont>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE); 
 8007568:	4818      	ldr	r0, [pc, #96]	; (80075cc <LCD_BriefDisplay+0x70>)
 800756a:	f000 faa5 	bl	8007ab8 <UTIL_LCD_SetTextColor>
  UTIL_LCD_FillRect(0, 0, 800, 112, UTIL_LCD_COLOR_BLUE); 
 800756e:	4b17      	ldr	r3, [pc, #92]	; (80075cc <LCD_BriefDisplay+0x70>)
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	2370      	movs	r3, #112	; 0x70
 8007574:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007578:	2100      	movs	r1, #0
 800757a:	2000      	movs	r0, #0
 800757c:	f000 fbfe 	bl	8007d7c <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8007580:	f04f 30ff 	mov.w	r0, #4294967295
 8007584:	f000 fa98 	bl	8007ab8 <UTIL_LCD_SetTextColor>
  UTIL_LCD_FillRect(0, 112, 800, 368, UTIL_LCD_COLOR_WHITE);
 8007588:	f04f 33ff 	mov.w	r3, #4294967295
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8007592:	f44f 7248 	mov.w	r2, #800	; 0x320
 8007596:	2170      	movs	r1, #112	; 0x70
 8007598:	2000      	movs	r0, #0
 800759a:	f000 fbef 	bl	8007d7c <UTIL_LCD_FillRect>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);  
 800759e:	480b      	ldr	r0, [pc, #44]	; (80075cc <LCD_BriefDisplay+0x70>)
 80075a0:	f000 fa9e 	bl	8007ae0 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAtLine(1, (uint8_t *)"           LCD_DSI_CmdMode_DoubleBuffering");
 80075a4:	490a      	ldr	r1, [pc, #40]	; (80075d0 <LCD_BriefDisplay+0x74>)
 80075a6:	2001      	movs	r0, #1
 80075a8:	f000 fbd2 	bl	8007d50 <UTIL_LCD_DisplayStringAtLine>
  UTIL_LCD_SetFont(&Font16);
 80075ac:	4809      	ldr	r0, [pc, #36]	; (80075d4 <LCD_BriefDisplay+0x78>)
 80075ae:	f000 faab 	bl	8007b08 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAtLine(4, (uint8_t *)"This example shows how to display images on LCD DSI using two buffers");
 80075b2:	4909      	ldr	r1, [pc, #36]	; (80075d8 <LCD_BriefDisplay+0x7c>)
 80075b4:	2004      	movs	r0, #4
 80075b6:	f000 fbcb 	bl	8007d50 <UTIL_LCD_DisplayStringAtLine>
  UTIL_LCD_DisplayStringAtLine(5, (uint8_t *)"one for display and the other for draw");  
 80075ba:	4908      	ldr	r1, [pc, #32]	; (80075dc <LCD_BriefDisplay+0x80>)
 80075bc:	2005      	movs	r0, #5
 80075be:	f000 fbc7 	bl	8007d50 <UTIL_LCD_DisplayStringAtLine>
}
 80075c2:	bf00      	nop
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	2000002c 	.word	0x2000002c
 80075cc:	ff0000ff 	.word	0xff0000ff
 80075d0:	0800810c 	.word	0x0800810c
 80075d4:	20000034 	.word	0x20000034
 80075d8:	08008138 	.word	0x08008138
 80075dc:	08008180 	.word	0x08008180

080075e0 <CopyBuffer>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void CopyBuffer(uint32_t *pSrc, uint32_t *pDst, uint16_t x, uint16_t y, uint16_t xsize, uint16_t ysize)
{   
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	4611      	mov	r1, r2
 80075ec:	461a      	mov	r2, r3
 80075ee:	460b      	mov	r3, r1
 80075f0:	80fb      	strh	r3, [r7, #6]
 80075f2:	4613      	mov	r3, r2
 80075f4:	80bb      	strh	r3, [r7, #4]
  
  uint32_t destination = (uint32_t)pDst + (y * 800 + x) * 4;
 80075f6:	88bb      	ldrh	r3, [r7, #4]
 80075f8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80075fc:	fb03 f202 	mul.w	r2, r3, r2
 8007600:	88fb      	ldrh	r3, [r7, #6]
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	461a      	mov	r2, r3
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	4413      	add	r3, r2
 800760c:	617b      	str	r3, [r7, #20]
  uint32_t source      = (uint32_t)pSrc;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	613b      	str	r3, [r7, #16]
  
  /*##-1- Configure the DMA2D Mode, Color Mode and output offset #############*/ 
  hdma2d.Init.Mode         = DMA2D_M2M;
 8007612:	4b25      	ldr	r3, [pc, #148]	; (80076a8 <CopyBuffer+0xc8>)
 8007614:	2200      	movs	r2, #0
 8007616:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8007618:	4b23      	ldr	r3, [pc, #140]	; (80076a8 <CopyBuffer+0xc8>)
 800761a:	2200      	movs	r2, #0
 800761c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 800 - xsize;
 800761e:	8c3b      	ldrh	r3, [r7, #32]
 8007620:	f5c3 7348 	rsb	r3, r3, #800	; 0x320
 8007624:	461a      	mov	r2, r3
 8007626:	4b20      	ldr	r3, [pc, #128]	; (80076a8 <CopyBuffer+0xc8>)
 8007628:	60da      	str	r2, [r3, #12]
  hdma2d.Init.AlphaInverted = DMA2D_REGULAR_ALPHA;  /* No Output Alpha Inversion*/  
 800762a:	4b1f      	ldr	r3, [pc, #124]	; (80076a8 <CopyBuffer+0xc8>)
 800762c:	2200      	movs	r2, #0
 800762e:	611a      	str	r2, [r3, #16]
  hdma2d.Init.RedBlueSwap   = DMA2D_RB_REGULAR;     /* No Output Red & Blue swap */    
 8007630:	4b1d      	ldr	r3, [pc, #116]	; (80076a8 <CopyBuffer+0xc8>)
 8007632:	2200      	movs	r2, #0
 8007634:	615a      	str	r2, [r3, #20]
  
  /*##-2- DMA2D Callbacks Configuration ######################################*/
  hdma2d.XferCpltCallback  = NULL;
 8007636:	4b1c      	ldr	r3, [pc, #112]	; (80076a8 <CopyBuffer+0xc8>)
 8007638:	2200      	movs	r2, #0
 800763a:	621a      	str	r2, [r3, #32]
  
  /*##-3- Foreground Configuration ###########################################*/
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800763c:	4b1a      	ldr	r3, [pc, #104]	; (80076a8 <CopyBuffer+0xc8>)
 800763e:	2200      	movs	r2, #0
 8007640:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma2d.LayerCfg[1].InputAlpha = 0xFF;
 8007642:	4b19      	ldr	r3, [pc, #100]	; (80076a8 <CopyBuffer+0xc8>)
 8007644:	22ff      	movs	r2, #255	; 0xff
 8007646:	651a      	str	r2, [r3, #80]	; 0x50
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8007648:	4b17      	ldr	r3, [pc, #92]	; (80076a8 <CopyBuffer+0xc8>)
 800764a:	2200      	movs	r2, #0
 800764c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].InputOffset = 0;
 800764e:	4b16      	ldr	r3, [pc, #88]	; (80076a8 <CopyBuffer+0xc8>)
 8007650:	2200      	movs	r2, #0
 8007652:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR; /* No ForeGround Red/Blue swap */
 8007654:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <CopyBuffer+0xc8>)
 8007656:	2200      	movs	r2, #0
 8007658:	659a      	str	r2, [r3, #88]	; 0x58
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA; /* No ForeGround Alpha inversion */  
 800765a:	4b13      	ldr	r3, [pc, #76]	; (80076a8 <CopyBuffer+0xc8>)
 800765c:	2200      	movs	r2, #0
 800765e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma2d.Instance          = DMA2D; 
 8007660:	4b11      	ldr	r3, [pc, #68]	; (80076a8 <CopyBuffer+0xc8>)
 8007662:	4a12      	ldr	r2, [pc, #72]	; (80076ac <CopyBuffer+0xcc>)
 8007664:	601a      	str	r2, [r3, #0]
   
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK) 
 8007666:	4810      	ldr	r0, [pc, #64]	; (80076a8 <CopyBuffer+0xc8>)
 8007668:	f7fa feda 	bl	8002420 <HAL_DMA2D_Init>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d116      	bne.n	80076a0 <CopyBuffer+0xc0>
  {
    if(HAL_DMA2D_ConfigLayer(&hdma2d, 1) == HAL_OK) 
 8007672:	2101      	movs	r1, #1
 8007674:	480c      	ldr	r0, [pc, #48]	; (80076a8 <CopyBuffer+0xc8>)
 8007676:	f7fb f855 	bl	8002724 <HAL_DMA2D_ConfigLayer>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10f      	bne.n	80076a0 <CopyBuffer+0xc0>
    {
      if (HAL_DMA2D_Start(&hdma2d, source, destination, xsize, ysize) == HAL_OK)
 8007680:	8c3a      	ldrh	r2, [r7, #32]
 8007682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	4613      	mov	r3, r2
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	6939      	ldr	r1, [r7, #16]
 800768c:	4806      	ldr	r0, [pc, #24]	; (80076a8 <CopyBuffer+0xc8>)
 800768e:	f7fa ff35 	bl	80024fc <HAL_DMA2D_Start>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d103      	bne.n	80076a0 <CopyBuffer+0xc0>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hdma2d, 100);
 8007698:	2164      	movs	r1, #100	; 0x64
 800769a:	4803      	ldr	r0, [pc, #12]	; (80076a8 <CopyBuffer+0xc8>)
 800769c:	f7fa ff59 	bl	8002552 <HAL_DMA2D_PollForTransfer>
      }
    }
  }   
}
 80076a0:	bf00      	nop
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000284 	.word	0x20000284
 80076ac:	52001000 	.word	0x52001000

080076b0 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b09e      	sub	sp, #120	; 0x78
 80076b4:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  
  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80076bc:	2004      	movs	r0, #4
 80076be:	f7fc fe3d 	bl	800433c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80076c2:	2300      	movs	r3, #0
 80076c4:	607b      	str	r3, [r7, #4]
 80076c6:	4b42      	ldr	r3, [pc, #264]	; (80077d0 <SystemClock_Config+0x120>)
 80076c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ca:	4a41      	ldr	r2, [pc, #260]	; (80077d0 <SystemClock_Config+0x120>)
 80076cc:	f023 0301 	bic.w	r3, r3, #1
 80076d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80076d2:	4b3f      	ldr	r3, [pc, #252]	; (80077d0 <SystemClock_Config+0x120>)
 80076d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d6:	f003 0301 	and.w	r3, r3, #1
 80076da:	607b      	str	r3, [r7, #4]
 80076dc:	4b3d      	ldr	r3, [pc, #244]	; (80077d4 <SystemClock_Config+0x124>)
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	4a3c      	ldr	r2, [pc, #240]	; (80077d4 <SystemClock_Config+0x124>)
 80076e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076e6:	6193      	str	r3, [r2, #24]
 80076e8:	4b3a      	ldr	r3, [pc, #232]	; (80077d4 <SystemClock_Config+0x124>)
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80076f0:	607b      	str	r3, [r7, #4]
 80076f2:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80076f4:	bf00      	nop
 80076f6:	4b37      	ldr	r3, [pc, #220]	; (80077d4 <SystemClock_Config+0x124>)
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007702:	d1f8      	bne.n	80076f6 <SystemClock_Config+0x46>
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007704:	2301      	movs	r3, #1
 8007706:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007708:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800770c:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8007712:	2300      	movs	r3, #0
 8007714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007716:	2302      	movs	r3, #2
 8007718:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800771a:	2302      	movs	r3, #2
 800771c:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 5;
 800771e:	2305      	movs	r3, #5
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 160;
 8007722:	23a0      	movs	r3, #160	; 0xa0
 8007724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007726:	2300      	movs	r3, #0
 8007728:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 800772a:	2302      	movs	r3, #2
 800772c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800772e:	2302      	movs	r3, #2
 8007730:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007732:	2304      	movs	r3, #4
 8007734:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007736:	2300      	movs	r3, #0
 8007738:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800773a:	2308      	movs	r3, #8
 800773c:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800773e:	f107 0308 	add.w	r3, r7, #8
 8007742:	4618      	mov	r0, r3
 8007744:	f7fc fe54 	bl	80043f0 <HAL_RCC_OscConfig>
 8007748:	4603      	mov	r3, r0
 800774a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800774e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8007756:	f000 f8f0 	bl	800793a <Error_Handler>
  }
  
/* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 800775a:	233f      	movs	r3, #63	; 0x3f
 800775c:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800775e:	2303      	movs	r3, #3
 8007760:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007762:	2300      	movs	r3, #0
 8007764:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007766:	2308      	movs	r3, #8
 8007768:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 800776a:	2340      	movs	r3, #64	; 0x40
 800776c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 800776e:	2340      	movs	r3, #64	; 0x40
 8007770:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 8007772:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007776:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 8007778:	2340      	movs	r3, #64	; 0x40
 800777a:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800777c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007780:	2104      	movs	r1, #4
 8007782:	4618      	mov	r0, r3
 8007784:	f7fd fa8e 	bl	8004ca4 <HAL_RCC_ClockConfig>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800778e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8007796:	f000 f8d0 	bl	800793a <Error_Handler>
        - The activation of the SYSCFG clock
        - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
 */
 
  /*activate CSI clock mondatory for I/O Compensation Cell*/  
  __HAL_RCC_CSI_ENABLE() ;
 800779a:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <SystemClock_Config+0x128>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a0e      	ldr	r2, [pc, #56]	; (80077d8 <SystemClock_Config+0x128>)
 80077a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a4:	6013      	str	r3, [r2, #0]
    
  /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
  __HAL_RCC_SYSCFG_CLK_ENABLE() ;
 80077a6:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <SystemClock_Config+0x128>)
 80077a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077ac:	4a0a      	ldr	r2, [pc, #40]	; (80077d8 <SystemClock_Config+0x128>)
 80077ae:	f043 0302 	orr.w	r3, r3, #2
 80077b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80077b6:	4b08      	ldr	r3, [pc, #32]	; (80077d8 <SystemClock_Config+0x128>)
 80077b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80077bc:	f003 0302 	and.w	r3, r3, #2
 80077c0:	603b      	str	r3, [r7, #0]
 80077c2:	683b      	ldr	r3, [r7, #0]
  
  /* Enables the I/O Compensation Cell */    
  HAL_EnableCompensationCell();  
 80077c4:	f7fa fc90 	bl	80020e8 <HAL_EnableCompensationCell>
}
 80077c8:	bf00      	nop
 80077ca:	3778      	adds	r7, #120	; 0x78
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	58000400 	.word	0x58000400
 80077d4:	58024800 	.word	0x58024800
 80077d8:	58024400 	.word	0x58024400

080077dc <CPU_CACHE_Enable>:
* @brief  CPU L1-Cache enable.
* @param  None
* @retval None
*/
static void CPU_CACHE_Enable(void)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80077e2:	4b34      	ldr	r3, [pc, #208]	; (80078b4 <CPU_CACHE_Enable+0xd8>)
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d11b      	bne.n	8007826 <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80077ee:	f3bf 8f4f 	dsb	sy
}
 80077f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80077f4:	f3bf 8f6f 	isb	sy
}
 80077f8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80077fa:	4b2e      	ldr	r3, [pc, #184]	; (80078b4 <CPU_CACHE_Enable+0xd8>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007802:	f3bf 8f4f 	dsb	sy
}
 8007806:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007808:	f3bf 8f6f 	isb	sy
}
 800780c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800780e:	4b29      	ldr	r3, [pc, #164]	; (80078b4 <CPU_CACHE_Enable+0xd8>)
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	4a28      	ldr	r2, [pc, #160]	; (80078b4 <CPU_CACHE_Enable+0xd8>)
 8007814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007818:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800781a:	f3bf 8f4f 	dsb	sy
}
 800781e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007820:	f3bf 8f6f 	isb	sy
}
 8007824:	e000      	b.n	8007828 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8007826:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8007828:	4b22      	ldr	r3, [pc, #136]	; (80078b4 <CPU_CACHE_Enable+0xd8>)
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d138      	bne.n	80078a6 <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8007834:	4b1f      	ldr	r3, [pc, #124]	; (80078b4 <CPU_CACHE_Enable+0xd8>)
 8007836:	2200      	movs	r2, #0
 8007838:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800783c:	f3bf 8f4f 	dsb	sy
}
 8007840:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8007842:	4b1c      	ldr	r3, [pc, #112]	; (80078b4 <CPU_CACHE_Enable+0xd8>)
 8007844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007848:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	0b5b      	lsrs	r3, r3, #13
 800784e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007852:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	08db      	lsrs	r3, r3, #3
 8007858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800785c:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007866:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800786c:	4911      	ldr	r1, [pc, #68]	; (80078b4 <CPU_CACHE_Enable+0xd8>)
 800786e:	4313      	orrs	r3, r2
 8007870:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	1e5a      	subs	r2, r3, #1
 8007878:	607a      	str	r2, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1ef      	bne.n	800785e <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	1e5a      	subs	r2, r3, #1
 8007882:	60ba      	str	r2, [r7, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e5      	bne.n	8007854 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8007888:	f3bf 8f4f 	dsb	sy
}
 800788c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800788e:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <CPU_CACHE_Enable+0xd8>)
 8007890:	695b      	ldr	r3, [r3, #20]
 8007892:	4a08      	ldr	r2, [pc, #32]	; (80078b4 <CPU_CACHE_Enable+0xd8>)
 8007894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007898:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800789a:	f3bf 8f4f 	dsb	sy
}
 800789e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80078a0:	f3bf 8f6f 	isb	sy
}
 80078a4:	e000      	b.n	80078a8 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80078a6:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80078a8:	bf00      	nop
 80078aa:	3714      	adds	r7, #20
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr
 80078b4:	e000ed00 	.word	0xe000ed00

080078b8 <MPU_Config>:
  *         The Configured Region Size is 32MB because same as SDRAM size.
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 80078be:	f7fa fd33 	bl	8002328 <HAL_MPU_Disable>

  /* Configure the MPU as Strongly ordered for not defined regions */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80078c2:	2301      	movs	r3, #1
 80078c4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x00;
 80078c6:	2300      	movs	r3, #0
 80078c8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80078ca:	231f      	movs	r3, #31
 80078cc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80078ce:	2300      	movs	r3, #0
 80078d0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80078d2:	2300      	movs	r3, #0
 80078d4:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80078d6:	2300      	movs	r3, #0
 80078d8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80078da:	2301      	movs	r3, #1
 80078dc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80078de:	2300      	movs	r3, #0
 80078e0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80078e6:	2387      	movs	r3, #135	; 0x87
 80078e8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80078ea:	2301      	movs	r3, #1
 80078ec:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80078ee:	463b      	mov	r3, r7
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fa fd51 	bl	8002398 <HAL_MPU_ConfigRegion>

  /* Configure the MPU attributes as WT for SDRAM */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80078f6:	2301      	movs	r3, #1
 80078f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 80078fa:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80078fe:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8007900:	2318      	movs	r3, #24
 8007902:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8007904:	2303      	movs	r3, #3
 8007906:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8007908:	2300      	movs	r3, #0
 800790a:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800790c:	2301      	movs	r3, #1
 800790e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8007910:	2300      	movs	r3, #0
 8007912:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8007914:	2301      	movs	r3, #1
 8007916:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8007918:	2300      	movs	r3, #0
 800791a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800791c:	2300      	movs	r3, #0
 800791e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8007920:	2300      	movs	r3, #0
 8007922:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8007924:	463b      	mov	r3, r7
 8007926:	4618      	mov	r0, r3
 8007928:	f7fa fd36 	bl	8002398 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800792c:	2004      	movs	r0, #4
 800792e:	f7fa fd13 	bl	8002358 <HAL_MPU_Enable>
}
 8007932:	bf00      	nop
 8007934:	3710      	adds	r7, #16
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}

0800793a <Error_Handler>:
/**
  * @brief Error Handler
  * @retval None
  */
static void Error_Handler(void)
{
 800793a:	b580      	push	{r7, lr}
 800793c:	af00      	add	r7, sp, #0
  
  BSP_LED_On(LED3);
 800793e:	2002      	movs	r0, #2
 8007940:	f7f9 fc76 	bl	8001230 <BSP_LED_On>
  while(1) { ; } /* Blocking on error */
 8007944:	e7fe      	b.n	8007944 <Error_Handler+0xa>

08007946 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8007946:	b480      	push	{r7}
 8007948:	af00      	add	r7, sp, #0
}
 800794a:	bf00      	nop
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8007954:	b480      	push	{r7}
 8007956:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8007958:	e7fe      	b.n	8007958 <HardFault_Handler+0x4>

0800795a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800795a:	b480      	push	{r7}
 800795c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800795e:	e7fe      	b.n	800795e <MemManage_Handler+0x4>

08007960 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8007964:	e7fe      	b.n	8007964 <BusFault_Handler+0x4>

08007966 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8007966:	b480      	push	{r7}
 8007968:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800796a:	e7fe      	b.n	800796a <UsageFault_Handler+0x4>

0800796c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
}
 8007970:	bf00      	nop
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800797a:	b480      	push	{r7}
 800797c:	af00      	add	r7, sp, #0
}
 800797e:	bf00      	nop
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
}
 800798c:	bf00      	nop
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800799a:	f7fa fb55 	bl	8002048 <HAL_IncTick>
}
 800799e:	bf00      	nop
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <DSI_IRQHandler>:
  * @brief  This function handles DSI Handler.
  * @param  None
  * @retval None
  */
void DSI_IRQHandler(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  HAL_DSI_IRQHandler(&hlcd_dsi);
 80079a8:	4802      	ldr	r0, [pc, #8]	; (80079b4 <DSI_IRQHandler+0x10>)
 80079aa:	f7fb f9fb 	bl	8002da4 <HAL_DSI_IRQHandler>
}
 80079ae:	bf00      	nop
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20000078 	.word	0x20000078

080079b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80079b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80079f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80079bc:	f7fa fa54 	bl	8001e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80079c0:	480c      	ldr	r0, [pc, #48]	; (80079f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80079c2:	490d      	ldr	r1, [pc, #52]	; (80079f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80079c4:	4a0d      	ldr	r2, [pc, #52]	; (80079fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80079c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80079c8:	e002      	b.n	80079d0 <LoopCopyDataInit>

080079ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80079ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80079cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80079ce:	3304      	adds	r3, #4

080079d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80079d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80079d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80079d4:	d3f9      	bcc.n	80079ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80079d6:	4a0a      	ldr	r2, [pc, #40]	; (8007a00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80079d8:	4c0a      	ldr	r4, [pc, #40]	; (8007a04 <LoopFillZerobss+0x22>)
  movs r3, #0
 80079da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80079dc:	e001      	b.n	80079e2 <LoopFillZerobss>

080079de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80079de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80079e0:	3204      	adds	r2, #4

080079e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80079e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80079e4:	d3fb      	bcc.n	80079de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80079e6:	f000 fb5d 	bl	80080a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80079ea:	f7ff f9df 	bl	8006dac <main>
  bx  lr
 80079ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80079f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80079f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80079f8:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80079fc:	080a0a08 	.word	0x080a0a08
  ldr r2, =_sbss
 8007a00:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8007a04:	200004b8 	.word	0x200004b8

08007a08 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a08:	e7fe      	b.n	8007a08 <ADC3_IRQHandler>
	...

08007a0c <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a22      	ldr	r2, [pc, #136]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a1a:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	4a20      	ldr	r2, [pc, #128]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a22:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	4a1e      	ldr	r2, [pc, #120]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a2a:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	4a1c      	ldr	r2, [pc, #112]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a32:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	691b      	ldr	r3, [r3, #16]
 8007a38:	4a1a      	ldr	r2, [pc, #104]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a3a:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	695b      	ldr	r3, [r3, #20]
 8007a40:	4a18      	ldr	r2, [pc, #96]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a42:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	699b      	ldr	r3, [r3, #24]
 8007a48:	4a16      	ldr	r2, [pc, #88]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a4a:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	69db      	ldr	r3, [r3, #28]
 8007a50:	4a14      	ldr	r2, [pc, #80]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a52:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	4a12      	ldr	r2, [pc, #72]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a5a:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	4a10      	ldr	r2, [pc, #64]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a62:	6253      	str	r3, [r2, #36]	; 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a68:	4a0e      	ldr	r2, [pc, #56]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a6a:	6293      	str	r3, [r2, #40]	; 0x28

  DrawProp->LcdLayer = 0;
 8007a6c:	4b0e      	ldr	r3, [pc, #56]	; (8007aa8 <UTIL_LCD_SetFuncDriver+0x9c>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8007a72:	4b0d      	ldr	r3, [pc, #52]	; (8007aa8 <UTIL_LCD_SetFuncDriver+0x9c>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8007a78:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a7a:	69db      	ldr	r3, [r3, #28]
 8007a7c:	4a0b      	ldr	r2, [pc, #44]	; (8007aac <UTIL_LCD_SetFuncDriver+0xa0>)
 8007a7e:	4611      	mov	r1, r2
 8007a80:	2000      	movs	r0, #0
 8007a82:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8007a84:	4b07      	ldr	r3, [pc, #28]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	4a09      	ldr	r2, [pc, #36]	; (8007ab0 <UTIL_LCD_SetFuncDriver+0xa4>)
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8007a90:	4b04      	ldr	r3, [pc, #16]	; (8007aa4 <UTIL_LCD_SetFuncDriver+0x98>)
 8007a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a94:	4a07      	ldr	r2, [pc, #28]	; (8007ab4 <UTIL_LCD_SetFuncDriver+0xa8>)
 8007a96:	4611      	mov	r1, r2
 8007a98:	2000      	movs	r0, #0
 8007a9a:	4798      	blx	r3
}
 8007a9c:	bf00      	nop
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	2000048c 	.word	0x2000048c
 8007aa8:	2000044c 	.word	0x2000044c
 8007aac:	20000460 	.word	0x20000460
 8007ab0:	20000464 	.word	0x20000464
 8007ab4:	20000468 	.word	0x20000468

08007ab8 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8007ac0:	4b06      	ldr	r3, [pc, #24]	; (8007adc <UTIL_LCD_SetTextColor+0x24>)
 8007ac2:	68db      	ldr	r3, [r3, #12]
 8007ac4:	4a05      	ldr	r2, [pc, #20]	; (8007adc <UTIL_LCD_SetTextColor+0x24>)
 8007ac6:	015b      	lsls	r3, r3, #5
 8007ac8:	4413      	add	r3, r2
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	601a      	str	r2, [r3, #0]
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	2000044c 	.word	0x2000044c

08007ae0 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8007ae8:	4b06      	ldr	r3, [pc, #24]	; (8007b04 <UTIL_LCD_SetBackColor+0x24>)
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	4a05      	ldr	r2, [pc, #20]	; (8007b04 <UTIL_LCD_SetBackColor+0x24>)
 8007aee:	015b      	lsls	r3, r3, #5
 8007af0:	4413      	add	r3, r2
 8007af2:	3304      	adds	r3, #4
 8007af4:	687a      	ldr	r2, [r7, #4]
 8007af6:	601a      	str	r2, [r3, #0]
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	2000044c 	.word	0x2000044c

08007b08 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8007b10:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <UTIL_LCD_SetFont+0x24>)
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	4a05      	ldr	r2, [pc, #20]	; (8007b2c <UTIL_LCD_SetFont+0x24>)
 8007b16:	015b      	lsls	r3, r3, #5
 8007b18:	4413      	add	r3, r2
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	601a      	str	r2, [r3, #0]
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	2000044c 	.word	0x2000044c

08007b30 <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
 8007b30:	b480      	push	{r7}
 8007b32:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
 8007b34:	4b05      	ldr	r3, [pc, #20]	; (8007b4c <UTIL_LCD_GetFont+0x1c>)
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	4a04      	ldr	r2, [pc, #16]	; (8007b4c <UTIL_LCD_GetFont+0x1c>)
 8007b3a:	015b      	lsls	r3, r3, #5
 8007b3c:	4413      	add	r3, r2
 8007b3e:	3308      	adds	r3, #8
 8007b40:	681b      	ldr	r3, [r3, #0]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	2000044c 	.word	0x2000044c

08007b50 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8007b50:	b590      	push	{r4, r7, lr}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af02      	add	r7, sp, #8
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8007b5e:	4b08      	ldr	r3, [pc, #32]	; (8007b80 <UTIL_LCD_FillRGBRect+0x30>)
 8007b60:	685c      	ldr	r4, [r3, #4]
 8007b62:	4b08      	ldr	r3, [pc, #32]	; (8007b84 <UTIL_LCD_FillRGBRect+0x34>)
 8007b64:	6918      	ldr	r0, [r3, #16]
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	9301      	str	r3, [sp, #4]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	68ba      	ldr	r2, [r7, #8]
 8007b72:	68f9      	ldr	r1, [r7, #12]
 8007b74:	47a0      	blx	r4
}
 8007b76:	bf00      	nop
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd90      	pop	{r4, r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	2000048c 	.word	0x2000048c
 8007b84:	2000044c 	.word	0x2000044c

08007b88 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	4613      	mov	r3, r2
 8007b94:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8007b96:	4b16      	ldr	r3, [pc, #88]	; (8007bf0 <UTIL_LCD_DisplayChar+0x68>)
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <UTIL_LCD_DisplayChar+0x68>)
 8007b9c:	015b      	lsls	r3, r3, #5
 8007b9e:	4413      	add	r3, r2
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8007baa:	4911      	ldr	r1, [pc, #68]	; (8007bf0 <UTIL_LCD_DisplayChar+0x68>)
 8007bac:	68c9      	ldr	r1, [r1, #12]
 8007bae:	4810      	ldr	r0, [pc, #64]	; (8007bf0 <UTIL_LCD_DisplayChar+0x68>)
 8007bb0:	0149      	lsls	r1, r1, #5
 8007bb2:	4401      	add	r1, r0
 8007bb4:	3108      	adds	r1, #8
 8007bb6:	6809      	ldr	r1, [r1, #0]
 8007bb8:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8007bba:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8007bbe:	4b0c      	ldr	r3, [pc, #48]	; (8007bf0 <UTIL_LCD_DisplayChar+0x68>)
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	480b      	ldr	r0, [pc, #44]	; (8007bf0 <UTIL_LCD_DisplayChar+0x68>)
 8007bc4:	015b      	lsls	r3, r3, #5
 8007bc6:	4403      	add	r3, r0
 8007bc8:	3308      	adds	r3, #8
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	889b      	ldrh	r3, [r3, #4]
 8007bce:	3307      	adds	r3, #7
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	da00      	bge.n	8007bd6 <UTIL_LCD_DisplayChar+0x4e>
 8007bd4:	3307      	adds	r3, #7
 8007bd6:	10db      	asrs	r3, r3, #3
 8007bd8:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8007bdc:	4413      	add	r3, r2
 8007bde:	461a      	mov	r2, r3
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 f904 	bl	8007df0 <DrawChar>
}
 8007be8:	bf00      	nop
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	2000044c 	.word	0x2000044c

08007bf4 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b08a      	sub	sp, #40	; 0x28
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8007c02:	2301      	movs	r3, #1
 8007c04:	627b      	str	r3, [r7, #36]	; 0x24
 8007c06:	2300      	movs	r3, #0
 8007c08:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	61fb      	str	r3, [r7, #28]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8007c16:	e002      	b.n	8007c1e <UTIL_LCD_DisplayStringAt+0x2a>
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	61fb      	str	r3, [r7, #28]
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	61ba      	str	r2, [r7, #24]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1f6      	bne.n	8007c18 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8007c2a:	4b48      	ldr	r3, [pc, #288]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	4a47      	ldr	r2, [pc, #284]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007c30:	68d2      	ldr	r2, [r2, #12]
 8007c32:	4946      	ldr	r1, [pc, #280]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007c34:	0152      	lsls	r2, r2, #5
 8007c36:	440a      	add	r2, r1
 8007c38:	3208      	adds	r2, #8
 8007c3a:	6812      	ldr	r2, [r2, #0]
 8007c3c:	8892      	ldrh	r2, [r2, #4]
 8007c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c42:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8007c44:	78fb      	ldrb	r3, [r7, #3]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d018      	beq.n	8007c7c <UTIL_LCD_DisplayStringAt+0x88>
 8007c4a:	2b03      	cmp	r3, #3
 8007c4c:	dc2a      	bgt.n	8007ca4 <UTIL_LCD_DisplayStringAt+0xb0>
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d002      	beq.n	8007c58 <UTIL_LCD_DisplayStringAt+0x64>
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d015      	beq.n	8007c82 <UTIL_LCD_DisplayStringAt+0x8e>
 8007c56:	e025      	b.n	8007ca4 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	4a3b      	ldr	r2, [pc, #236]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007c60:	68d2      	ldr	r2, [r2, #12]
 8007c62:	493a      	ldr	r1, [pc, #232]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007c64:	0152      	lsls	r2, r2, #5
 8007c66:	440a      	add	r2, r1
 8007c68:	3208      	adds	r2, #8
 8007c6a:	6812      	ldr	r2, [r2, #0]
 8007c6c:	8892      	ldrh	r2, [r2, #4]
 8007c6e:	fb02 f303 	mul.w	r3, r2, r3
 8007c72:	085b      	lsrs	r3, r3, #1
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007c7a:	e016      	b.n	8007caa <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007c80:	e013      	b.n	8007caa <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	4a30      	ldr	r2, [pc, #192]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007c8a:	68d2      	ldr	r2, [r2, #12]
 8007c8c:	492f      	ldr	r1, [pc, #188]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007c8e:	0152      	lsls	r2, r2, #5
 8007c90:	440a      	add	r2, r1
 8007c92:	3208      	adds	r2, #8
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	8892      	ldrh	r2, [r2, #4]
 8007c98:	fb03 f202 	mul.w	r2, r3, r2
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007ca2:	e002      	b.n	8007caa <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007ca8:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <UTIL_LCD_DisplayStringAt+0xc4>
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb6:	d31b      	bcc.n	8007cf0 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8007cbc:	e018      	b.n	8007cf0 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	68b9      	ldr	r1, [r7, #8]
 8007cc6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007cc8:	f7ff ff5e 	bl	8007b88 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8007ccc:	4b1f      	ldr	r3, [pc, #124]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	4a1e      	ldr	r2, [pc, #120]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007cd2:	015b      	lsls	r3, r3, #5
 8007cd4:	4413      	add	r3, r2
 8007cd6:	3308      	adds	r3, #8
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	889b      	ldrh	r3, [r3, #4]
 8007cdc:	461a      	mov	r2, r3
 8007cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce0:	4413      	add	r3, r2
 8007ce2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Point on the next character */
    Text++;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	607b      	str	r3, [r7, #4]
    i++;
 8007cea:	6a3b      	ldr	r3, [r7, #32]
 8007cec:	3301      	adds	r3, #1
 8007cee:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	bf14      	ite	ne
 8007cf8:	2301      	movne	r3, #1
 8007cfa:	2300      	moveq	r3, #0
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	4b13      	ldr	r3, [pc, #76]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007d00:	6959      	ldr	r1, [r3, #20]
 8007d02:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007d04:	68db      	ldr	r3, [r3, #12]
 8007d06:	4811      	ldr	r0, [pc, #68]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007d08:	015b      	lsls	r3, r3, #5
 8007d0a:	4403      	add	r3, r0
 8007d0c:	3308      	adds	r3, #8
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	889b      	ldrh	r3, [r3, #4]
 8007d12:	4618      	mov	r0, r3
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	fb00 f303 	mul.w	r3, r0, r3
 8007d1a:	1acb      	subs	r3, r1, r3
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	490b      	ldr	r1, [pc, #44]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007d20:	68c9      	ldr	r1, [r1, #12]
 8007d22:	480a      	ldr	r0, [pc, #40]	; (8007d4c <UTIL_LCD_DisplayStringAt+0x158>)
 8007d24:	0149      	lsls	r1, r1, #5
 8007d26:	4401      	add	r1, r0
 8007d28:	3108      	adds	r1, #8
 8007d2a:	6809      	ldr	r1, [r1, #0]
 8007d2c:	8889      	ldrh	r1, [r1, #4]
 8007d2e:	428b      	cmp	r3, r1
 8007d30:	bf2c      	ite	cs
 8007d32:	2301      	movcs	r3, #1
 8007d34:	2300      	movcc	r3, #0
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	4013      	ands	r3, r2
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1be      	bne.n	8007cbe <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8007d40:	bf00      	nop
 8007d42:	bf00      	nop
 8007d44:	3728      	adds	r7, #40	; 0x28
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	2000044c 	.word	0x2000044c

08007d50 <UTIL_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 60 characters on the LCD.
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  */
void UTIL_LCD_DisplayStringAtLine(uint32_t Line, uint8_t *ptr)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  UTIL_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8007d5a:	f7ff fee9 	bl	8007b30 <UTIL_LCD_GetFont>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	88db      	ldrh	r3, [r3, #6]
 8007d62:	461a      	mov	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	fb03 f102 	mul.w	r1, r3, r2
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	683a      	ldr	r2, [r7, #0]
 8007d6e:	2000      	movs	r0, #0
 8007d70:	f7ff ff40 	bl	8007bf4 <UTIL_LCD_DisplayStringAt>
}
 8007d74:	bf00      	nop
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8007d7c:	b590      	push	{r4, r7, lr}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8007d8a:	4b17      	ldr	r3, [pc, #92]	; (8007de8 <UTIL_LCD_FillRect+0x6c>)
 8007d8c:	69db      	ldr	r3, [r3, #28]
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d11a      	bne.n	8007dc8 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 8007d92:	4b16      	ldr	r3, [pc, #88]	; (8007dec <UTIL_LCD_FillRect+0x70>)
 8007d94:	691c      	ldr	r4, [r3, #16]
 8007d96:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <UTIL_LCD_FillRect+0x6c>)
 8007d98:	6918      	ldr	r0, [r3, #16]
 8007d9a:	6a3b      	ldr	r3, [r7, #32]
 8007d9c:	08db      	lsrs	r3, r3, #3
 8007d9e:	f003 021f 	and.w	r2, r3, #31
 8007da2:	6a3b      	ldr	r3, [r7, #32]
 8007da4:	0a9b      	lsrs	r3, r3, #10
 8007da6:	015b      	lsls	r3, r3, #5
 8007da8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8007dac:	431a      	orrs	r2, r3
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	0cdb      	lsrs	r3, r3, #19
 8007db2:	02db      	lsls	r3, r3, #11
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	4313      	orrs	r3, r2
 8007db8:	9301      	str	r3, [sp, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	68f9      	ldr	r1, [r7, #12]
 8007dc4:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8007dc6:	e00b      	b.n	8007de0 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8007dc8:	4b08      	ldr	r3, [pc, #32]	; (8007dec <UTIL_LCD_FillRect+0x70>)
 8007dca:	691c      	ldr	r4, [r3, #16]
 8007dcc:	4b06      	ldr	r3, [pc, #24]	; (8007de8 <UTIL_LCD_FillRect+0x6c>)
 8007dce:	6918      	ldr	r0, [r3, #16]
 8007dd0:	6a3b      	ldr	r3, [r7, #32]
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	68f9      	ldr	r1, [r7, #12]
 8007dde:	47a0      	blx	r4
}
 8007de0:	bf00      	nop
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd90      	pop	{r4, r7, pc}
 8007de8:	2000044c 	.word	0x2000044c
 8007dec:	2000048c 	.word	0x2000048c

08007df0 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b0b2      	sub	sp, #200	; 0xc8
 8007df4:	af02      	add	r7, sp, #8
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e02:	2300      	movs	r3, #0
 8007e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8007e08:	4ba5      	ldr	r3, [pc, #660]	; (80080a0 <DrawChar+0x2b0>)
 8007e0a:	68db      	ldr	r3, [r3, #12]
 8007e0c:	4aa4      	ldr	r2, [pc, #656]	; (80080a0 <DrawChar+0x2b0>)
 8007e0e:	015b      	lsls	r3, r3, #5
 8007e10:	4413      	add	r3, r2
 8007e12:	3308      	adds	r3, #8
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	88db      	ldrh	r3, [r3, #6]
 8007e18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8007e1c:	4ba0      	ldr	r3, [pc, #640]	; (80080a0 <DrawChar+0x2b0>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	4a9f      	ldr	r2, [pc, #636]	; (80080a0 <DrawChar+0x2b0>)
 8007e22:	015b      	lsls	r3, r3, #5
 8007e24:	4413      	add	r3, r2
 8007e26:	3308      	adds	r3, #8
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	889b      	ldrh	r3, [r3, #4]
 8007e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8007e30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e34:	3307      	adds	r3, #7
 8007e36:	f023 0207 	bic.w	r2, r3, #7
 8007e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  for(i = 0; i < height; i++)
 8007e44:	2300      	movs	r3, #0
 8007e46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007e4a:	e11c      	b.n	8008086 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8007e4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e50:	3307      	adds	r3, #7
 8007e52:	08db      	lsrs	r3, r3, #3
 8007e54:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007e58:	fb02 f303 	mul.w	r3, r2, r3
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	4413      	add	r3, r2
 8007e60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

    switch(((width + 7)/8))
 8007e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e68:	3307      	adds	r3, #7
 8007e6a:	08db      	lsrs	r3, r3, #3
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d002      	beq.n	8007e76 <DrawChar+0x86>
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d006      	beq.n	8007e82 <DrawChar+0x92>
 8007e74:	e011      	b.n	8007e9a <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 8007e76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8007e80:	e01d      	b.n	8007ebe <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8007e82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	021b      	lsls	r3, r3, #8
 8007e8a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007e8e:	3201      	adds	r2, #1
 8007e90:	7812      	ldrb	r2, [r2, #0]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8007e98:	e011      	b.n	8007ebe <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8007e9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	041a      	lsls	r2, r3, #16
 8007ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	4313      	orrs	r3, r2
 8007eae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007eb2:	3202      	adds	r2, #2
 8007eb4:	7812      	ldrb	r2, [r2, #0]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      break;
 8007ebc:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8007ebe:	4b78      	ldr	r3, [pc, #480]	; (80080a0 <DrawChar+0x2b0>)
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	4a77      	ldr	r2, [pc, #476]	; (80080a0 <DrawChar+0x2b0>)
 8007ec4:	015b      	lsls	r3, r3, #5
 8007ec6:	4413      	add	r3, r2
 8007ec8:	331c      	adds	r3, #28
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	f040 808c 	bne.w	8007fea <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ed8:	e074      	b.n	8007fc4 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 8007eda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ede:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ee2:	1ad2      	subs	r2, r2, r3
 8007ee4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ee8:	4413      	add	r3, r2
 8007eea:	3b01      	subs	r3, #1
 8007eec:	2201      	movs	r2, #1
 8007eee:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007ef8:	4013      	ands	r3, r2
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d02d      	beq.n	8007f5a <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8007efe:	4b68      	ldr	r3, [pc, #416]	; (80080a0 <DrawChar+0x2b0>)
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	4a67      	ldr	r2, [pc, #412]	; (80080a0 <DrawChar+0x2b0>)
 8007f04:	015b      	lsls	r3, r3, #5
 8007f06:	4413      	add	r3, r2
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	08db      	lsrs	r3, r3, #3
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	f003 031f 	and.w	r3, r3, #31
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	4b62      	ldr	r3, [pc, #392]	; (80080a0 <DrawChar+0x2b0>)
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	4961      	ldr	r1, [pc, #388]	; (80080a0 <DrawChar+0x2b0>)
 8007f1a:	015b      	lsls	r3, r3, #5
 8007f1c:	440b      	add	r3, r1
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	0a9b      	lsrs	r3, r3, #10
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	015b      	lsls	r3, r3, #5
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	4313      	orrs	r3, r2
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	4b5b      	ldr	r3, [pc, #364]	; (80080a0 <DrawChar+0x2b0>)
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	495a      	ldr	r1, [pc, #360]	; (80080a0 <DrawChar+0x2b0>)
 8007f38:	015b      	lsls	r3, r3, #5
 8007f3a:	440b      	add	r3, r1
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	0cdb      	lsrs	r3, r3, #19
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	02db      	lsls	r3, r3, #11
 8007f44:	b29b      	uxth	r3, r3
 8007f46:	4313      	orrs	r3, r2
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	33c0      	adds	r3, #192	; 0xc0
 8007f52:	443b      	add	r3, r7
 8007f54:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8007f58:	e02f      	b.n	8007fba <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 8007f5a:	4b51      	ldr	r3, [pc, #324]	; (80080a0 <DrawChar+0x2b0>)
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	4a50      	ldr	r2, [pc, #320]	; (80080a0 <DrawChar+0x2b0>)
 8007f60:	015b      	lsls	r3, r3, #5
 8007f62:	4413      	add	r3, r2
 8007f64:	3304      	adds	r3, #4
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	08db      	lsrs	r3, r3, #3
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f003 031f 	and.w	r3, r3, #31
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	4b4b      	ldr	r3, [pc, #300]	; (80080a0 <DrawChar+0x2b0>)
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	494a      	ldr	r1, [pc, #296]	; (80080a0 <DrawChar+0x2b0>)
 8007f78:	015b      	lsls	r3, r3, #5
 8007f7a:	440b      	add	r3, r1
 8007f7c:	3304      	adds	r3, #4
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	0a9b      	lsrs	r3, r3, #10
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	015b      	lsls	r3, r3, #5
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	b29a      	uxth	r2, r3
 8007f92:	4b43      	ldr	r3, [pc, #268]	; (80080a0 <DrawChar+0x2b0>)
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	4942      	ldr	r1, [pc, #264]	; (80080a0 <DrawChar+0x2b0>)
 8007f98:	015b      	lsls	r3, r3, #5
 8007f9a:	440b      	add	r3, r1
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	0cdb      	lsrs	r3, r3, #19
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	02db      	lsls	r3, r3, #11
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	b29a      	uxth	r2, r3
 8007fac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fb0:	005b      	lsls	r3, r3, #1
 8007fb2:	33c0      	adds	r3, #192	; 0xc0
 8007fb4:	443b      	add	r3, r7
 8007fb6:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8007fba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007fc4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007fc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	d384      	bcc.n	8007eda <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8007fd0:	68b9      	ldr	r1, [r7, #8]
 8007fd2:	1c4b      	adds	r3, r1, #1
 8007fd4:	60bb      	str	r3, [r7, #8]
 8007fd6:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8007fda:	2301      	movs	r3, #1
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f7ff fdb4 	bl	8007b50 <UTIL_LCD_FillRGBRect>
 8007fe8:	e048      	b.n	800807c <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 8007fea:	2300      	movs	r3, #0
 8007fec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ff0:	e032      	b.n	8008058 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8007ff2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007ff6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ffa:	1ad2      	subs	r2, r2, r3
 8007ffc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008000:	4413      	add	r3, r2
 8008002:	3b01      	subs	r3, #1
 8008004:	2201      	movs	r2, #1
 8008006:	fa02 f303 	lsl.w	r3, r2, r3
 800800a:	461a      	mov	r2, r3
 800800c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008010:	4013      	ands	r3, r2
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00d      	beq.n	8008032 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8008016:	4b22      	ldr	r3, [pc, #136]	; (80080a0 <DrawChar+0x2b0>)
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	4a21      	ldr	r2, [pc, #132]	; (80080a0 <DrawChar+0x2b0>)
 800801c:	015b      	lsls	r3, r3, #5
 800801e:	4413      	add	r3, r2
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008026:	009b      	lsls	r3, r3, #2
 8008028:	33c0      	adds	r3, #192	; 0xc0
 800802a:	443b      	add	r3, r7
 800802c:	f843 2cac 	str.w	r2, [r3, #-172]
 8008030:	e00d      	b.n	800804e <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8008032:	4b1b      	ldr	r3, [pc, #108]	; (80080a0 <DrawChar+0x2b0>)
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	4a1a      	ldr	r2, [pc, #104]	; (80080a0 <DrawChar+0x2b0>)
 8008038:	015b      	lsls	r3, r3, #5
 800803a:	4413      	add	r3, r2
 800803c:	3304      	adds	r3, #4
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	33c0      	adds	r3, #192	; 0xc0
 8008048:	443b      	add	r3, r7
 800804a:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 800804e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008052:	3301      	adds	r3, #1
 8008054:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008058:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800805c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008060:	429a      	cmp	r2, r3
 8008062:	d3c6      	bcc.n	8007ff2 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	1c4b      	adds	r3, r1, #1
 8008068:	60bb      	str	r3, [r7, #8]
 800806a:	f107 0214 	add.w	r2, r7, #20
 800806e:	2301      	movs	r3, #1
 8008070:	9300      	str	r3, [sp, #0]
 8008072:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7ff fd6a 	bl	8007b50 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 800807c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008080:	3301      	adds	r3, #1
 8008082:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008086:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800808a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800808e:	429a      	cmp	r2, r3
 8008090:	f4ff aedc 	bcc.w	8007e4c <DrawChar+0x5c>
    }
  }
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	37c0      	adds	r7, #192	; 0xc0
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	2000044c 	.word	0x2000044c

080080a4 <__libc_init_array>:
 80080a4:	b570      	push	{r4, r5, r6, lr}
 80080a6:	4d0d      	ldr	r5, [pc, #52]	; (80080dc <__libc_init_array+0x38>)
 80080a8:	4c0d      	ldr	r4, [pc, #52]	; (80080e0 <__libc_init_array+0x3c>)
 80080aa:	1b64      	subs	r4, r4, r5
 80080ac:	10a4      	asrs	r4, r4, #2
 80080ae:	2600      	movs	r6, #0
 80080b0:	42a6      	cmp	r6, r4
 80080b2:	d109      	bne.n	80080c8 <__libc_init_array+0x24>
 80080b4:	4d0b      	ldr	r5, [pc, #44]	; (80080e4 <__libc_init_array+0x40>)
 80080b6:	4c0c      	ldr	r4, [pc, #48]	; (80080e8 <__libc_init_array+0x44>)
 80080b8:	f000 f818 	bl	80080ec <_init>
 80080bc:	1b64      	subs	r4, r4, r5
 80080be:	10a4      	asrs	r4, r4, #2
 80080c0:	2600      	movs	r6, #0
 80080c2:	42a6      	cmp	r6, r4
 80080c4:	d105      	bne.n	80080d2 <__libc_init_array+0x2e>
 80080c6:	bd70      	pop	{r4, r5, r6, pc}
 80080c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080cc:	4798      	blx	r3
 80080ce:	3601      	adds	r6, #1
 80080d0:	e7ee      	b.n	80080b0 <__libc_init_array+0xc>
 80080d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d6:	4798      	blx	r3
 80080d8:	3601      	adds	r6, #1
 80080da:	e7f2      	b.n	80080c2 <__libc_init_array+0x1e>
 80080dc:	080a0a00 	.word	0x080a0a00
 80080e0:	080a0a00 	.word	0x080a0a00
 80080e4:	080a0a00 	.word	0x080a0a00
 80080e8:	080a0a04 	.word	0x080a0a04

080080ec <_init>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	bf00      	nop
 80080f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f2:	bc08      	pop	{r3}
 80080f4:	469e      	mov	lr, r3
 80080f6:	4770      	bx	lr

080080f8 <_fini>:
 80080f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080fa:	bf00      	nop
 80080fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080fe:	bc08      	pop	{r3}
 8008100:	469e      	mov	lr, r3
 8008102:	4770      	bx	lr
